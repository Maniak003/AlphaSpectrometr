
TestController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1a8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b388  0800b388  0000c388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b828  0800b828  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b828  0800b828  0000c828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b830  0800b830  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b830  0800b830  0000c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b834  0800b834  0000c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b838  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000459c  200001d8  0800ba10  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004774  0800ba10  0000d774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c353  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b8  00000000  00000000  0002955b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0002ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013a6  00000000  00000000  0002e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025208  00000000  00000000  0002f6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcfe  00000000  00000000  000548ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f67c5  00000000  00000000  000725ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168db1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea0  00000000  00000000  00168df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00170c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b370 	.word	0x0800b370

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800b370 	.word	0x0800b370

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <AD5245level>:
 *      Author: ed
 */
#include <stdint.h>
#include <AD5245.h>

void AD5245level(uint8_t lev) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af04      	add	r7, sp, #16
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdBuff[2];
	uint16_t cmd = AD5245_WRITE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	81fb      	strh	r3, [r7, #14]
	cmdBuff[0] = lev;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&AD5245_I2C_PORT, AD5245_I2C_ADDR, cmd, 2, cmdBuff, 1, 100);
 8000efa:	89fa      	ldrh	r2, [r7, #14]
 8000efc:	2364      	movs	r3, #100	@ 0x64
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2301      	movs	r3, #1
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	2158      	movs	r1, #88	@ 0x58
 8000f0e:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <AD5245level+0x34>)
 8000f10:	f003 fe9e 	bl	8004c50 <HAL_I2C_Mem_Write>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200002e8 	.word	0x200002e8

08000f20 <sendWorld>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t sendWorld(uint32_t dt) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	uint8_t l1_word, l2_word, l3_word, l4_word;
	l1_word = dt & 0xFF;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	73fb      	strb	r3, [r7, #15]
	l2_word = (dt >> 8) & 0xFF;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	73bb      	strb	r3, [r7, #14]
	l3_word = (dt >> 16) & 0xFF;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	737b      	strb	r3, [r7, #13]
	l4_word = (dt >> 24) & 0xFF;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	0e1b      	lsrs	r3, r3, #24
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	733b      	strb	r3, [r7, #12]

	while ( HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &l1_word , 1, 100));
 8000f46:	bf00      	nop
 8000f48:	f107 010f 	add.w	r1, r7, #15
 8000f4c:	2364      	movs	r3, #100	@ 0x64
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4815      	ldr	r0, [pc, #84]	@ (8000fa8 <sendWorld+0x88>)
 8000f52:	f006 fabb 	bl	80074cc <HAL_UART_Transmit>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f5      	bne.n	8000f48 <sendWorld+0x28>
	while ( HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &l2_word , 1, 100));
 8000f5c:	bf00      	nop
 8000f5e:	f107 010e 	add.w	r1, r7, #14
 8000f62:	2364      	movs	r3, #100	@ 0x64
 8000f64:	2201      	movs	r2, #1
 8000f66:	4810      	ldr	r0, [pc, #64]	@ (8000fa8 <sendWorld+0x88>)
 8000f68:	f006 fab0 	bl	80074cc <HAL_UART_Transmit>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f5      	bne.n	8000f5e <sendWorld+0x3e>
	while ( HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &l3_word , 1, 100));
 8000f72:	bf00      	nop
 8000f74:	f107 010d 	add.w	r1, r7, #13
 8000f78:	2364      	movs	r3, #100	@ 0x64
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <sendWorld+0x88>)
 8000f7e:	f006 faa5 	bl	80074cc <HAL_UART_Transmit>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f5      	bne.n	8000f74 <sendWorld+0x54>
	while ( HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &l4_word , 1, 100));
 8000f88:	bf00      	nop
 8000f8a:	f107 010c 	add.w	r1, r7, #12
 8000f8e:	2364      	movs	r3, #100	@ 0x64
 8000f90:	2201      	movs	r2, #1
 8000f92:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <sendWorld+0x88>)
 8000f94:	f006 fa9a 	bl	80074cc <HAL_UART_Transmit>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f5      	bne.n	8000f8a <sendWorld+0x6a>
	return dt;
 8000f9e:	687b      	ldr	r3, [r7, #4]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000388 	.word	0x20000388

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b093      	sub	sp, #76	@ 0x4c
 8000fb0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f001 f8d8 	bl	8002166 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb6:	f000 fa53 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fba:	f000 fcc7 	bl	800194c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fbe:	f000 fc93 	bl	80018e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fc2:	f000 fa97 	bl	80014f4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000fc6:	f000 fc43 	bl	8001850 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000fca:	f000 fb81 	bl	80016d0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000fce:	f000 fbbf 	bl	8001750 <MX_TIM2_Init>
  MX_DAC2_Init();
 8000fd2:	f000 fb43 	bl	800165c <MX_DAC2_Init>
  MX_DAC1_Init();
 8000fd6:	f000 fb07 	bl	80015e8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2108      	movs	r1, #8
 8000fde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe2:	f003 fd67 	bl	8004ab4 <HAL_GPIO_WritePin>

  bzero((char *) uartBuffer, sizeof(uartBuffer));
 8000fe6:	4bab      	ldr	r3, [pc, #684]	@ (8001294 <main+0x2e8>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000fee:	461a      	mov	r2, r3
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	f008 f8e8 	bl	80091c6 <memset>
  sprintf(uartBuffer, "Start AlphaSpectrometer.\n\r");
 8000ff6:	49a8      	ldr	r1, [pc, #672]	@ (8001298 <main+0x2ec>)
 8000ff8:	48a6      	ldr	r0, [pc, #664]	@ (8001294 <main+0x2e8>)
 8000ffa:	f008 f881 	bl	8009100 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8000ffe:	48a5      	ldr	r0, [pc, #660]	@ (8001294 <main+0x2e8>)
 8001000:	f7ff f95e 	bl	80002c0 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	2364      	movs	r3, #100	@ 0x64
 800100a:	49a2      	ldr	r1, [pc, #648]	@ (8001294 <main+0x2e8>)
 800100c:	48a3      	ldr	r0, [pc, #652]	@ (800129c <main+0x2f0>)
 800100e:	f006 fa5d 	bl	80074cc <HAL_UART_Transmit>

  bzero((char *) uartBuffer, sizeof(uartBuffer));
 8001012:	4ba0      	ldr	r3, [pc, #640]	@ (8001294 <main+0x2e8>)
 8001014:	4618      	mov	r0, r3
 8001016:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800101a:	461a      	mov	r2, r3
 800101c:	2100      	movs	r1, #0
 800101e:	f008 f8d2 	bl	80091c6 <memset>
  sprintf(uartBuffer, "Resolution: %d channels.\n\r", SPECTER_SIZE);
 8001022:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001026:	499e      	ldr	r1, [pc, #632]	@ (80012a0 <main+0x2f4>)
 8001028:	489a      	ldr	r0, [pc, #616]	@ (8001294 <main+0x2e8>)
 800102a:	f008 f869 	bl	8009100 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 800102e:	4899      	ldr	r0, [pc, #612]	@ (8001294 <main+0x2e8>)
 8001030:	f7ff f946 	bl	80002c0 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	b29a      	uxth	r2, r3
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	4996      	ldr	r1, [pc, #600]	@ (8001294 <main+0x2e8>)
 800103c:	4897      	ldr	r0, [pc, #604]	@ (800129c <main+0x2f0>)
 800103e:	f006 fa45 	bl	80074cc <HAL_UART_Transmit>

  /* Подготовка буфера для спектра */
  for (int i = 0; i < SPECTER_SIZE; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001046:	e007      	b.n	8001058 <main+0xac>
	  specterBuffer[i] = 0;
 8001048:	4a96      	ldr	r2, [pc, #600]	@ (80012a4 <main+0x2f8>)
 800104a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104c:	2100      	movs	r1, #0
 800104e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < SPECTER_SIZE; i++) {
 8001052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001054:	3301      	adds	r3, #1
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800105a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800105e:	dbf3      	blt.n	8001048 <main+0x9c>
  }
  pulseCounter = 0;
 8001060:	4b91      	ldr	r3, [pc, #580]	@ (80012a8 <main+0x2fc>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]

  /* UART для приема */
  HAL_UART_Receive_DMA(&huart1, ctrlChar, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	4990      	ldr	r1, [pc, #576]	@ (80012ac <main+0x300>)
 800106a:	488c      	ldr	r0, [pc, #560]	@ (800129c <main+0x2f0>)
 800106c:	f006 fabc 	bl	80075e8 <HAL_UART_Receive_DMA>

  /* Настройка усиления */
  AD5245level(currentLevel);
 8001070:	4b8f      	ldr	r3, [pc, #572]	@ (80012b0 <main+0x304>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff37 	bl	8000ee8 <AD5245level>

  /* Установка начального порога компаратора */
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 800107a:	2100      	movs	r1, #0
 800107c:	488d      	ldr	r0, [pc, #564]	@ (80012b4 <main+0x308>)
 800107e:	f002 fed3 	bl	8003e28 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_level);
 8001082:	4b8d      	ldr	r3, [pc, #564]	@ (80012b8 <main+0x30c>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	488a      	ldr	r0, [pc, #552]	@ (80012b4 <main+0x308>)
 800108c:	f002 ff38 	bl	8003f00 <HAL_DAC_SetValue>

  /* Запускаем ADC */
  uint8_t hal_code;
  if (  HAL_OK != (hal_code = HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED))) {
 8001090:	217f      	movs	r1, #127	@ 0x7f
 8001092:	488a      	ldr	r0, [pc, #552]	@ (80012bc <main+0x310>)
 8001094:	f002 fc2c 	bl	80038f0 <HAL_ADCEx_Calibration_Start>
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d017      	beq.n	80010d2 <main+0x126>
	  bzero((char *) uartBuffer, sizeof(uartBuffer));
 80010a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001294 <main+0x2e8>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80010aa:	461a      	mov	r2, r3
 80010ac:	2100      	movs	r1, #0
 80010ae:	f008 f88a 	bl	80091c6 <memset>
	  sprintf(uartBuffer, "Error ADC calibrate: %u.\n\r", hal_code);
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4982      	ldr	r1, [pc, #520]	@ (80012c0 <main+0x314>)
 80010b8:	4876      	ldr	r0, [pc, #472]	@ (8001294 <main+0x2e8>)
 80010ba:	f008 f821 	bl	8009100 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 80010be:	4875      	ldr	r0, [pc, #468]	@ (8001294 <main+0x2e8>)
 80010c0:	f7ff f8fe 	bl	80002c0 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	2364      	movs	r3, #100	@ 0x64
 80010ca:	4972      	ldr	r1, [pc, #456]	@ (8001294 <main+0x2e8>)
 80010cc:	4873      	ldr	r0, [pc, #460]	@ (800129c <main+0x2f0>)
 80010ce:	f006 f9fd 	bl	80074cc <HAL_UART_Transmit>
  }
  HAL_ADC_Start_DMA(&hadc1, pulseLevel, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	497b      	ldr	r1, [pc, #492]	@ (80012c4 <main+0x318>)
 80010d6:	4879      	ldr	r0, [pc, #484]	@ (80012bc <main+0x310>)
 80010d8:	f001 fcfc 	bl	8002ad4 <HAL_ADC_Start_DMA>
  hdma_adc1.Instance->CCR &= ~DMA_IT_HT;
 80010dc:	4b7a      	ldr	r3, [pc, #488]	@ (80012c8 <main+0x31c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b79      	ldr	r3, [pc, #484]	@ (80012c8 <main+0x31c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0204 	bic.w	r2, r2, #4
 80010ea:	601a      	str	r2, [r3, #0]
  measurementTime = HAL_GetTick();
 80010ec:	f001 f8a0 	bl	8002230 <HAL_GetTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a76      	ldr	r2, [pc, #472]	@ (80012cc <main+0x320>)
 80010f4:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(50);
 80010f6:	2032      	movs	r0, #50	@ 0x32
 80010f8:	f001 f8a6 	bl	8002248 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80010fc:	2108      	movs	r1, #8
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001102:	f003 fcef 	bl	8004ae4 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	  //HAL_Delay(100);
	  uint32_t sm = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
	  for (int i = 0; i < SPECTER_SIZE; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
 800110e:	e009      	b.n	8001124 <main+0x178>
		  sm = sm + specterBuffer[i];
 8001110:	4a64      	ldr	r2, [pc, #400]	@ (80012a4 <main+0x2f8>)
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800111a:	4413      	add	r3, r2
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  for (int i = 0; i < SPECTER_SIZE; i++) {
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	3301      	adds	r3, #1
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
 8001124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800112a:	dbf1      	blt.n	8001110 <main+0x164>
	  }
	  uint32_t tm = ( HAL_GetTick() - measurementTime) / 1000;
 800112c:	f001 f880 	bl	8002230 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	4b66      	ldr	r3, [pc, #408]	@ (80012cc <main+0x320>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	4a65      	ldr	r2, [pc, #404]	@ (80012d0 <main+0x324>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	099b      	lsrs	r3, r3, #6
 8001140:	60bb      	str	r3, [r7, #8]
	  bzero((char *) uartBuffer, sizeof(uartBuffer));
 8001142:	4b54      	ldr	r3, [pc, #336]	@ (8001294 <main+0x2e8>)
 8001144:	4618      	mov	r0, r3
 8001146:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800114a:	461a      	mov	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	f008 f83a 	bl	80091c6 <memset>
	  sprintf(uartBuffer, "Time: %lu, Count: %lu, Rate: %0.4f cps, Summ: %lu, Comparator[p/m]: %u, HV[+/-]: %u          \r", tm, pulseCounter, (float) pulseCounter / tm, sm, dac_level, currentLevel);
 8001152:	4b55      	ldr	r3, [pc, #340]	@ (80012a8 <main+0x2fc>)
 8001154:	681c      	ldr	r4, [r3, #0]
 8001156:	4b54      	ldr	r3, [pc, #336]	@ (80012a8 <main+0x2fc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800116c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001170:	ee16 0a90 	vmov	r0, s13
 8001174:	f7ff fa10 	bl	8000598 <__aeabi_f2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	494e      	ldr	r1, [pc, #312]	@ (80012b8 <main+0x30c>)
 800117e:	8809      	ldrh	r1, [r1, #0]
 8001180:	4608      	mov	r0, r1
 8001182:	494b      	ldr	r1, [pc, #300]	@ (80012b0 <main+0x304>)
 8001184:	7809      	ldrb	r1, [r1, #0]
 8001186:	9104      	str	r1, [sp, #16]
 8001188:	9003      	str	r0, [sp, #12]
 800118a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800118c:	9102      	str	r1, [sp, #8]
 800118e:	e9cd 2300 	strd	r2, r3, [sp]
 8001192:	4623      	mov	r3, r4
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	494f      	ldr	r1, [pc, #316]	@ (80012d4 <main+0x328>)
 8001198:	483e      	ldr	r0, [pc, #248]	@ (8001294 <main+0x2e8>)
 800119a:	f007 ffb1 	bl	8009100 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 800119e:	483d      	ldr	r0, [pc, #244]	@ (8001294 <main+0x2e8>)
 80011a0:	f7ff f88e 	bl	80002c0 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	2364      	movs	r3, #100	@ 0x64
 80011aa:	493a      	ldr	r1, [pc, #232]	@ (8001294 <main+0x2e8>)
 80011ac:	483b      	ldr	r0, [pc, #236]	@ (800129c <main+0x2f0>)
 80011ae:	f006 f98d 	bl	80074cc <HAL_UART_Transmit>

	  if (reqToSpecter) {
 80011b2:	4b49      	ldr	r3, [pc, #292]	@ (80012d8 <main+0x32c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d09d      	beq.n	80010f6 <main+0x14a>
		  reqToSpecter = false;
 80011ba:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <main+0x32c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
		  //bzero((char *) uartBuffer, sizeof(uartBuffer));
		  //sprintf(uartBuffer, "\n\rChar: %s\n\r", ctrlChar);
		  //HAL_UART_Transmit(&huart1, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
		  /* Выгрузка спектра в UART */
		  if (strchr((char *) ctrlChar, 'l')) {
 80011c0:	216c      	movs	r1, #108	@ 0x6c
 80011c2:	483a      	ldr	r0, [pc, #232]	@ (80012ac <main+0x300>)
 80011c4:	f008 f807 	bl	80091d6 <strchr>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d031      	beq.n	8001232 <main+0x286>
			  HAL_UART_Transmit(&huart1, (uint8_t *) "\n\r$\n\r", 5, 100);
 80011ce:	2364      	movs	r3, #100	@ 0x64
 80011d0:	2205      	movs	r2, #5
 80011d2:	4942      	ldr	r1, [pc, #264]	@ (80012dc <main+0x330>)
 80011d4:	4831      	ldr	r0, [pc, #196]	@ (800129c <main+0x2f0>)
 80011d6:	f006 f979 	bl	80074cc <HAL_UART_Transmit>
			  for (int i = 0; i < SPECTER_SIZE; i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	e01d      	b.n	800121c <main+0x270>
				  bzero((char *) uartBuffer, sizeof(uartBuffer));
 80011e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001294 <main+0x2e8>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80011e8:	461a      	mov	r2, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	f007 ffeb 	bl	80091c6 <memset>
				  sprintf(uartBuffer, "%d; %lu\n\r", i, specterBuffer[i]);
 80011f0:	4a2c      	ldr	r2, [pc, #176]	@ (80012a4 <main+0x2f8>)
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	6a3a      	ldr	r2, [r7, #32]
 80011fa:	4939      	ldr	r1, [pc, #228]	@ (80012e0 <main+0x334>)
 80011fc:	4825      	ldr	r0, [pc, #148]	@ (8001294 <main+0x2e8>)
 80011fe:	f007 ff7f 	bl	8009100 <siprintf>
				  HAL_UART_Transmit(&huart1, (uint8_t *) uartBuffer, strlen(uartBuffer), 100);
 8001202:	4824      	ldr	r0, [pc, #144]	@ (8001294 <main+0x2e8>)
 8001204:	f7ff f85c 	bl	80002c0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	2364      	movs	r3, #100	@ 0x64
 800120e:	4921      	ldr	r1, [pc, #132]	@ (8001294 <main+0x2e8>)
 8001210:	4822      	ldr	r0, [pc, #136]	@ (800129c <main+0x2f0>)
 8001212:	f006 f95b 	bl	80074cc <HAL_UART_Transmit>
			  for (int i = 0; i < SPECTER_SIZE; i++) {
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	3301      	adds	r3, #1
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001222:	dbdd      	blt.n	80011e0 <main+0x234>
			  }
			  HAL_UART_Transmit(&huart1, (uint8_t *) "#\n\r", 3, 100);
 8001224:	2364      	movs	r3, #100	@ 0x64
 8001226:	2203      	movs	r2, #3
 8001228:	492e      	ldr	r1, [pc, #184]	@ (80012e4 <main+0x338>)
 800122a:	481c      	ldr	r0, [pc, #112]	@ (800129c <main+0x2f0>)
 800122c:	f006 f94e 	bl	80074cc <HAL_UART_Transmit>
 8001230:	e761      	b.n	80010f6 <main+0x14a>
		  } else
			  /* Увеличение уровня усиления */
			  if (strchr((char *) ctrlChar, '+')) {
 8001232:	212b      	movs	r1, #43	@ 0x2b
 8001234:	481d      	ldr	r0, [pc, #116]	@ (80012ac <main+0x300>)
 8001236:	f007 ffce 	bl	80091d6 <strchr>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <main+0x2ac>
					  currentLevel++;
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <main+0x304>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <main+0x304>)
 800124a:	701a      	strb	r2, [r3, #0]
					  AD5245level(currentLevel);
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <main+0x304>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe49 	bl	8000ee8 <AD5245level>
 8001256:	e74e      	b.n	80010f6 <main+0x14a>
		  } else
			  /* Уменьшение уровня усиления */
			  if (strchr((char *) ctrlChar, '-')) {
 8001258:	212d      	movs	r1, #45	@ 0x2d
 800125a:	4814      	ldr	r0, [pc, #80]	@ (80012ac <main+0x300>)
 800125c:	f007 ffbb 	bl	80091d6 <strchr>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00b      	beq.n	800127e <main+0x2d2>
					  currentLevel--;
 8001266:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <main+0x304>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	3b01      	subs	r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <main+0x304>)
 8001270:	701a      	strb	r2, [r3, #0]
					  AD5245level(currentLevel);
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <main+0x304>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe36 	bl	8000ee8 <AD5245level>
 800127c:	e73b      	b.n	80010f6 <main+0x14a>
		  } else
			  /* Очистка буфера спектрометра и счетчиков */
			  if (strchr((char *) ctrlChar, 'c')) {
 800127e:	2163      	movs	r1, #99	@ 0x63
 8001280:	480a      	ldr	r0, [pc, #40]	@ (80012ac <main+0x300>)
 8001282:	f007 ffa8 	bl	80091d6 <strchr>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d042      	beq.n	8001312 <main+0x366>
					  for (int i = 0; i < SPECTER_SIZE; i++) {
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	e032      	b.n	80012f8 <main+0x34c>
 8001292:	bf00      	nop
 8001294:	2000047c 	.word	0x2000047c
 8001298:	0800b388 	.word	0x0800b388
 800129c:	20000388 	.word	0x20000388
 80012a0:	0800b3a4 	.word	0x0800b3a4
 80012a4:	20000610 	.word	0x20000610
 80012a8:	20004610 	.word	0x20004610
 80012ac:	2000060c 	.word	0x2000060c
 80012b0:	20000000 	.word	0x20000000
 80012b4:	200002d4 	.word	0x200002d4
 80012b8:	20000002 	.word	0x20000002
 80012bc:	200001f4 	.word	0x200001f4
 80012c0:	0800b3c0 	.word	0x0800b3c0
 80012c4:	20004618 	.word	0x20004618
 80012c8:	20000260 	.word	0x20000260
 80012cc:	20004614 	.word	0x20004614
 80012d0:	10624dd3 	.word	0x10624dd3
 80012d4:	0800b3dc 	.word	0x0800b3dc
 80012d8:	2000461c 	.word	0x2000461c
 80012dc:	0800b43c 	.word	0x0800b43c
 80012e0:	0800b444 	.word	0x0800b444
 80012e4:	0800b450 	.word	0x0800b450
						  specterBuffer[i] = 0;
 80012e8:	4a53      	ldr	r2, [pc, #332]	@ (8001438 <main+0x48c>)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	2100      	movs	r1, #0
 80012ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  for (int i = 0; i < SPECTER_SIZE; i++) {
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012fe:	dbf3      	blt.n	80012e8 <main+0x33c>
					  }
					  pulseCounter = 0;
 8001300:	4b4e      	ldr	r3, [pc, #312]	@ (800143c <main+0x490>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
					  measurementTime = HAL_GetTick();
 8001306:	f000 ff93 	bl	8002230 <HAL_GetTick>
 800130a:	4603      	mov	r3, r0
 800130c:	4a4c      	ldr	r2, [pc, #304]	@ (8001440 <main+0x494>)
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e6f1      	b.n	80010f6 <main+0x14a>
		  } else
			  /* Уменьшение уровня компаратора */
			  if (strchr((char *) ctrlChar, 'm')) {
 8001312:	216d      	movs	r1, #109	@ 0x6d
 8001314:	484b      	ldr	r0, [pc, #300]	@ (8001444 <main+0x498>)
 8001316:	f007 ff5e 	bl	80091d6 <strchr>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d012      	beq.n	8001346 <main+0x39a>
				  if (dac_level != 0) {
 8001320:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <main+0x49c>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f43f aee6 	beq.w	80010f6 <main+0x14a>
					  dac_level--;
 800132a:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <main+0x49c>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	3b01      	subs	r3, #1
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b45      	ldr	r3, [pc, #276]	@ (8001448 <main+0x49c>)
 8001334:	801a      	strh	r2, [r3, #0]
					  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_level);
 8001336:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <main+0x49c>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	4843      	ldr	r0, [pc, #268]	@ (800144c <main+0x4a0>)
 8001340:	f002 fdde 	bl	8003f00 <HAL_DAC_SetValue>
 8001344:	e6d7      	b.n	80010f6 <main+0x14a>
				  }
		  } else
			  /* Уменьшение уровня компаратора */
			  if (strchr((char *) ctrlChar, 'p')) {
 8001346:	2170      	movs	r1, #112	@ 0x70
 8001348:	483e      	ldr	r0, [pc, #248]	@ (8001444 <main+0x498>)
 800134a:	f007 ff44 	bl	80091d6 <strchr>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <main+0x3ce>
				  if (dac_level != 0) {
 8001354:	4b3c      	ldr	r3, [pc, #240]	@ (8001448 <main+0x49c>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	f43f aecc 	beq.w	80010f6 <main+0x14a>
					  dac_level++;
 800135e:	4b3a      	ldr	r3, [pc, #232]	@ (8001448 <main+0x49c>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	b29a      	uxth	r2, r3
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <main+0x49c>)
 8001368:	801a      	strh	r2, [r3, #0]
					  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_level);
 800136a:	4b37      	ldr	r3, [pc, #220]	@ (8001448 <main+0x49c>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	4836      	ldr	r0, [pc, #216]	@ (800144c <main+0x4a0>)
 8001374:	f002 fdc4 	bl	8003f00 <HAL_DAC_SetValue>
 8001378:	e6bd      	b.n	80010f6 <main+0x14a>
				  }
		  } else
			/* Выгрузка бинарных данных */
			  if (strchr((char *) ctrlChar, 'b')) {
 800137a:	2162      	movs	r1, #98	@ 0x62
 800137c:	4831      	ldr	r0, [pc, #196]	@ (8001444 <main+0x498>)
 800137e:	f007 ff2a 	bl	80091d6 <strchr>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	f43f aeb6 	beq.w	80010f6 <main+0x14a>
				  /* Подготовка тестовых данных */
				  //for(int i = 0; i < SPECTER_SIZE; i++) {
				  //	specterBuffer[i] = i;
				  //}

				  while ( HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) "<B>", 3, 100));
 800138a:	bf00      	nop
 800138c:	2364      	movs	r3, #100	@ 0x64
 800138e:	2203      	movs	r2, #3
 8001390:	492f      	ldr	r1, [pc, #188]	@ (8001450 <main+0x4a4>)
 8001392:	4830      	ldr	r0, [pc, #192]	@ (8001454 <main+0x4a8>)
 8001394:	f006 f89a 	bl	80074cc <HAL_UART_Transmit>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f6      	bne.n	800138c <main+0x3e0>
				  uint32_t cs_summ = 0, tmp_data;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]

				  /* Подготовка и передача времени измерения */
				  tmp_data = tm;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	607b      	str	r3, [r7, #4]
				  cs_summ = sendWorld(tmp_data);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fdba 	bl	8000f20 <sendWorld>
 80013ac:	61b8      	str	r0, [r7, #24]

				  /* Подготовка и передача количества импульсов */
				  tmp_data = pulseCounter;
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <main+0x490>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	607b      	str	r3, [r7, #4]
				  cs_summ = cs_summ + sendWorld(tmp_data);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fdb3 	bl	8000f20 <sendWorld>
 80013ba:	4602      	mov	r2, r0
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	4413      	add	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]

				  /* Передача данных спектра */
				  int idd = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
				  for (int i = 0; i < SPECTER_SIZE; i++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	e011      	b.n	80013f0 <main+0x444>
					  tmp_data = specterBuffer[i];
 80013cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <main+0x48c>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	607b      	str	r3, [r7, #4]
					  cs_summ = cs_summ + sendWorld(tmp_data);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fda2 	bl	8000f20 <sendWorld>
 80013dc:	4602      	mov	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4413      	add	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
					  idd++;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
				  for (int i = 0; i < SPECTER_SIZE; i++) {
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	3301      	adds	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013f6:	dbe9      	blt.n	80013cc <main+0x420>
				  }
				  sendWorld(cs_summ);
 80013f8:	69b8      	ldr	r0, [r7, #24]
 80013fa:	f7ff fd91 	bl	8000f20 <sendWorld>
				  bzero((char *) uartBuffer, sizeof(uartBuffer));
 80013fe:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <main+0x4ac>)
 8001400:	4618      	mov	r0, r3
 8001402:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001406:	461a      	mov	r2, r3
 8001408:	2100      	movs	r1, #0
 800140a:	f007 fedc 	bl	80091c6 <memset>
				  sprintf(uartBuffer,  "\n\rc_summ: %lu, idx: %d\n\r", cs_summ, idd);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4912      	ldr	r1, [pc, #72]	@ (800145c <main+0x4b0>)
 8001414:	4810      	ldr	r0, [pc, #64]	@ (8001458 <main+0x4ac>)
 8001416:	f007 fe73 	bl	8009100 <siprintf>
				  while ( HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) uartBuffer, strlen(uartBuffer), 100));
 800141a:	bf00      	nop
 800141c:	480e      	ldr	r0, [pc, #56]	@ (8001458 <main+0x4ac>)
 800141e:	f7fe ff4f 	bl	80002c0 <strlen>
 8001422:	4603      	mov	r3, r0
 8001424:	b29a      	uxth	r2, r3
 8001426:	2364      	movs	r3, #100	@ 0x64
 8001428:	490b      	ldr	r1, [pc, #44]	@ (8001458 <main+0x4ac>)
 800142a:	480a      	ldr	r0, [pc, #40]	@ (8001454 <main+0x4a8>)
 800142c:	f006 f84e 	bl	80074cc <HAL_UART_Transmit>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f2      	bne.n	800141c <main+0x470>
  {
 8001436:	e65e      	b.n	80010f6 <main+0x14a>
 8001438:	20000610 	.word	0x20000610
 800143c:	20004610 	.word	0x20004610
 8001440:	20004614 	.word	0x20004614
 8001444:	2000060c 	.word	0x2000060c
 8001448:	20000002 	.word	0x20000002
 800144c:	200002d4 	.word	0x200002d4
 8001450:	0800b454 	.word	0x0800b454
 8001454:	20000388 	.word	0x20000388
 8001458:	2000047c 	.word	0x2000047c
 800145c:	0800b458 	.word	0x0800b458

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	@ 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2238      	movs	r2, #56	@ 0x38
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f007 fea9 	bl	80091c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001482:	2000      	movs	r0, #0
 8001484:	f003 fffe 	bl	8005484 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001488:	2301      	movs	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800148c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001490:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	2303      	movs	r3, #3
 8001498:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800149a:	2304      	movs	r3, #4
 800149c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800149e:	2355      	movs	r3, #85	@ 0x55
 80014a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	4618      	mov	r0, r3
 80014b4:	f004 f89a 	bl	80055ec <HAL_RCC_OscConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80014be:	f000 fa9f 	bl	8001a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c2:	230f      	movs	r3, #15
 80014c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c6:	2303      	movs	r3, #3
 80014c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2104      	movs	r1, #4
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fb98 	bl	8005c10 <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80014e6:	f000 fa8b 	bl	8001a00 <Error_Handler>
  }
}
 80014ea:	bf00      	nop
 80014ec:	3750      	adds	r7, #80	@ 0x50
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	@ 0x30
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2220      	movs	r2, #32
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f007 fe5a 	bl	80091c6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001514:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001518:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <MX_ADC1_Init+0xec>)
 800151c:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8001520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001522:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001528:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <MX_ADC1_Init+0xec>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800152e:	4b2c      	ldr	r3, [pc, #176]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001534:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <MX_ADC1_Init+0xec>)
 800153c:	2204      	movs	r2, #4
 800153e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001540:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001542:	2200      	movs	r2, #0
 8001544:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001546:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001548:	2200      	movs	r2, #0
 800154a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800154c:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <MX_ADC1_Init+0xec>)
 800154e:	2201      	movs	r2, #1
 8001550:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <MX_ADC1_Init+0xec>)
 800155c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001564:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001568:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_ADC1_Init+0xec>)
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <MX_ADC1_Init+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001580:	4817      	ldr	r0, [pc, #92]	@ (80015e0 <MX_ADC1_Init+0xec>)
 8001582:	f001 f8eb 	bl	800275c <HAL_ADC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800158c:	f000 fa38 	bl	8001a00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	4811      	ldr	r0, [pc, #68]	@ (80015e0 <MX_ADC1_Init+0xec>)
 800159c:	f002 fa0a 	bl	80039b4 <HAL_ADCEx_MultiModeConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80015a6:	f000 fa2b 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_ADC1_Init+0xf0>)
 80015ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ae:	2306      	movs	r3, #6
 80015b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80015b2:	2305      	movs	r3, #5
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015b6:	237f      	movs	r3, #127	@ 0x7f
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ba:	2304      	movs	r3, #4
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <MX_ADC1_Init+0xec>)
 80015c8:	f001 fb76 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80015d2:	f000 fa15 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	3730      	adds	r7, #48	@ 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001f4 	.word	0x200001f4
 80015e4:	04300002 	.word	0x04300002

080015e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ee:	463b      	mov	r3, r7
 80015f0:	2230      	movs	r2, #48	@ 0x30
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f007 fde6 	bl	80091c6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <MX_DAC1_Init+0x6c>)
 80015fc:	4a16      	ldr	r2, [pc, #88]	@ (8001658 <MX_DAC1_Init+0x70>)
 80015fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001600:	4814      	ldr	r0, [pc, #80]	@ (8001654 <MX_DAC1_Init+0x6c>)
 8001602:	f002 fbee 	bl	8003de2 <HAL_DAC_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800160c:	f000 f9f8 	bl	8001a00 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001610:	2302      	movs	r3, #2
 8001612:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	@ (8001654 <MX_DAC1_Init+0x6c>)
 800163c:	f002 fc8e 	bl	8003f5c <HAL_DAC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001646:	f000 f9db 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	@ 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002c0 	.word	0x200002c0
 8001658:	50000800 	.word	0x50000800

0800165c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2230      	movs	r2, #48	@ 0x30
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f007 fdac 	bl	80091c6 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <MX_DAC2_Init+0x6c>)
 8001670:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <MX_DAC2_Init+0x70>)
 8001672:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001674:	4814      	ldr	r0, [pc, #80]	@ (80016c8 <MX_DAC2_Init+0x6c>)
 8001676:	f002 fbb4 	bl	8003de2 <HAL_DAC_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001680:	f000 f9be 	bl	8001a00 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001684:	2302      	movs	r3, #2
 8001686:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <MX_DAC2_Init+0x6c>)
 80016b0:	f002 fc54 	bl	8003f5c <HAL_DAC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80016ba:	f000 f9a1 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3730      	adds	r7, #48	@ 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002d4 	.word	0x200002d4
 80016cc:	50000c00 	.word	0x50000c00

080016d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <MX_I2C2_Init+0x74>)
 80016d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <MX_I2C2_Init+0x78>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_I2C2_Init+0x74>)
 80016dc:	4a1b      	ldr	r2, [pc, #108]	@ (800174c <MX_I2C2_Init+0x7c>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_I2C2_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_I2C2_Init+0x74>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <MX_I2C2_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_I2C2_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_I2C2_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_I2C2_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_I2C2_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800170a:	480e      	ldr	r0, [pc, #56]	@ (8001744 <MX_I2C2_Init+0x74>)
 800170c:	f003 fa04 	bl	8004b18 <HAL_I2C_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001716:	f000 f973 	bl	8001a00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	4809      	ldr	r0, [pc, #36]	@ (8001744 <MX_I2C2_Init+0x74>)
 800171e:	f003 fe19 	bl	8005354 <HAL_I2CEx_ConfigAnalogFilter>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001728:	f000 f96a 	bl	8001a00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800172c:	2100      	movs	r1, #0
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <MX_I2C2_Init+0x74>)
 8001730:	f003 fe5b 	bl	80053ea <HAL_I2CEx_ConfigDigitalFilter>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800173a:	f000 f961 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200002e8 	.word	0x200002e8
 8001748:	40005800 	.word	0x40005800
 800174c:	30a0a7fb 	.word	0x30a0a7fb

08001750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08e      	sub	sp, #56	@ 0x38
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001782:	4b32      	ldr	r3, [pc, #200]	@ (800184c <MX_TIM2_Init+0xfc>)
 8001784:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001788:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800178a:	4b30      	ldr	r3, [pc, #192]	@ (800184c <MX_TIM2_Init+0xfc>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <MX_TIM2_Init+0xfc>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <MX_TIM2_Init+0xfc>)
 8001798:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800179c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <MX_TIM2_Init+0xfc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b29      	ldr	r3, [pc, #164]	@ (800184c <MX_TIM2_Init+0xfc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017aa:	4828      	ldr	r0, [pc, #160]	@ (800184c <MX_TIM2_Init+0xfc>)
 80017ac:	f004 fe96 	bl	80064dc <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017b6:	f000 f923 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4821      	ldr	r0, [pc, #132]	@ (800184c <MX_TIM2_Init+0xfc>)
 80017c8:	f005 f814 	bl	80067f4 <HAL_TIM_ConfigClockSource>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80017d2:	f000 f915 	bl	8001a00 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80017d6:	481d      	ldr	r0, [pc, #116]	@ (800184c <MX_TIM2_Init+0xfc>)
 80017d8:	f004 fed7 	bl	800658a <HAL_TIM_OC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017e2:	f000 f90d 	bl	8001a00 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80017e6:	2108      	movs	r1, #8
 80017e8:	4818      	ldr	r0, [pc, #96]	@ (800184c <MX_TIM2_Init+0xfc>)
 80017ea:	f004 ff2f 	bl	800664c <HAL_TIM_OnePulse_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80017f4:	f000 f904 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4619      	mov	r1, r3
 8001806:	4811      	ldr	r0, [pc, #68]	@ (800184c <MX_TIM2_Init+0xfc>)
 8001808:	f005 fd7a 	bl	8007300 <HAL_TIMEx_MasterConfigSynchronization>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001812:	f000 f8f5 	bl	8001a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001816:	2310      	movs	r3, #16
 8001818:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	220c      	movs	r2, #12
 800182a:	4619      	mov	r1, r3
 800182c:	4807      	ldr	r0, [pc, #28]	@ (800184c <MX_TIM2_Init+0xfc>)
 800182e:	f004 ff67 	bl	8006700 <HAL_TIM_OC_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001838:	f000 f8e2 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800183c:	4803      	ldr	r0, [pc, #12]	@ (800184c <MX_TIM2_Init+0xfc>)
 800183e:	f000 fa71 	bl	8001d24 <HAL_TIM_MspPostInit>

}
 8001842:	bf00      	nop
 8001844:	3738      	adds	r7, #56	@ 0x38
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000033c 	.word	0x2000033c

08001850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 8001856:	4a23      	ldr	r2, [pc, #140]	@ (80018e4 <MX_USART1_UART_Init+0x94>)
 8001858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185a:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800186e:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b17      	ldr	r3, [pc, #92]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001886:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001898:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 800189a:	f005 fdc7 	bl	800742c <HAL_UART_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018a4:	f000 f8ac 	bl	8001a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a8:	2100      	movs	r1, #0
 80018aa:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 80018ac:	f006 fe43 	bl	8008536 <HAL_UARTEx_SetTxFifoThreshold>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018b6:	f000 f8a3 	bl	8001a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ba:	2100      	movs	r1, #0
 80018bc:	4808      	ldr	r0, [pc, #32]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 80018be:	f006 fe78 	bl	80085b2 <HAL_UARTEx_SetRxFifoThreshold>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018c8:	f000 f89a 	bl	8001a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <MX_USART1_UART_Init+0x90>)
 80018ce:	f006 fdf9 	bl	80084c4 <HAL_UARTEx_DisableFifoMode>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018d8:	f000 f892 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000388 	.word	0x20000388
 80018e4:	40013800 	.word	0x40013800

080018e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_DMA_Init+0x60>)
 80018f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018f2:	4a15      	ldr	r2, [pc, #84]	@ (8001948 <MX_DMA_Init+0x60>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <MX_DMA_Init+0x60>)
 80018fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <MX_DMA_Init+0x60>)
 8001908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190a:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <MX_DMA_Init+0x60>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6493      	str	r3, [r2, #72]	@ 0x48
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <MX_DMA_Init+0x60>)
 8001914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	200b      	movs	r0, #11
 8001924:	f002 fa29 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001928:	200b      	movs	r0, #11
 800192a:	f002 fa40 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	200c      	movs	r0, #12
 8001934:	f002 fa21 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001938:	200c      	movs	r0, #12
 800193a:	f002 fa38 	bl	8003dae <HAL_NVIC_EnableIRQ>

}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <MX_GPIO_Init+0xb0>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	4a25      	ldr	r2, [pc, #148]	@ (80019fc <MX_GPIO_Init+0xb0>)
 8001968:	f043 0320 	orr.w	r3, r3, #32
 800196c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <MX_GPIO_Init+0xb0>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <MX_GPIO_Init+0xb0>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197e:	4a1f      	ldr	r2, [pc, #124]	@ (80019fc <MX_GPIO_Init+0xb0>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001986:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <MX_GPIO_Init+0xb0>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <MX_GPIO_Init+0xb0>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	4a19      	ldr	r2, [pc, #100]	@ (80019fc <MX_GPIO_Init+0xb0>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199e:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <MX_GPIO_Init+0xb0>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2108      	movs	r1, #8
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b2:	f003 f87f 	bl	8004ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019b6:	2308      	movs	r3, #8
 80019b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d0:	f002 feee 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADCsync_Pin */
  GPIO_InitStruct.Pin = ADCsync_Pin;
 80019d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADCsync_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ee:	f002 fedf 	bl	80047b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f2:	bf00      	nop
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <Error_Handler+0x8>

08001a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	4a10      	ldr	r2, [pc, #64]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a36:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_MspInit+0x4c>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001a42:	f000 fc37 	bl	80022b4 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001a46:	2002      	movs	r0, #2
 8001a48:	f000 fc20 	bl	800228c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a4c:	f003 fdbe 	bl	80055cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b09e      	sub	sp, #120	@ 0x78
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	2254      	movs	r2, #84	@ 0x54
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f007 fba2 	bl	80091c6 <memset>
  if(hadc->Instance==ADC1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a8a:	d15f      	bne.n	8001b4c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001a8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001a92:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a96:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f004 facf 	bl	8006040 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001aa8:	f7ff ffaa 	bl	8001a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001aac:	4b29      	ldr	r3, [pc, #164]	@ (8001b54 <HAL_ADC_MspInit+0xf8>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	4a28      	ldr	r2, [pc, #160]	@ (8001b54 <HAL_ADC_MspInit+0xf8>)
 8001ab2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab8:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <HAL_ADC_MspInit+0xf8>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b23      	ldr	r3, [pc, #140]	@ (8001b54 <HAL_ADC_MspInit+0xf8>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac8:	4a22      	ldr	r2, [pc, #136]	@ (8001b54 <HAL_ADC_MspInit+0xf8>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad0:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_ADC_MspInit+0xf8>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AnalogIn_Pin;
 8001adc:	2301      	movs	r3, #1
 8001ade:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(AnalogIn_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001aec:	4619      	mov	r1, r3
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af2:	f002 fe5d 	bl	80047b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001af6:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001af8:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <HAL_ADC_MspInit+0x100>)
 8001afa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001afc:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001afe:	2205      	movs	r2, #5
 8001b00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b14:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b26:	2220      	movs	r2, #32
 8001b28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b30:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b32:	f002 fbcb 	bl	80042cc <HAL_DMA_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001b3c:	f7ff ff60 	bl	8001a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b44:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b46:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <HAL_ADC_MspInit+0xfc>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3778      	adds	r7, #120	@ 0x78
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	20000260 	.word	0x20000260
 8001b5c:	40020008 	.word	0x40020008

08001b60 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08c      	sub	sp, #48	@ 0x30
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c2c <HAL_DAC_MspInit+0xcc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d125      	bne.n	8001bce <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b82:	4b2b      	ldr	r3, [pc, #172]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	4a2a      	ldr	r2, [pc, #168]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8e:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba6:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = AdjHV_Pin;
 8001bb2:	2310      	movs	r3, #16
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(AdjHV_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc8:	f002 fdf2 	bl	80047b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8001bcc:	e029      	b.n	8001c22 <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <HAL_DAC_MspInit+0xd4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d124      	bne.n	8001c22 <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001bd8:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bdc:	4a14      	ldr	r2, [pc, #80]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_DAC_MspInit+0xd0>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Comp_level_Pin;
 8001c08:	2340      	movs	r3, #64	@ 0x40
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Comp_level_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1e:	f002 fdc7 	bl	80047b0 <HAL_GPIO_Init>
}
 8001c22:	bf00      	nop
 8001c24:	3730      	adds	r7, #48	@ 0x30
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	50000800 	.word	0x50000800
 8001c30:	40021000 	.word	0x40021000
 8001c34:	50000c00 	.word	0x50000c00

08001c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b09e      	sub	sp, #120	@ 0x78
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2254      	movs	r2, #84	@ 0x54
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f007 fab4 	bl	80091c6 <memset>
  if(hi2c->Instance==I2C2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce0 <HAL_I2C_MspInit+0xa8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d137      	bne.n	8001cd8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 f9e3 	bl	8006040 <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c80:	f7ff febe 	bl	8001a00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <HAL_I2C_MspInit+0xac>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c88:	4a16      	ldr	r2, [pc, #88]	@ (8001ce4 <HAL_I2C_MspInit+0xac>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_I2C_MspInit+0xac>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ca0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca2:	2312      	movs	r3, #18
 8001ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cbc:	f002 fd78 	bl	80047b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_I2C_MspInit+0xac>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_I2C_MspInit+0xac>)
 8001cc6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_I2C_MspInit+0xac>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	3778      	adds	r7, #120	@ 0x78
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40005800 	.word	0x40005800
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf8:	d10b      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_TIM_Base_MspInit+0x38>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <HAL_TIM_Base_MspInit+0x38>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_TIM_Base_MspInit+0x38>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d44:	d11c      	bne.n	8001d80 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <HAL_TIM_MspPostInit+0x64>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <HAL_TIM_MspPostInit+0x64>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d52:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_TIM_MspPostInit+0x64>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PULSE_CLIBRATE_Pin;
 8001d5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d70:	2301      	movs	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PULSE_CLIBRATE_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <HAL_TIM_MspPostInit+0x68>)
 8001d7c:	f002 fd18 	bl	80047b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000400 	.word	0x48000400

08001d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b09e      	sub	sp, #120	@ 0x78
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	2254      	movs	r2, #84	@ 0x54
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f007 fa08 	bl	80091c6 <memset>
  if(huart->Instance==USART1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a33      	ldr	r2, [pc, #204]	@ (8001e88 <HAL_UART_MspInit+0xf8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d15f      	bne.n	8001e80 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f004 f937 	bl	8006040 <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dd8:	f7ff fe12 	bl	8001a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_UART_MspInit+0xfc>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e8c <HAL_UART_MspInit+0xfc>)
 8001de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001de8:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <HAL_UART_MspInit+0xfc>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <HAL_UART_MspInit+0xfc>)
 8001df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df8:	4a24      	ldr	r2, [pc, #144]	@ (8001e8c <HAL_UART_MspInit+0xfc>)
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e00:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <HAL_UART_MspInit+0xfc>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001e0c:	23c0      	movs	r3, #192	@ 0xc0
 8001e0e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e24:	4619      	mov	r1, r3
 8001e26:	481a      	ldr	r0, [pc, #104]	@ (8001e90 <HAL_UART_MspInit+0x100>)
 8001e28:	f002 fcc2 	bl	80047b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e98 <HAL_UART_MspInit+0x108>)
 8001e30:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001e32:	4b18      	ldr	r3, [pc, #96]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e34:	2218      	movs	r2, #24
 8001e36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e46:	2280      	movs	r2, #128	@ 0x80
 8001e48:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4a:	4b12      	ldr	r3, [pc, #72]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e50:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e58:	2220      	movs	r2, #32
 8001e5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e62:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e64:	f002 fa32 	bl	80042cc <HAL_DMA_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8001e6e:	f7ff fdc7 	bl	8001a00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a07      	ldr	r2, [pc, #28]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001e7a:	4a06      	ldr	r2, [pc, #24]	@ (8001e94 <HAL_UART_MspInit+0x104>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e80:	bf00      	nop
 8001e82:	3778      	adds	r7, #120	@ 0x78
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	2000041c 	.word	0x2000041c
 8001e98:	4002001c 	.word	0x4002001c

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <HardFault_Handler+0x4>

08001eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <MemManage_Handler+0x4>

08001eb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef2:	f000 f98b 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	int idx = pulseLevel[0] & 0xFFF;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <DMA1_Channel1_IRQHandler+0x3c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0a:	607b      	str	r3, [r7, #4]
	specterBuffer[idx]++;
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f3c <DMA1_Channel1_IRQHandler+0x40>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	4909      	ldr	r1, [pc, #36]	@ (8001f3c <DMA1_Channel1_IRQHandler+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pulseCounter++;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <DMA1_Channel1_IRQHandler+0x44>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <DMA1_Channel1_IRQHandler+0x44>)
 8001f26:	6013      	str	r3, [r2, #0]
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f28:	4806      	ldr	r0, [pc, #24]	@ (8001f44 <DMA1_Channel1_IRQHandler+0x48>)
 8001f2a:	f002 faf2 	bl	8004512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  //HAL_ADC_Start_DMA(&hadc1, pulseLevel, 1);
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20004618 	.word	0x20004618
 8001f3c:	20000610 	.word	0x20000610
 8001f40:	20004610 	.word	0x20004610
 8001f44:	20000260 	.word	0x20000260

08001f48 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <DMA1_Channel2_IRQHandler+0x14>)
 8001f4e:	f002 fae0 	bl	8004512 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
  reqToSpecter = true;
 8001f52:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <DMA1_Channel2_IRQHandler+0x18>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000041c 	.word	0x2000041c
 8001f60:	2000461c 	.word	0x2000461c

08001f64 <_getpid>:
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	2301      	movs	r3, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_kill>:
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	f007 f981 	bl	8009284 <__errno>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2216      	movs	r2, #22
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_exit>:
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ffe7 	bl	8001f74 <_kill>
 8001fa6:	bf00      	nop
 8001fa8:	e7fd      	b.n	8001fa6 <_exit+0x12>

08001faa <_read>:
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e00a      	b.n	8001fd2 <_read+0x28>
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	4601      	mov	r1, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	60ba      	str	r2, [r7, #8]
 8001fc8:	b2ca      	uxtb	r2, r1
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dbf0      	blt.n	8001fbc <_read+0x12>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_write>:
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e009      	b.n	800200a <_write+0x26>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	60ba      	str	r2, [r7, #8]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f3af 8000 	nop.w
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	429a      	cmp	r2, r3
 8002010:	dbf1      	blt.n	8001ff6 <_write+0x12>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_close>:
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_fstat>:
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	2300      	movs	r3, #0
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_isatty>:
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	2301      	movs	r3, #1
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_lseek>:
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	2300      	movs	r3, #0
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_sbrk>:
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	4a14      	ldr	r2, [pc, #80]	@ (80020e0 <_sbrk+0x5c>)
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <_sbrk+0x60>)
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_sbrk+0x22>
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <_sbrk+0x64>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <_sbrk+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d207      	bcs.n	80020c4 <_sbrk+0x40>
 80020b4:	f007 f8e6 	bl	8009284 <__errno>
 80020b8:	4603      	mov	r3, r0
 80020ba:	220c      	movs	r2, #12
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c2:	e009      	b.n	80020d8 <_sbrk+0x54>
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a05      	ldr	r2, [pc, #20]	@ (80020e8 <_sbrk+0x64>)
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20020000 	.word	0x20020000
 80020e4:	00000400 	.word	0x00000400
 80020e8:	20004620 	.word	0x20004620
 80020ec:	20004778 	.word	0x20004778

080020f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <SystemInit+0x20>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <SystemInit+0x20>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <Reset_Handler>:
 8002114:	480d      	ldr	r0, [pc, #52]	@ (800214c <LoopForever+0x2>)
 8002116:	4685      	mov	sp, r0
 8002118:	f7ff ffea 	bl	80020f0 <SystemInit>
 800211c:	480c      	ldr	r0, [pc, #48]	@ (8002150 <LoopForever+0x6>)
 800211e:	490d      	ldr	r1, [pc, #52]	@ (8002154 <LoopForever+0xa>)
 8002120:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <LoopForever+0xe>)
 8002122:	2300      	movs	r3, #0
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:
 8002126:	58d4      	ldr	r4, [r2, r3]
 8002128:	50c4      	str	r4, [r0, r3]
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:
 800212c:	18c4      	adds	r4, r0, r3
 800212e:	428c      	cmp	r4, r1
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <LoopForever+0x12>)
 8002134:	4c0a      	ldr	r4, [pc, #40]	@ (8002160 <LoopForever+0x16>)
 8002136:	2300      	movs	r3, #0
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:
 800213e:	42a2      	cmp	r2, r4
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>
 8002142:	f007 f8a5 	bl	8009290 <__libc_init_array>
 8002146:	f7fe ff31 	bl	8000fac <main>

0800214a <LoopForever>:
 800214a:	e7fe      	b.n	800214a <LoopForever>
 800214c:	20020000 	.word	0x20020000
 8002150:	20000000 	.word	0x20000000
 8002154:	200001d8 	.word	0x200001d8
 8002158:	0800b838 	.word	0x0800b838
 800215c:	200001d8 	.word	0x200001d8
 8002160:	20004774 	.word	0x20004774

08002164 <ADC1_2_IRQHandler>:
 8002164:	e7fe      	b.n	8002164 <ADC1_2_IRQHandler>

08002166 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002170:	2003      	movs	r0, #3
 8002172:	f001 fdf7 	bl	8003d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002176:	200f      	movs	r0, #15
 8002178:	f000 f80e 	bl	8002198 <HAL_InitTick>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	e001      	b.n	800218c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002188:	f7ff fc40 	bl	8001a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800218c:	79fb      	ldrb	r3, [r7, #7]

}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <HAL_InitTick+0x68>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d022      	beq.n	80021f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <HAL_InitTick+0x6c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <HAL_InitTick+0x68>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 fe02 	bl	8003dca <HAL_SYSTICK_Config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10f      	bne.n	80021ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	d809      	bhi.n	80021e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d2:	2200      	movs	r2, #0
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021da:	f001 fdce 	bl	8003d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <HAL_InitTick+0x70>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e007      	b.n	80021f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	e004      	b.n	80021f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000000c 	.word	0x2000000c
 8002204:	20000004 	.word	0x20000004
 8002208:	20000008 	.word	0x20000008

0800220c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_IncTick+0x1c>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_IncTick+0x20>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4413      	add	r3, r2
 800221a:	4a03      	ldr	r2, [pc, #12]	@ (8002228 <HAL_IncTick+0x1c>)
 800221c:	6013      	str	r3, [r2, #0]
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	20004624 	.word	0x20004624
 800222c:	2000000c 	.word	0x2000000c

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20004624 	.word	0x20004624

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002260:	d004      	beq.n	800226c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <HAL_Delay+0x40>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4413      	add	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226c:	bf00      	nop
 800226e:	f7ff ffdf 	bl	8002230 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	429a      	cmp	r2, r3
 800227c:	d8f7      	bhi.n	800226e <HAL_Delay+0x26>
  {
  }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000000c 	.word	0x2000000c

0800228c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 0202 	bic.w	r2, r3, #2
 800229c:	4904      	ldr	r1, [pc, #16]	@ (80022b0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40010030 	.word	0x40010030

080022b4 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40010030 	.word	0x40010030

080022d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	609a      	str	r2, [r3, #8]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3360      	adds	r3, #96	@ 0x60
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <LL_ADC_SetOffset+0x44>)
 800235e:	4013      	ands	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	4313      	orrs	r3, r2
 800236c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002374:	bf00      	nop
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	03fff000 	.word	0x03fff000

08002384 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3360      	adds	r3, #96	@ 0x60
 8002392:	461a      	mov	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3360      	adds	r3, #96	@ 0x60
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3360      	adds	r3, #96	@ 0x60
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	431a      	orrs	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002410:	bf00      	nop
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3360      	adds	r3, #96	@ 0x60
 800242c:	461a      	mov	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	431a      	orrs	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	615a      	str	r2, [r3, #20]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800249e:	b480      	push	{r7}
 80024a0:	b087      	sub	sp, #28
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3330      	adds	r3, #48	@ 0x30
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	4413      	add	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	211f      	movs	r1, #31
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	401a      	ands	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	f003 011f 	and.w	r1, r3, #31
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	431a      	orrs	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b087      	sub	sp, #28
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3314      	adds	r3, #20
 8002506:	461a      	mov	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	0e5b      	lsrs	r3, r3, #25
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	4413      	add	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	0d1b      	lsrs	r3, r3, #20
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2107      	movs	r1, #7
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	401a      	ands	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	0d1b      	lsrs	r3, r3, #20
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	431a      	orrs	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	43db      	mvns	r3, r3
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0318 	and.w	r3, r3, #24
 800256e:	4908      	ldr	r1, [pc, #32]	@ (8002590 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002570:	40d9      	lsrs	r1, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	400b      	ands	r3, r1
 8002576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257a:	431a      	orrs	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	0007ffff 	.word	0x0007ffff

08002594 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 031f 	and.w	r3, r3, #31
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6093      	str	r3, [r2, #8]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e8:	d101      	bne.n	80025ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800260c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002610:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002638:	d101      	bne.n	800263e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800265c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002688:	f043 0202 	orr.w	r2, r3, #2
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <LL_ADC_IsEnabled+0x18>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_ADC_IsEnabled+0x1a>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d101      	bne.n	80026da <LL_ADC_IsDisableOngoing+0x18>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_IsDisableOngoing+0x1a>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026fc:	f043 0204 	orr.w	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d101      	bne.n	8002728 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b08      	cmp	r3, #8
 8002748:	d101      	bne.n	800274e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e1a9      	b.n	8002aca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff f969 	bl	8001a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff19 	bl	80025d4 <LL_ADC_IsDeepPowerDownEnabled>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff feff 	bl	80025b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff34 	bl	8002624 <LL_ADC_IsInternalRegulatorEnabled>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d115      	bne.n	80027ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff18 	bl	80025fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027cc:	4b9c      	ldr	r3, [pc, #624]	@ (8002a40 <HAL_ADC_Init+0x2e4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	4a9c      	ldr	r2, [pc, #624]	@ (8002a44 <HAL_ADC_Init+0x2e8>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	3301      	adds	r3, #1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027e0:	e002      	b.n	80027e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f9      	bne.n	80027e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff16 	bl	8002624 <LL_ADC_IsInternalRegulatorEnabled>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	f043 0210 	orr.w	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff76 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002824:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 8142 	bne.w	8002ab8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 813e 	bne.w	8002ab8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002840:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002844:	f043 0202 	orr.w	r2, r3, #2
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff23 	bl	800269c <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d141      	bne.n	80028e0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002864:	d004      	beq.n	8002870 <HAL_ADC_Init+0x114>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a77      	ldr	r2, [pc, #476]	@ (8002a48 <HAL_ADC_Init+0x2ec>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d10f      	bne.n	8002890 <HAL_ADC_Init+0x134>
 8002870:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002874:	f7ff ff12 	bl	800269c <LL_ADC_IsEnabled>
 8002878:	4604      	mov	r4, r0
 800287a:	4873      	ldr	r0, [pc, #460]	@ (8002a48 <HAL_ADC_Init+0x2ec>)
 800287c:	f7ff ff0e 	bl	800269c <LL_ADC_IsEnabled>
 8002880:	4603      	mov	r3, r0
 8002882:	4323      	orrs	r3, r4
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf0c      	ite	eq
 8002888:	2301      	moveq	r3, #1
 800288a:	2300      	movne	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	e012      	b.n	80028b6 <HAL_ADC_Init+0x15a>
 8002890:	486e      	ldr	r0, [pc, #440]	@ (8002a4c <HAL_ADC_Init+0x2f0>)
 8002892:	f7ff ff03 	bl	800269c <LL_ADC_IsEnabled>
 8002896:	4604      	mov	r4, r0
 8002898:	486d      	ldr	r0, [pc, #436]	@ (8002a50 <HAL_ADC_Init+0x2f4>)
 800289a:	f7ff feff 	bl	800269c <LL_ADC_IsEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	431c      	orrs	r4, r3
 80028a2:	486c      	ldr	r0, [pc, #432]	@ (8002a54 <HAL_ADC_Init+0x2f8>)
 80028a4:	f7ff fefa 	bl	800269c <LL_ADC_IsEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4323      	orrs	r3, r4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d012      	beq.n	80028e0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028c2:	d004      	beq.n	80028ce <HAL_ADC_Init+0x172>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5f      	ldr	r2, [pc, #380]	@ (8002a48 <HAL_ADC_Init+0x2ec>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_Init+0x176>
 80028ce:	4a62      	ldr	r2, [pc, #392]	@ (8002a58 <HAL_ADC_Init+0x2fc>)
 80028d0:	e000      	b.n	80028d4 <HAL_ADC_Init+0x178>
 80028d2:	4a62      	ldr	r2, [pc, #392]	@ (8002a5c <HAL_ADC_Init+0x300>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f7ff fcfa 	bl	80022d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7f5b      	ldrb	r3, [r3, #29]
 80028e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800290a:	2b01      	cmp	r3, #1
 800290c:	d106      	bne.n	800291c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	045b      	lsls	r3, r3, #17
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002930:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	4b48      	ldr	r3, [pc, #288]	@ (8002a60 <HAL_ADC_Init+0x304>)
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	69b9      	ldr	r1, [r7, #24]
 8002948:	430b      	orrs	r3, r1
 800294a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fee5 	bl	8002736 <LL_ADC_INJ_IsConversionOngoing>
 800296c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d17f      	bne.n	8002a74 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d17c      	bne.n	8002a74 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800297e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002986:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002996:	f023 0302 	bic.w	r3, r3, #2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d017      	beq.n	80029dc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6911      	ldr	r1, [r2, #16]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80029da:	e013      	b.n	8002a04 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80029ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a00:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d12a      	bne.n	8002a64 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a24:	4311      	orrs	r1, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a30:	430a      	orrs	r2, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	611a      	str	r2, [r3, #16]
 8002a3e:	e019      	b.n	8002a74 <HAL_ADC_Init+0x318>
 8002a40:	20000004 	.word	0x20000004
 8002a44:	053e2d63 	.word	0x053e2d63
 8002a48:	50000100 	.word	0x50000100
 8002a4c:	50000400 	.word	0x50000400
 8002a50:	50000500 	.word	0x50000500
 8002a54:	50000600 	.word	0x50000600
 8002a58:	50000300 	.word	0x50000300
 8002a5c:	50000700 	.word	0x50000700
 8002a60:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10c      	bne.n	8002a96 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	f023 010f 	bic.w	r1, r3, #15
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a94:	e007      	b.n	8002aa6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 020f 	bic.w	r2, r2, #15
 8002aa4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ab6:	e007      	b.n	8002ac8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	f043 0210 	orr.w	r2, r3, #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3724      	adds	r7, #36	@ 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd90      	pop	{r4, r7, pc}
 8002ad2:	bf00      	nop

08002ad4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADC_Start_DMA+0x20>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a5a      	ldr	r2, [pc, #360]	@ (8002c58 <HAL_ADC_Start_DMA+0x184>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_Start_DMA+0x24>
 8002af4:	4b59      	ldr	r3, [pc, #356]	@ (8002c5c <HAL_ADC_Start_DMA+0x188>)
 8002af6:	e000      	b.n	8002afa <HAL_ADC_Start_DMA+0x26>
 8002af8:	4b59      	ldr	r3, [pc, #356]	@ (8002c60 <HAL_ADC_Start_DMA+0x18c>)
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fd4a 	bl	8002594 <LL_ADC_GetMultimode>
 8002b00:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fe02 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 809b 	bne.w	8002c4a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_Start_DMA+0x4e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e096      	b.n	8002c50 <HAL_ADC_Start_DMA+0x17c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8002c64 <HAL_ADC_Start_DMA+0x190>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d008      	beq.n	8002b46 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d002      	beq.n	8002b46 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b09      	cmp	r3, #9
 8002b44:	d17a      	bne.n	8002c3c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fcf6 	bl	8003538 <ADC_Enable>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d16d      	bne.n	8002c32 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c58 <HAL_ADC_Start_DMA+0x184>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_ADC_Start_DMA+0xb4>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a3b      	ldr	r2, [pc, #236]	@ (8002c68 <HAL_ADC_Start_DMA+0x194>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d002      	beq.n	8002b84 <HAL_ADC_Start_DMA+0xb0>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	e003      	b.n	8002b8c <HAL_ADC_Start_DMA+0xb8>
 8002b84:	4b39      	ldr	r3, [pc, #228]	@ (8002c6c <HAL_ADC_Start_DMA+0x198>)
 8002b86:	e001      	b.n	8002b8c <HAL_ADC_Start_DMA+0xb8>
 8002b88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d002      	beq.n	8002b9a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d006      	beq.n	8002bc0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb6:	f023 0206 	bic.w	r2, r3, #6
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	661a      	str	r2, [r3, #96]	@ 0x60
 8002bbe:	e002      	b.n	8002bc6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	4a29      	ldr	r2, [pc, #164]	@ (8002c70 <HAL_ADC_Start_DMA+0x19c>)
 8002bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	4a28      	ldr	r2, [pc, #160]	@ (8002c74 <HAL_ADC_Start_DMA+0x1a0>)
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	4a27      	ldr	r2, [pc, #156]	@ (8002c78 <HAL_ADC_Start_DMA+0x1a4>)
 8002bdc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	221c      	movs	r2, #28
 8002be4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0210 	orr.w	r2, r2, #16
 8002bfc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3340      	adds	r3, #64	@ 0x40
 8002c18:	4619      	mov	r1, r3
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f001 fbfd 	bl	800441c <HAL_DMA_Start_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fd5c 	bl	80026e8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c30:	e00d      	b.n	8002c4e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002c3a:	e008      	b.n	8002c4e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002c48:	e001      	b.n	8002c4e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	50000100 	.word	0x50000100
 8002c5c:	50000300 	.word	0x50000300
 8002c60:	50000700 	.word	0x50000700
 8002c64:	50000600 	.word	0x50000600
 8002c68:	50000500 	.word	0x50000500
 8002c6c:	50000400 	.word	0x50000400
 8002c70:	08003723 	.word	0x08003723
 8002c74:	080037fb 	.word	0x080037fb
 8002c78:	08003817 	.word	0x08003817

08002c7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b0b6      	sub	sp, #216	@ 0xd8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x24>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	f000 bc13 	b.w	8003502 <HAL_ADC_ConfigChannel+0x84a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fd11 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f040 83f3 	bne.w	80034dc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7ff fbcb 	bl	800249e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fcff 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002d12:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fd0b 	bl	8002736 <LL_ADC_INJ_IsConversionOngoing>
 8002d20:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 81d9 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 81d4 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d40:	d10f      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f7ff fbd2 	bl	80024f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fb79 	bl	8002452 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d60:	e00e      	b.n	8002d80 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f7ff fbc1 	bl	80024f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fb69 	bl	8002452 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	08db      	lsrs	r3, r3, #3
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d022      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6919      	ldr	r1, [r3, #16]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002db2:	f7ff fac3 	bl	800233c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6919      	ldr	r1, [r3, #16]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f7ff fb0f 	bl	80023e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d102      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x126>
 8002dd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ddc:	e000      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x128>
 8002dde:	2300      	movs	r3, #0
 8002de0:	461a      	mov	r2, r3
 8002de2:	f7ff fb1b 	bl	800241c <LL_ADC_SetOffsetSaturation>
 8002de6:	e17b      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fac8 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x15c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fabd 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	f003 021f 	and.w	r2, r3, #31
 8002e12:	e01e      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x19a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fab2 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e004      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x1b2>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	0e9b      	lsrs	r3, r3, #26
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	e018      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x1e4>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e004      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d106      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fa81 	bl	80023b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fa65 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x222>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fa5a 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	0e9b      	lsrs	r3, r3, #26
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	e01e      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x260>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fa4f 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ef8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002efc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e004      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x278>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	e018      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x2aa>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	e004      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d106      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fa1e 	bl	80023b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2102      	movs	r1, #2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fa02 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x2e8>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff f9f7 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	0e9b      	lsrs	r3, r3, #26
 8002f9a:	f003 021f 	and.w	r2, r3, #31
 8002f9e:	e01e      	b.n	8002fde <HAL_ADC_ConfigChannel+0x326>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff f9ec 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002fce:	2320      	movs	r3, #32
 8002fd0:	e004      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x33e>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0e9b      	lsrs	r3, r3, #26
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	e016      	b.n	8003024 <HAL_ADC_ConfigChannel+0x36c>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003008:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800300a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800300e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003016:	2320      	movs	r3, #32
 8003018:	e004      	b.n	8003024 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800301a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003024:	429a      	cmp	r2, r3
 8003026:	d106      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2200      	movs	r2, #0
 800302e:	2102      	movs	r1, #2
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f9bd 	bl	80023b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2103      	movs	r1, #3
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff f9a1 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x3aa>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2103      	movs	r1, #3
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f996 	bl	8002384 <LL_ADC_GetOffsetChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	e017      	b.n	8003092 <HAL_ADC_ConfigChannel+0x3da>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2103      	movs	r1, #3
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f98b 	bl	8002384 <LL_ADC_GetOffsetChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800307a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800307c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800307e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x3f2>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	0e9b      	lsrs	r3, r3, #26
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	e011      	b.n	80030ce <HAL_ADC_ConfigChannel+0x416>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80030b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80030bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030c2:	2320      	movs	r3, #32
 80030c4:	e003      	b.n	80030ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d106      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	2103      	movs	r1, #3
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff f968 	bl	80023b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fad9 	bl	800269c <LL_ADC_IsEnabled>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 813d 	bne.w	800336c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	461a      	mov	r2, r3
 8003100:	f7ff fa24 	bl	800254c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4aa2      	ldr	r2, [pc, #648]	@ (8003394 <HAL_ADC_ConfigChannel+0x6dc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	f040 812e 	bne.w	800336c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x480>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	3301      	adds	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2b09      	cmp	r3, #9
 800312e:	bf94      	ite	ls
 8003130:	2301      	movls	r3, #1
 8003132:	2300      	movhi	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e019      	b.n	800316c <HAL_ADC_ConfigChannel+0x4b4>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003148:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800314a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2b09      	cmp	r3, #9
 8003164:	bf94      	ite	ls
 8003166:	2301      	movls	r3, #1
 8003168:	2300      	movhi	r3, #0
 800316a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800316c:	2b00      	cmp	r3, #0
 800316e:	d079      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_ADC_ConfigChannel+0x4d4>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	0e9b      	lsrs	r3, r3, #26
 8003182:	3301      	adds	r3, #1
 8003184:	069b      	lsls	r3, r3, #26
 8003186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800318a:	e015      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x500>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800319a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800319c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800319e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	069b      	lsls	r3, r3, #26
 80031b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x520>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	3301      	adds	r3, #1
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	e017      	b.n	8003208 <HAL_ADC_ConfigChannel+0x550>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80031e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80031ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	e003      	b.n	80031fc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2101      	movs	r1, #1
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	ea42 0103 	orr.w	r1, r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_ADC_ConfigChannel+0x576>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	3301      	adds	r3, #1
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	051b      	lsls	r3, r3, #20
 800322c:	e018      	b.n	8003260 <HAL_ADC_ConfigChannel+0x5a8>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800323c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e003      	b.n	8003252 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800324a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003260:	430b      	orrs	r3, r1
 8003262:	e07e      	b.n	8003362 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x5c8>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	3301      	adds	r3, #1
 8003278:	069b      	lsls	r3, r3, #26
 800327a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800327e:	e015      	b.n	80032ac <HAL_ADC_ConfigChannel+0x5f4>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800328e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003290:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800329c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	069b      	lsls	r3, r3, #26
 80032a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x614>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0e9b      	lsrs	r3, r3, #26
 80032be:	3301      	adds	r3, #1
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	e017      	b.n	80032fc <HAL_ADC_ConfigChannel+0x644>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	61fb      	str	r3, [r7, #28]
  return result;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3301      	adds	r3, #1
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	ea42 0103 	orr.w	r1, r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x670>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	3301      	adds	r3, #1
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	3b1e      	subs	r3, #30
 8003320:	051b      	lsls	r3, r3, #20
 8003322:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003326:	e01b      	b.n	8003360 <HAL_ADC_ConfigChannel+0x6a8>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	613b      	str	r3, [r7, #16]
  return result;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003340:	2320      	movs	r3, #32
 8003342:	e003      	b.n	800334c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f003 021f 	and.w	r2, r3, #31
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	3b1e      	subs	r3, #30
 800335a:	051b      	lsls	r3, r3, #20
 800335c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003360:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003366:	4619      	mov	r1, r3
 8003368:	f7ff f8c5 	bl	80024f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <HAL_ADC_ConfigChannel+0x6e0>)
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80be 	beq.w	80034f6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003382:	d004      	beq.n	800338e <HAL_ADC_ConfigChannel+0x6d6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a04      	ldr	r2, [pc, #16]	@ (800339c <HAL_ADC_ConfigChannel+0x6e4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10a      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x6ec>
 800338e:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <HAL_ADC_ConfigChannel+0x6e8>)
 8003390:	e009      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x6ee>
 8003392:	bf00      	nop
 8003394:	407f0000 	.word	0x407f0000
 8003398:	80080000 	.word	0x80080000
 800339c:	50000100 	.word	0x50000100
 80033a0:	50000300 	.word	0x50000300
 80033a4:	4b59      	ldr	r3, [pc, #356]	@ (800350c <HAL_ADC_ConfigChannel+0x854>)
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe ffba 	bl	8002320 <LL_ADC_GetCommonPathInternalCh>
 80033ac:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a56      	ldr	r2, [pc, #344]	@ (8003510 <HAL_ADC_ConfigChannel+0x858>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x70c>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a55      	ldr	r2, [pc, #340]	@ (8003514 <HAL_ADC_ConfigChannel+0x85c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d13a      	bne.n	800343a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d134      	bne.n	800343a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033d8:	d005      	beq.n	80033e6 <HAL_ADC_ConfigChannel+0x72e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a4e      	ldr	r2, [pc, #312]	@ (8003518 <HAL_ADC_ConfigChannel+0x860>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	f040 8085 	bne.w	80034f0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ee:	d004      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x742>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a49      	ldr	r2, [pc, #292]	@ (800351c <HAL_ADC_ConfigChannel+0x864>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x746>
 80033fa:	4a49      	ldr	r2, [pc, #292]	@ (8003520 <HAL_ADC_ConfigChannel+0x868>)
 80033fc:	e000      	b.n	8003400 <HAL_ADC_ConfigChannel+0x748>
 80033fe:	4a43      	ldr	r2, [pc, #268]	@ (800350c <HAL_ADC_ConfigChannel+0x854>)
 8003400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003404:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f7fe ff75 	bl	80022fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003410:	4b44      	ldr	r3, [pc, #272]	@ (8003524 <HAL_ADC_ConfigChannel+0x86c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	4a44      	ldr	r2, [pc, #272]	@ (8003528 <HAL_ADC_ConfigChannel+0x870>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800342a:	e002      	b.n	8003432 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3b01      	subs	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003438:	e05a      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3b      	ldr	r2, [pc, #236]	@ (800352c <HAL_ADC_ConfigChannel+0x874>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d125      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003448:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d11f      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a31      	ldr	r2, [pc, #196]	@ (800351c <HAL_ADC_ConfigChannel+0x864>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d104      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x7ac>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a34      	ldr	r2, [pc, #208]	@ (8003530 <HAL_ADC_ConfigChannel+0x878>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d047      	beq.n	80034f4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800346c:	d004      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x7c0>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2a      	ldr	r2, [pc, #168]	@ (800351c <HAL_ADC_ConfigChannel+0x864>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x7c4>
 8003478:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <HAL_ADC_ConfigChannel+0x868>)
 800347a:	e000      	b.n	800347e <HAL_ADC_ConfigChannel+0x7c6>
 800347c:	4a23      	ldr	r2, [pc, #140]	@ (800350c <HAL_ADC_ConfigChannel+0x854>)
 800347e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f7fe ff36 	bl	80022fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800348e:	e031      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a27      	ldr	r2, [pc, #156]	@ (8003534 <HAL_ADC_ConfigChannel+0x87c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d12d      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800349a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800349e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d127      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_ADC_ConfigChannel+0x864>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d022      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b8:	d004      	beq.n	80034c4 <HAL_ADC_ConfigChannel+0x80c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a17      	ldr	r2, [pc, #92]	@ (800351c <HAL_ADC_ConfigChannel+0x864>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x810>
 80034c4:	4a16      	ldr	r2, [pc, #88]	@ (8003520 <HAL_ADC_ConfigChannel+0x868>)
 80034c6:	e000      	b.n	80034ca <HAL_ADC_ConfigChannel+0x812>
 80034c8:	4a10      	ldr	r2, [pc, #64]	@ (800350c <HAL_ADC_ConfigChannel+0x854>)
 80034ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f7fe ff10 	bl	80022fa <LL_ADC_SetCommonPathInternalCh>
 80034da:	e00c      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80034ee:	e002      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034f0:	bf00      	nop
 80034f2:	e000      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003502:	4618      	mov	r0, r3
 8003504:	37d8      	adds	r7, #216	@ 0xd8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	50000700 	.word	0x50000700
 8003510:	c3210000 	.word	0xc3210000
 8003514:	90c00010 	.word	0x90c00010
 8003518:	50000600 	.word	0x50000600
 800351c:	50000100 	.word	0x50000100
 8003520:	50000300 	.word	0x50000300
 8003524:	20000004 	.word	0x20000004
 8003528:	053e2d63 	.word	0x053e2d63
 800352c:	c7520000 	.word	0xc7520000
 8003530:	50000500 	.word	0x50000500
 8003534:	cb840000 	.word	0xcb840000

08003538 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff f8a7 	bl	800269c <LL_ADC_IsEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d176      	bne.n	8003642 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	4b3c      	ldr	r3, [pc, #240]	@ (800364c <ADC_Enable+0x114>)
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	f043 0210 	orr.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e062      	b.n	8003644 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff f862 	bl	800264c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003590:	d004      	beq.n	800359c <ADC_Enable+0x64>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2e      	ldr	r2, [pc, #184]	@ (8003650 <ADC_Enable+0x118>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <ADC_Enable+0x68>
 800359c:	4b2d      	ldr	r3, [pc, #180]	@ (8003654 <ADC_Enable+0x11c>)
 800359e:	e000      	b.n	80035a2 <ADC_Enable+0x6a>
 80035a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003658 <ADC_Enable+0x120>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe febc 	bl	8002320 <LL_ADC_GetCommonPathInternalCh>
 80035a8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d013      	beq.n	80035da <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b2:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <ADC_Enable+0x124>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	4a29      	ldr	r2, [pc, #164]	@ (8003660 <ADC_Enable+0x128>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035cc:	e002      	b.n	80035d4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f9      	bne.n	80035ce <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035da:	f7fe fe29 	bl	8002230 <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e0:	e028      	b.n	8003634 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f858 	bl	800269c <LL_ADC_IsEnabled>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff f828 	bl	800264c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035fc:	f7fe fe18 	bl	8002230 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d914      	bls.n	8003634 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d00d      	beq.n	8003634 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361c:	f043 0210 	orr.w	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d1cf      	bne.n	80035e2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	8000003f 	.word	0x8000003f
 8003650:	50000100 	.word	0x50000100
 8003654:	50000300 	.word	0x50000300
 8003658:	50000700 	.word	0x50000700
 800365c:	20000004 	.word	0x20000004
 8003660:	053e2d63 	.word	0x053e2d63

08003664 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f826 	bl	80026c2 <LL_ADC_IsDisableOngoing>
 8003676:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f80d 	bl	800269c <LL_ADC_IsEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d047      	beq.n	8003718 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d144      	bne.n	8003718 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 030d 	and.w	r3, r3, #13
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10c      	bne.n	80036b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe ffe7 	bl	8002674 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2203      	movs	r2, #3
 80036ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ae:	f7fe fdbf 	bl	8002230 <HAL_GetTick>
 80036b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036b4:	e029      	b.n	800370a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	f043 0210 	orr.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e023      	b.n	800371a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036d2:	f7fe fdad 	bl	8002230 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d914      	bls.n	800370a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f2:	f043 0210 	orr.w	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e007      	b.n	800371a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1dc      	bne.n	80036d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003738:	2b00      	cmp	r3, #0
 800373a:	d14b      	bne.n	80037d4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003740:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d021      	beq.n	800379a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fe8c 	bl	8002478 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d032      	beq.n	80037cc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d12b      	bne.n	80037cc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d11f      	bne.n	80037cc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003798:	e018      	b.n	80037cc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff fa55 	bl	8002c7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037d2:	e00e      	b.n	80037f2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7ff fa5f 	bl	8002ca4 <HAL_ADC_ErrorCallback>
}
 80037e6:	e004      	b.n	80037f2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003806:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f7ff fa41 	bl	8002c90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003822:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003828:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003834:	f043 0204 	orr.w	r2, r3, #4
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff fa31 	bl	8002ca4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <LL_ADC_IsEnabled>:
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <LL_ADC_IsEnabled+0x18>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <LL_ADC_IsEnabled+0x1a>
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_StartCalibration>:
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003882:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800388c:	4313      	orrs	r3, r2
 800388e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	609a      	str	r2, [r3, #8]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <LL_ADC_IsCalibrationOnGoing>:
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038b6:	d101      	bne.n	80038bc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <LL_ADC_IsCalibrationOnGoing+0x1c>
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <LL_ADC_REG_IsConversionOngoing>:
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d101      	bne.n	80038e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_ADCEx_Calibration_Start+0x1c>
 8003908:	2302      	movs	r3, #2
 800390a:	e04d      	b.n	80039a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fea5 	bl	8003664 <ADC_Disable>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d136      	bne.n	8003992 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800392c:	f023 0302 	bic.w	r3, r3, #2
 8003930:	f043 0202 	orr.w	r2, r3, #2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6839      	ldr	r1, [r7, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ff96 	bl	8003870 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003944:	e014      	b.n	8003970 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3301      	adds	r3, #1
 800394a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4a18      	ldr	r2, [pc, #96]	@ (80039b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d90d      	bls.n	8003970 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003958:	f023 0312 	bic.w	r3, r3, #18
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e01b      	b.n	80039a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff94 	bl	80038a2 <LL_ADC_IsCalibrationOnGoing>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e2      	bne.n	8003946 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003984:	f023 0303 	bic.w	r3, r3, #3
 8003988:	f043 0201 	orr.w	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003990:	e005      	b.n	800399e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	0004de01 	.word	0x0004de01

080039b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b0a1      	sub	sp, #132	@ 0x84
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e0e7      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039da:	2300      	movs	r3, #0
 80039dc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039de:	2300      	movs	r3, #0
 80039e0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ea:	d102      	bne.n	80039f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039ec:	4b6f      	ldr	r3, [pc, #444]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	e009      	b.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6e      	ldr	r2, [pc, #440]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d102      	bne.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039fc:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	e001      	b.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0be      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff4f 	bl	80038ca <LL_ADC_REG_IsConversionOngoing>
 8003a2c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff49 	bl	80038ca <LL_ADC_REG_IsConversionOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 80a0 	bne.w	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 809c 	bne.w	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a50:	d004      	beq.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a55      	ldr	r2, [pc, #340]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a5c:	4b56      	ldr	r3, [pc, #344]	@ (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a5e:	e000      	b.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a60:	4b56      	ldr	r3, [pc, #344]	@ (8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a62:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d04b      	beq.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a7e:	035b      	lsls	r3, r3, #13
 8003a80:	430b      	orrs	r3, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a90:	d004      	beq.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a45      	ldr	r2, [pc, #276]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10f      	bne.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003aa0:	f7ff fed3 	bl	800384a <LL_ADC_IsEnabled>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	4841      	ldr	r0, [pc, #260]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003aa8:	f7ff fecf 	bl	800384a <LL_ADC_IsEnabled>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4323      	orrs	r3, r4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e012      	b.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003abc:	483c      	ldr	r0, [pc, #240]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003abe:	f7ff fec4 	bl	800384a <LL_ADC_IsEnabled>
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	483b      	ldr	r0, [pc, #236]	@ (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ac6:	f7ff fec0 	bl	800384a <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	431c      	orrs	r4, r3
 8003ace:	483c      	ldr	r0, [pc, #240]	@ (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ad0:	f7ff febb 	bl	800384a <LL_ADC_IsEnabled>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4323      	orrs	r3, r4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d056      	beq.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003aee:	f023 030f 	bic.w	r3, r3, #15
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	6811      	ldr	r1, [r2, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	6892      	ldr	r2, [r2, #8]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b00:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b02:	e047      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b18:	d004      	beq.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a23      	ldr	r2, [pc, #140]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10f      	bne.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b28:	f7ff fe8f 	bl	800384a <LL_ADC_IsEnabled>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	481f      	ldr	r0, [pc, #124]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b30:	f7ff fe8b 	bl	800384a <LL_ADC_IsEnabled>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4323      	orrs	r3, r4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e012      	b.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b44:	481a      	ldr	r0, [pc, #104]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b46:	f7ff fe80 	bl	800384a <LL_ADC_IsEnabled>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4819      	ldr	r0, [pc, #100]	@ (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b4e:	f7ff fe7c 	bl	800384a <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	431c      	orrs	r4, r3
 8003b56:	481a      	ldr	r0, [pc, #104]	@ (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b58:	f7ff fe77 	bl	800384a <LL_ADC_IsEnabled>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4323      	orrs	r3, r4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d012      	beq.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b7c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b7e:	e009      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b92:	e000      	b.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3784      	adds	r7, #132	@ 0x84
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd90      	pop	{r4, r7, pc}
 8003baa:	bf00      	nop
 8003bac:	50000100 	.word	0x50000100
 8003bb0:	50000400 	.word	0x50000400
 8003bb4:	50000500 	.word	0x50000500
 8003bb8:	50000300 	.word	0x50000300
 8003bbc:	50000700 	.word	0x50000700
 8003bc0:	50000600 	.word	0x50000600

08003bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003be0:	4013      	ands	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf6:	4a04      	ldr	r2, [pc, #16]	@ (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	60d3      	str	r3, [r2, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c10:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <__NVIC_GetPriorityGrouping+0x18>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	f003 0307 	and.w	r3, r3, #7
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db0b      	blt.n	8003c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	4907      	ldr	r1, [pc, #28]	@ (8003c60 <__NVIC_EnableIRQ+0x38>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db0a      	blt.n	8003c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	490c      	ldr	r1, [pc, #48]	@ (8003cb0 <__NVIC_SetPriority+0x4c>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	440b      	add	r3, r1
 8003c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c8c:	e00a      	b.n	8003ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4908      	ldr	r1, [pc, #32]	@ (8003cb4 <__NVIC_SetPriority+0x50>)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	761a      	strb	r2, [r3, #24]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000e100 	.word	0xe000e100
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	@ 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf28      	it	cs
 8003cd6:	2304      	movcs	r3, #4
 8003cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d902      	bls.n	8003ce8 <NVIC_EncodePriority+0x30>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b03      	subs	r3, #3
 8003ce6:	e000      	b.n	8003cea <NVIC_EncodePriority+0x32>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43d9      	mvns	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	4313      	orrs	r3, r2
         );
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	@ 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d30:	d301      	bcc.n	8003d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00f      	b.n	8003d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d36:	4a0a      	ldr	r2, [pc, #40]	@ (8003d60 <SysTick_Config+0x40>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3e:	210f      	movs	r1, #15
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d44:	f7ff ff8e 	bl	8003c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <SysTick_Config+0x40>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4e:	4b04      	ldr	r3, [pc, #16]	@ (8003d60 <SysTick_Config+0x40>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000e010 	.word	0xe000e010

08003d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ff29 	bl	8003bc4 <__NVIC_SetPriorityGrouping>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d88:	f7ff ff40 	bl	8003c0c <__NVIC_GetPriorityGrouping>
 8003d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7ff ff90 	bl	8003cb8 <NVIC_EncodePriority>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff5f 	bl	8003c64 <__NVIC_SetPriority>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff33 	bl	8003c28 <__NVIC_EnableIRQ>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffa4 	bl	8003d20 <SysTick_Config>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e014      	b.n	8003e1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	791b      	ldrb	r3, [r3, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fd feab 	bl	8001b60 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e056      	b.n	8003eea <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	795b      	ldrb	r3, [r3, #5]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_DAC_Start+0x20>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e050      	b.n	8003eea <HAL_DAC_Start+0xc2>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2201      	movs	r2, #1
 8003e62:	409a      	lsls	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e6c:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <HAL_DAC_Start+0xd0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	099b      	lsrs	r3, r3, #6
 8003e72:	4a22      	ldr	r2, [pc, #136]	@ (8003efc <HAL_DAC_Start+0xd4>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003e7e:	e002      	b.n	8003e86 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f9      	bne.n	8003e80 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d11d      	bne.n	8003edc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	e014      	b.n	8003edc <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d107      	bne.n	8003edc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0202 	orr.w	r2, r2, #2
 8003eda:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000004 	.word	0x20000004
 8003efc:	053e2d63 	.word	0x053e2d63

08003f00 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e018      	b.n	8003f4e <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4413      	add	r3, r2
 8003f34:	3308      	adds	r3, #8
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	e004      	b.n	8003f44 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3314      	adds	r3, #20
 8003f42:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	461a      	mov	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	@ 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_DAC_ConfigChannel+0x1c>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e19e      	b.n	80042ba <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	795b      	ldrb	r3, [r3, #5]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_DAC_ConfigChannel+0x2c>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e198      	b.n	80042ba <HAL_DAC_ConfigChannel+0x35e>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2202      	movs	r2, #2
 8003f92:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d17a      	bne.n	8004092 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003f9c:	f7fe f948 	bl	8002230 <HAL_GetTick>
 8003fa0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d13d      	bne.n	8004024 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fa8:	e018      	b.n	8003fdc <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003faa:	f7fe f941 	bl	8002230 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d911      	bls.n	8003fdc <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f043 0208 	orr.w	r2, r3, #8
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e16e      	b.n	80042ba <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1df      	bne.n	8003faa <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ff4:	e020      	b.n	8004038 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ff6:	f7fe f91b 	bl	8002230 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d90f      	bls.n	8004024 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400a:	2b00      	cmp	r3, #0
 800400c:	da0a      	bge.n	8004024 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f043 0208 	orr.w	r2, r3, #8
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2203      	movs	r2, #3
 800401e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e14a      	b.n	80042ba <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402a:	2b00      	cmp	r3, #0
 800402c:	dbe3      	blt.n	8003ff6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004036:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	ea02 0103 	and.w	r1, r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	409a      	lsls	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	21ff      	movs	r1, #255	@ 0xff
 8004074:	fa01 f303 	lsl.w	r3, r1, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	ea02 0103 	and.w	r1, r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	409a      	lsls	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d11d      	bne.n	80040d6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	221f      	movs	r2, #31
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b2:	4013      	ands	r3, r2
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ca:	4313      	orrs	r3, r2
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2207      	movs	r2, #7
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ee:	4013      	ands	r3, r2
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d102      	bne.n	8004100 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	e00f      	b.n	8004120 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d102      	bne.n	800410e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004108:	2301      	movs	r3, #1
 800410a:	623b      	str	r3, [r7, #32]
 800410c:	e008      	b.n	8004120 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004116:	2301      	movs	r3, #1
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	e001      	b.n	8004120 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800411c:	2300      	movs	r3, #0
 800411e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	6a3a      	ldr	r2, [r7, #32]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004142:	4013      	ands	r3, r2
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	791b      	ldrb	r3, [r3, #4]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d102      	bne.n	8004154 <HAL_DAC_ConfigChannel+0x1f8>
 800414e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004152:	e000      	b.n	8004156 <HAL_DAC_ConfigChannel+0x1fa>
 8004154:	2300      	movs	r3, #0
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416e:	4013      	ands	r3, r2
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	795b      	ldrb	r3, [r3, #5]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d102      	bne.n	8004180 <HAL_DAC_ConfigChannel+0x224>
 800417a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800417e:	e000      	b.n	8004182 <HAL_DAC_ConfigChannel+0x226>
 8004180:	2300      	movs	r3, #0
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d114      	bne.n	80041c2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004198:	f001 fed6 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 800419c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4a48      	ldr	r2, [pc, #288]	@ (80042c4 <HAL_DAC_ConfigChannel+0x368>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d904      	bls.n	80041b0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ae:	e00f      	b.n	80041d0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4a45      	ldr	r2, [pc, #276]	@ (80042c8 <HAL_DAC_ConfigChannel+0x36c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d90a      	bls.n	80041ce <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c0:	e006      	b.n	80041d0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c8:	4313      	orrs	r3, r2
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80041cc:	e000      	b.n	80041d0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80041ce:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041de:	4313      	orrs	r3, r2
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43da      	mvns	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	400a      	ands	r2, r1
 8004206:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004222:	4013      	ands	r3, r2
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423a:	4313      	orrs	r3, r2
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004244:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	22c0      	movs	r2, #192	@ 0xc0
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43da      	mvns	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	400a      	ands	r2, r1
 8004260:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	ea02 0103 	and.w	r1, r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	409a      	lsls	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3728      	adds	r7, #40	@ 0x28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	09896800 	.word	0x09896800
 80042c8:	04c4b400 	.word	0x04c4b400

080042cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e08d      	b.n	80043fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <HAL_DMA_Init+0x138>)
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d80f      	bhi.n	800430a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	4b45      	ldr	r3, [pc, #276]	@ (8004408 <HAL_DMA_Init+0x13c>)
 80042f2:	4413      	add	r3, r2
 80042f4:	4a45      	ldr	r2, [pc, #276]	@ (800440c <HAL_DMA_Init+0x140>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	009a      	lsls	r2, r3, #2
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a42      	ldr	r2, [pc, #264]	@ (8004410 <HAL_DMA_Init+0x144>)
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40
 8004308:	e00e      	b.n	8004328 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	4b40      	ldr	r3, [pc, #256]	@ (8004414 <HAL_DMA_Init+0x148>)
 8004312:	4413      	add	r3, r2
 8004314:	4a3d      	ldr	r2, [pc, #244]	@ (800440c <HAL_DMA_Init+0x140>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	009a      	lsls	r2, r3, #2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a3c      	ldr	r2, [pc, #240]	@ (8004418 <HAL_DMA_Init+0x14c>)
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800433e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004342:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800434c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f9b6 	bl	80046ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004388:	d102      	bne.n	8004390 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_DMA_Init+0x104>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d80c      	bhi.n	80043d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f9d6 	bl	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	e008      	b.n	80043e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40020407 	.word	0x40020407
 8004408:	bffdfff8 	.word	0xbffdfff8
 800440c:	cccccccd 	.word	0xcccccccd
 8004410:	40020000 	.word	0x40020000
 8004414:	bffdfbf8 	.word	0xbffdfbf8
 8004418:	40020400 	.word	0x40020400

0800441c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_DMA_Start_IT+0x20>
 8004438:	2302      	movs	r3, #2
 800443a:	e066      	b.n	800450a <HAL_DMA_Start_IT+0xee>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d155      	bne.n	80044fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f8fb 	bl	8004670 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 020e 	orr.w	r2, r2, #14
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e00f      	b.n	80044b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0204 	bic.w	r2, r2, #4
 80044a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 020a 	orr.w	r2, r2, #10
 80044b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e005      	b.n	8004508 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004504:	2302      	movs	r3, #2
 8004506:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004508:	7dfb      	ldrb	r3, [r7, #23]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2204      	movs	r2, #4
 8004534:	409a      	lsls	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d026      	beq.n	800458c <HAL_DMA_IRQHandler+0x7a>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d021      	beq.n	800458c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d107      	bne.n	8004566 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0204 	bic.w	r2, r2, #4
 8004564:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	f003 021f 	and.w	r2, r3, #31
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	2104      	movs	r1, #4
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	2b00      	cmp	r3, #0
 8004580:	d071      	beq.n	8004666 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800458a:	e06c      	b.n	8004666 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	2202      	movs	r2, #2
 8004596:	409a      	lsls	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02e      	beq.n	80045fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d029      	beq.n	80045fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 020a 	bic.w	r2, r2, #10
 80045c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d4:	f003 021f 	and.w	r2, r3, #31
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	2102      	movs	r1, #2
 80045de:	fa01 f202 	lsl.w	r2, r1, r2
 80045e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d038      	beq.n	8004666 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80045fc:	e033      	b.n	8004666 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	2208      	movs	r2, #8
 8004608:	409a      	lsls	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02a      	beq.n	8004668 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d025      	beq.n	8004668 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 020e 	bic.w	r2, r2, #14
 800462a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	2101      	movs	r1, #1
 800463a:	fa01 f202 	lsl.w	r2, r1, r2
 800463e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004666:	bf00      	nop
 8004668:	bf00      	nop
}
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004686:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468c:	2b00      	cmp	r3, #0
 800468e:	d004      	beq.n	800469a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004698:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	f003 021f 	and.w	r2, r3, #31
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	2101      	movs	r1, #1
 80046a8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d108      	bne.n	80046d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046ce:	e007      	b.n	80046e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b16      	ldr	r3, [pc, #88]	@ (8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d802      	bhi.n	8004706 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004700:	4b15      	ldr	r3, [pc, #84]	@ (8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e001      	b.n	800470a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004706:	4b15      	ldr	r3, [pc, #84]	@ (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004708:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3b08      	subs	r3, #8
 8004716:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	009a      	lsls	r2, r3, #2
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4413      	add	r3, r2
 800472c:	461a      	mov	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a0b      	ldr	r2, [pc, #44]	@ (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004736:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2201      	movs	r2, #1
 8004740:	409a      	lsls	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40020407 	.word	0x40020407
 8004758:	40020800 	.word	0x40020800
 800475c:	40020820 	.word	0x40020820
 8004760:	cccccccd 	.word	0xcccccccd
 8004764:	40020880 	.word	0x40020880

08004768 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a08      	ldr	r2, [pc, #32]	@ (80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800478a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3b01      	subs	r3, #1
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2201      	movs	r2, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	1000823f 	.word	0x1000823f
 80047ac:	40020940 	.word	0x40020940

080047b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047be:	e15a      	b.n	8004a76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	2101      	movs	r1, #1
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 814c 	beq.w	8004a70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d005      	beq.n	80047f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d130      	bne.n	8004852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4013      	ands	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004826:	2201      	movs	r2, #1
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4013      	ands	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	091b      	lsrs	r3, r3, #4
 800483c:	f003 0201 	and.w	r2, r3, #1
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b03      	cmp	r3, #3
 800485c:	d017      	beq.n	800488e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	2203      	movs	r2, #3
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4013      	ands	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d123      	bne.n	80048e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	08da      	lsrs	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3208      	adds	r2, #8
 80048a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	220f      	movs	r2, #15
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	08da      	lsrs	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3208      	adds	r2, #8
 80048dc:	6939      	ldr	r1, [r7, #16]
 80048de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	2203      	movs	r2, #3
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80a6 	beq.w	8004a70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004924:	4b5b      	ldr	r3, [pc, #364]	@ (8004a94 <HAL_GPIO_Init+0x2e4>)
 8004926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004928:	4a5a      	ldr	r2, [pc, #360]	@ (8004a94 <HAL_GPIO_Init+0x2e4>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004930:	4b58      	ldr	r3, [pc, #352]	@ (8004a94 <HAL_GPIO_Init+0x2e4>)
 8004932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800493c:	4a56      	ldr	r2, [pc, #344]	@ (8004a98 <HAL_GPIO_Init+0x2e8>)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	3302      	adds	r3, #2
 8004944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	220f      	movs	r2, #15
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004966:	d01f      	beq.n	80049a8 <HAL_GPIO_Init+0x1f8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a4c      	ldr	r2, [pc, #304]	@ (8004a9c <HAL_GPIO_Init+0x2ec>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d019      	beq.n	80049a4 <HAL_GPIO_Init+0x1f4>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a4b      	ldr	r2, [pc, #300]	@ (8004aa0 <HAL_GPIO_Init+0x2f0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <HAL_GPIO_Init+0x1f0>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a4a      	ldr	r2, [pc, #296]	@ (8004aa4 <HAL_GPIO_Init+0x2f4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00d      	beq.n	800499c <HAL_GPIO_Init+0x1ec>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a49      	ldr	r2, [pc, #292]	@ (8004aa8 <HAL_GPIO_Init+0x2f8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <HAL_GPIO_Init+0x1e8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a48      	ldr	r2, [pc, #288]	@ (8004aac <HAL_GPIO_Init+0x2fc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d101      	bne.n	8004994 <HAL_GPIO_Init+0x1e4>
 8004990:	2305      	movs	r3, #5
 8004992:	e00a      	b.n	80049aa <HAL_GPIO_Init+0x1fa>
 8004994:	2306      	movs	r3, #6
 8004996:	e008      	b.n	80049aa <HAL_GPIO_Init+0x1fa>
 8004998:	2304      	movs	r3, #4
 800499a:	e006      	b.n	80049aa <HAL_GPIO_Init+0x1fa>
 800499c:	2303      	movs	r3, #3
 800499e:	e004      	b.n	80049aa <HAL_GPIO_Init+0x1fa>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e002      	b.n	80049aa <HAL_GPIO_Init+0x1fa>
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <HAL_GPIO_Init+0x1fa>
 80049a8:	2300      	movs	r3, #0
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	f002 0203 	and.w	r2, r2, #3
 80049b0:	0092      	lsls	r2, r2, #2
 80049b2:	4093      	lsls	r3, r2
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049ba:	4937      	ldr	r1, [pc, #220]	@ (8004a98 <HAL_GPIO_Init+0x2e8>)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	089b      	lsrs	r3, r3, #2
 80049c0:	3302      	adds	r3, #2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049c8:	4b39      	ldr	r3, [pc, #228]	@ (8004ab0 <HAL_GPIO_Init+0x300>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049ec:	4a30      	ldr	r2, [pc, #192]	@ (8004ab0 <HAL_GPIO_Init+0x300>)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049f2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab0 <HAL_GPIO_Init+0x300>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4013      	ands	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a16:	4a26      	ldr	r2, [pc, #152]	@ (8004ab0 <HAL_GPIO_Init+0x300>)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a1c:	4b24      	ldr	r3, [pc, #144]	@ (8004ab0 <HAL_GPIO_Init+0x300>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a40:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab0 <HAL_GPIO_Init+0x300>)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a46:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab0 <HAL_GPIO_Init+0x300>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4013      	ands	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a6a:	4a11      	ldr	r2, [pc, #68]	@ (8004ab0 <HAL_GPIO_Init+0x300>)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3301      	adds	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f47f ae9d 	bne.w	80047c0 <HAL_GPIO_Init+0x10>
  }
}
 8004a86:	bf00      	nop
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	48000400 	.word	0x48000400
 8004aa0:	48000800 	.word	0x48000800
 8004aa4:	48000c00 	.word	0x48000c00
 8004aa8:	48001000 	.word	0x48001000
 8004aac:	48001400 	.word	0x48001400
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ac4:	787b      	ldrb	r3, [r7, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ad0:	e002      	b.n	8004ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4013      	ands	r3, r2
 8004afc:	041a      	lsls	r2, r3, #16
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	43d9      	mvns	r1, r3
 8004b02:	887b      	ldrh	r3, [r7, #2]
 8004b04:	400b      	ands	r3, r1
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e08d      	b.n	8004c46 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd f87a 	bl	8001c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	@ 0x24
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d107      	bne.n	8004b92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	e006      	b.n	8004ba0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d108      	bne.n	8004bba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bb6:	605a      	str	r2, [r3, #4]
 8004bb8:	e007      	b.n	8004bca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69d9      	ldr	r1, [r3, #28]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1a      	ldr	r2, [r3, #32]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	4608      	mov	r0, r1
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	817b      	strh	r3, [r7, #10]
 8004c62:	460b      	mov	r3, r1
 8004c64:	813b      	strh	r3, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	f040 80f9 	bne.w	8004e6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_I2C_Mem_Write+0x34>
 8004c7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0ed      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_I2C_Mem_Write+0x4e>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e0e6      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ca6:	f7fd fac3 	bl	8002230 <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	2319      	movs	r3, #25
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f955 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0d1      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2221      	movs	r2, #33	@ 0x21
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2240      	movs	r2, #64	@ 0x40
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf0:	88f8      	ldrh	r0, [r7, #6]
 8004cf2:	893a      	ldrh	r2, [r7, #8]
 8004cf4:	8979      	ldrh	r1, [r7, #10]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	4603      	mov	r3, r0
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f8b9 	bl	8004e78 <I2C_RequestMemoryWrite>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0a9      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2bff      	cmp	r3, #255	@ 0xff
 8004d20:	d90e      	bls.n	8004d40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	22ff      	movs	r2, #255	@ 0xff
 8004d26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	8979      	ldrh	r1, [r7, #10]
 8004d30:	2300      	movs	r3, #0
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 fad9 	bl	80052f0 <I2C_TransferConfig>
 8004d3e:	e00f      	b.n	8004d60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	8979      	ldrh	r1, [r7, #10]
 8004d52:	2300      	movs	r3, #0
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 fac8 	bl	80052f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f958 	bl	800501a <I2C_WaitOnTXISFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e07b      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d034      	beq.n	8004e18 <HAL_I2C_Mem_Write+0x1c8>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d130      	bne.n	8004e18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2180      	movs	r1, #128	@ 0x80
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f8d1 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e04d      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2bff      	cmp	r3, #255	@ 0xff
 8004dd8:	d90e      	bls.n	8004df8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22ff      	movs	r2, #255	@ 0xff
 8004dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	8979      	ldrh	r1, [r7, #10]
 8004de8:	2300      	movs	r3, #0
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fa7d 	bl	80052f0 <I2C_TransferConfig>
 8004df6:	e00f      	b.n	8004e18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	8979      	ldrh	r1, [r7, #10]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fa6c 	bl	80052f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d19e      	bne.n	8004d60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f93e 	bl	80050a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e01a      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6859      	ldr	r1, [r3, #4]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4b0a      	ldr	r3, [pc, #40]	@ (8004e74 <HAL_I2C_Mem_Write+0x224>)
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	fe00e800 	.word	0xfe00e800

08004e78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	813b      	strh	r3, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	8979      	ldrh	r1, [r7, #10]
 8004e98:	4b20      	ldr	r3, [pc, #128]	@ (8004f1c <I2C_RequestMemoryWrite+0xa4>)
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 fa25 	bl	80052f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	69b9      	ldr	r1, [r7, #24]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f8b5 	bl	800501a <I2C_WaitOnTXISFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e02c      	b.n	8004f14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d105      	bne.n	8004ecc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ec0:	893b      	ldrh	r3, [r7, #8]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004eca:	e015      	b.n	8004ef8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ecc:	893b      	ldrh	r3, [r7, #8]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	69b9      	ldr	r1, [r7, #24]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f89b 	bl	800501a <I2C_WaitOnTXISFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e012      	b.n	8004f14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eee:	893b      	ldrh	r3, [r7, #8]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2200      	movs	r2, #0
 8004f00:	2180      	movs	r1, #128	@ 0x80
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f830 	bl	8004f68 <I2C_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	80002000 	.word	0x80002000

08004f20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d103      	bne.n	8004f3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d007      	beq.n	8004f5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	619a      	str	r2, [r3, #24]
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f78:	e03b      	b.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f8d6 	bl	8005130 <I2C_IsErrorOccurred>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e041      	b.n	8005012 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f94:	d02d      	beq.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fd f94b 	bl	8002230 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <I2C_WaitOnFlagUntilTimeout+0x44>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d122      	bne.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d113      	bne.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fce:	f043 0220 	orr.w	r2, r3, #32
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e00f      	b.n	8005012 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	bf0c      	ite	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	2300      	movne	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	429a      	cmp	r2, r3
 800500e:	d0b4      	beq.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005026:	e033      	b.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f87f 	bl	8005130 <I2C_IsErrorOccurred>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e031      	b.n	80050a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005042:	d025      	beq.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005044:	f7fd f8f4 	bl	8002230 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d11a      	bne.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	d013      	beq.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e007      	b.n	80050a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	d1c4      	bne.n	8005028 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050b4:	e02f      	b.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f838 	bl	8005130 <I2C_IsErrorOccurred>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e02d      	b.n	8005126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fd f8b1 	bl	8002230 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11a      	bne.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d013      	beq.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e007      	b.n	8005126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b20      	cmp	r3, #32
 8005122:	d1c8      	bne.n	80050b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	@ 0x28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	d068      	beq.n	800522e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2210      	movs	r2, #16
 8005162:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005164:	e049      	b.n	80051fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800516c:	d045      	beq.n	80051fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fd f85f 	bl	8002230 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <I2C_IsErrorOccurred+0x54>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d13a      	bne.n	80051fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800518e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005196:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a6:	d121      	bne.n	80051ec <I2C_IsErrorOccurred+0xbc>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ae:	d01d      	beq.n	80051ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d01a      	beq.n	80051ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051c6:	f7fd f833 	bl	8002230 <HAL_GetTick>
 80051ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051cc:	e00e      	b.n	80051ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051ce:	f7fd f82f 	bl	8002230 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b19      	cmp	r3, #25
 80051da:	d907      	bls.n	80051ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	f043 0320 	orr.w	r3, r3, #32
 80051e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80051ea:	e006      	b.n	80051fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d1e9      	bne.n	80051ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b20      	cmp	r3, #32
 8005206:	d003      	beq.n	8005210 <I2C_IsErrorOccurred+0xe0>
 8005208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0aa      	beq.n	8005166 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2220      	movs	r2, #32
 800521e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	f043 0304 	orr.w	r3, r3, #4
 8005226:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f043 0308 	orr.w	r3, r3, #8
 8005268:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005272:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	f043 0302 	orr.w	r3, r3, #2
 800528a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800529c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01c      	beq.n	80052de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff fe3b 	bl	8004f20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <I2C_IsErrorOccurred+0x1bc>)
 80052b6:	400b      	ands	r3, r1
 80052b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80052de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3728      	adds	r7, #40	@ 0x28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	fe00e800 	.word	0xfe00e800

080052f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	817b      	strh	r3, [r7, #10]
 80052fe:	4613      	mov	r3, r2
 8005300:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005302:	897b      	ldrh	r3, [r7, #10]
 8005304:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005308:	7a7b      	ldrb	r3, [r7, #9]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005310:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	4313      	orrs	r3, r2
 800531a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800531e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	0d5b      	lsrs	r3, r3, #21
 800532a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <I2C_TransferConfig+0x60>)
 8005330:	430b      	orrs	r3, r1
 8005332:	43db      	mvns	r3, r3
 8005334:	ea02 0103 	and.w	r1, r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	03ff63ff 	.word	0x03ff63ff

08005354 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b20      	cmp	r3, #32
 8005368:	d138      	bne.n	80053dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005374:	2302      	movs	r3, #2
 8005376:	e032      	b.n	80053de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	@ 0x24
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6819      	ldr	r1, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	e000      	b.n	80053de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
  }
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d139      	bne.n	8005474 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800540a:	2302      	movs	r3, #2
 800540c:	e033      	b.n	8005476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2224      	movs	r2, #36	@ 0x24
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800543c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d141      	bne.n	8005516 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005492:	4b4b      	ldr	r3, [pc, #300]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800549e:	d131      	bne.n	8005504 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054a0:	4b47      	ldr	r3, [pc, #284]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a6:	4a46      	ldr	r2, [pc, #280]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054b0:	4b43      	ldr	r3, [pc, #268]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054b8:	4a41      	ldr	r2, [pc, #260]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054c0:	4b40      	ldr	r3, [pc, #256]	@ (80055c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2232      	movs	r2, #50	@ 0x32
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	4a3f      	ldr	r2, [pc, #252]	@ (80055c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	0c9b      	lsrs	r3, r3, #18
 80054d2:	3301      	adds	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054d6:	e002      	b.n	80054de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3b01      	subs	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054de:	4b38      	ldr	r3, [pc, #224]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ea:	d102      	bne.n	80054f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f2      	bne.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054f2:	4b33      	ldr	r3, [pc, #204]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054fe:	d158      	bne.n	80055b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e057      	b.n	80055b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005504:	4b2e      	ldr	r3, [pc, #184]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800550a:	4a2d      	ldr	r2, [pc, #180]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005514:	e04d      	b.n	80055b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800551c:	d141      	bne.n	80055a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800551e:	4b28      	ldr	r3, [pc, #160]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800552a:	d131      	bne.n	8005590 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800552c:	4b24      	ldr	r3, [pc, #144]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005532:	4a23      	ldr	r2, [pc, #140]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800553c:	4b20      	ldr	r3, [pc, #128]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005544:	4a1e      	ldr	r2, [pc, #120]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800554a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800554c:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2232      	movs	r2, #50	@ 0x32
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	4a1c      	ldr	r2, [pc, #112]	@ (80055c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	0c9b      	lsrs	r3, r3, #18
 800555e:	3301      	adds	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005562:	e002      	b.n	800556a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3b01      	subs	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800556a:	4b15      	ldr	r3, [pc, #84]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005576:	d102      	bne.n	800557e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f2      	bne.n	8005564 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800557e:	4b10      	ldr	r3, [pc, #64]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800558a:	d112      	bne.n	80055b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e011      	b.n	80055b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005590:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005596:	4a0a      	ldr	r2, [pc, #40]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800559c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80055a0:	e007      	b.n	80055b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055a2:	4b07      	ldr	r3, [pc, #28]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80055aa:	4a05      	ldr	r2, [pc, #20]	@ (80055c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40007000 	.word	0x40007000
 80055c4:	20000004 	.word	0x20000004
 80055c8:	431bde83 	.word	0x431bde83

080055cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80055d0:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a04      	ldr	r2, [pc, #16]	@ (80055e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055da:	6093      	str	r3, [r2, #8]
}
 80055dc:	bf00      	nop
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40007000 	.word	0x40007000

080055ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e2fe      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d075      	beq.n	80056f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800560a:	4b97      	ldr	r3, [pc, #604]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005614:	4b94      	ldr	r3, [pc, #592]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d102      	bne.n	800562a <HAL_RCC_OscConfig+0x3e>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2b03      	cmp	r3, #3
 8005628:	d002      	beq.n	8005630 <HAL_RCC_OscConfig+0x44>
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d10b      	bne.n	8005648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005630:	4b8d      	ldr	r3, [pc, #564]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05b      	beq.n	80056f4 <HAL_RCC_OscConfig+0x108>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d157      	bne.n	80056f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e2d9      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005650:	d106      	bne.n	8005660 <HAL_RCC_OscConfig+0x74>
 8005652:	4b85      	ldr	r3, [pc, #532]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a84      	ldr	r2, [pc, #528]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e01d      	b.n	800569c <HAL_RCC_OscConfig+0xb0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005668:	d10c      	bne.n	8005684 <HAL_RCC_OscConfig+0x98>
 800566a:	4b7f      	ldr	r3, [pc, #508]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a7e      	ldr	r2, [pc, #504]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	4b7c      	ldr	r3, [pc, #496]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a7b      	ldr	r2, [pc, #492]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 800567c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e00b      	b.n	800569c <HAL_RCC_OscConfig+0xb0>
 8005684:	4b78      	ldr	r3, [pc, #480]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a77      	ldr	r2, [pc, #476]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 800568a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	4b75      	ldr	r3, [pc, #468]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a74      	ldr	r2, [pc, #464]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800569a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d013      	beq.n	80056cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fc fdc4 	bl	8002230 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056ac:	f7fc fdc0 	bl	8002230 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b64      	cmp	r3, #100	@ 0x64
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e29e      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056be:	4b6a      	ldr	r3, [pc, #424]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0xc0>
 80056ca:	e014      	b.n	80056f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fc fdb0 	bl	8002230 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d4:	f7fc fdac 	bl	8002230 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	@ 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e28a      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056e6:	4b60      	ldr	r3, [pc, #384]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0xe8>
 80056f2:	e000      	b.n	80056f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d075      	beq.n	80057ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005702:	4b59      	ldr	r3, [pc, #356]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800570c:	4b56      	ldr	r3, [pc, #344]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b0c      	cmp	r3, #12
 800571a:	d102      	bne.n	8005722 <HAL_RCC_OscConfig+0x136>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d002      	beq.n	8005728 <HAL_RCC_OscConfig+0x13c>
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d11f      	bne.n	8005768 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005728:	4b4f      	ldr	r3, [pc, #316]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_RCC_OscConfig+0x154>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e25d      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005740:	4b49      	ldr	r3, [pc, #292]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	4946      	ldr	r1, [pc, #280]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005754:	4b45      	ldr	r3, [pc, #276]	@ (800586c <HAL_RCC_OscConfig+0x280>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f7fc fd1d 	bl	8002198 <HAL_InitTick>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d043      	beq.n	80057ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e249      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d023      	beq.n	80057b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005770:	4b3d      	ldr	r3, [pc, #244]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a3c      	ldr	r2, [pc, #240]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800577a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fc fd58 	bl	8002230 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005784:	f7fc fd54 	bl	8002230 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e232      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005796:	4b34      	ldr	r3, [pc, #208]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a2:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	061b      	lsls	r3, r3, #24
 80057b0:	492d      	ldr	r1, [pc, #180]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]
 80057b6:	e01a      	b.n	80057ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 80057be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fc fd34 	bl	8002230 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057cc:	f7fc fd30 	bl	8002230 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e20e      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057de:	4b22      	ldr	r3, [pc, #136]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x1e0>
 80057ea:	e000      	b.n	80057ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d041      	beq.n	800587e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01c      	beq.n	800583c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005802:	4b19      	ldr	r3, [pc, #100]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005808:	4a17      	ldr	r2, [pc, #92]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005812:	f7fc fd0d 	bl	8002230 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800581a:	f7fc fd09 	bl	8002230 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e1e7      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800582c:	4b0e      	ldr	r3, [pc, #56]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 800582e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0ef      	beq.n	800581a <HAL_RCC_OscConfig+0x22e>
 800583a:	e020      	b.n	800587e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 800583e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005842:	4a09      	ldr	r2, [pc, #36]	@ (8005868 <HAL_RCC_OscConfig+0x27c>)
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584c:	f7fc fcf0 	bl	8002230 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005852:	e00d      	b.n	8005870 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005854:	f7fc fcec 	bl	8002230 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d906      	bls.n	8005870 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e1ca      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000
 800586c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005870:	4b8c      	ldr	r3, [pc, #560]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1ea      	bne.n	8005854 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80a6 	beq.w	80059d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800588c:	2300      	movs	r3, #0
 800588e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005890:	4b84      	ldr	r3, [pc, #528]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_OscConfig+0x2b4>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <HAL_RCC_OscConfig+0x2b6>
 80058a0:	2300      	movs	r3, #0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00d      	beq.n	80058c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 80058a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058aa:	4a7e      	ldr	r2, [pc, #504]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058b2:	4b7c      	ldr	r3, [pc, #496]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 80058b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058be:	2301      	movs	r3, #1
 80058c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c2:	4b79      	ldr	r3, [pc, #484]	@ (8005aa8 <HAL_RCC_OscConfig+0x4bc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d118      	bne.n	8005900 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ce:	4b76      	ldr	r3, [pc, #472]	@ (8005aa8 <HAL_RCC_OscConfig+0x4bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a75      	ldr	r2, [pc, #468]	@ (8005aa8 <HAL_RCC_OscConfig+0x4bc>)
 80058d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058da:	f7fc fca9 	bl	8002230 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e2:	f7fc fca5 	bl	8002230 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e183      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f4:	4b6c      	ldr	r3, [pc, #432]	@ (8005aa8 <HAL_RCC_OscConfig+0x4bc>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d108      	bne.n	800591a <HAL_RCC_OscConfig+0x32e>
 8005908:	4b66      	ldr	r3, [pc, #408]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590e:	4a65      	ldr	r2, [pc, #404]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005918:	e024      	b.n	8005964 <HAL_RCC_OscConfig+0x378>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b05      	cmp	r3, #5
 8005920:	d110      	bne.n	8005944 <HAL_RCC_OscConfig+0x358>
 8005922:	4b60      	ldr	r3, [pc, #384]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005928:	4a5e      	ldr	r2, [pc, #376]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 800592a:	f043 0304 	orr.w	r3, r3, #4
 800592e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005932:	4b5c      	ldr	r3, [pc, #368]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005938:	4a5a      	ldr	r2, [pc, #360]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005942:	e00f      	b.n	8005964 <HAL_RCC_OscConfig+0x378>
 8005944:	4b57      	ldr	r3, [pc, #348]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594a:	4a56      	ldr	r2, [pc, #344]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005954:	4b53      	ldr	r3, [pc, #332]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595a:	4a52      	ldr	r2, [pc, #328]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 800595c:	f023 0304 	bic.w	r3, r3, #4
 8005960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d016      	beq.n	800599a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596c:	f7fc fc60 	bl	8002230 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005972:	e00a      	b.n	800598a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005974:	f7fc fc5c 	bl	8002230 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e138      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800598a:	4b46      	ldr	r3, [pc, #280]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 800598c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0ed      	beq.n	8005974 <HAL_RCC_OscConfig+0x388>
 8005998:	e015      	b.n	80059c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599a:	f7fc fc49 	bl	8002230 <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059a0:	e00a      	b.n	80059b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a2:	f7fc fc45 	bl	8002230 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e121      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059b8:	4b3a      	ldr	r3, [pc, #232]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1ed      	bne.n	80059a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059c6:	7ffb      	ldrb	r3, [r7, #31]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d105      	bne.n	80059d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059cc:	4b35      	ldr	r3, [pc, #212]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 80059ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d0:	4a34      	ldr	r2, [pc, #208]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 80059d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d03c      	beq.n	8005a5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01c      	beq.n	8005a26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059ec:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 80059ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059f2:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 80059f4:	f043 0301 	orr.w	r3, r3, #1
 80059f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fc fc18 	bl	8002230 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a04:	f7fc fc14 	bl	8002230 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e0f2      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a16:	4b23      	ldr	r3, [pc, #140]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0ef      	beq.n	8005a04 <HAL_RCC_OscConfig+0x418>
 8005a24:	e01b      	b.n	8005a5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a26:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a36:	f7fc fbfb 	bl	8002230 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a3e:	f7fc fbf7 	bl	8002230 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0d5      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a50:	4b14      	ldr	r3, [pc, #80]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1ef      	bne.n	8005a3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80c9 	beq.w	8005bfa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a68:	4b0e      	ldr	r3, [pc, #56]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	f000 8083 	beq.w	8005b7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d15e      	bne.n	8005b3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a7e:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a08      	ldr	r2, [pc, #32]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b8>)
 8005a84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8a:	f7fc fbd1 	bl	8002230 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a90:	e00c      	b.n	8005aac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a92:	f7fc fbcd 	bl	8002230 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d905      	bls.n	8005aac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e0ab      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aac:	4b55      	ldr	r3, [pc, #340]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1ec      	bne.n	8005a92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ab8:	4b52      	ldr	r3, [pc, #328]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	4b52      	ldr	r3, [pc, #328]	@ (8005c08 <HAL_RCC_OscConfig+0x61c>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6a11      	ldr	r1, [r2, #32]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ac8:	3a01      	subs	r2, #1
 8005aca:	0112      	lsls	r2, r2, #4
 8005acc:	4311      	orrs	r1, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005ad2:	0212      	lsls	r2, r2, #8
 8005ad4:	4311      	orrs	r1, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ada:	0852      	lsrs	r2, r2, #1
 8005adc:	3a01      	subs	r2, #1
 8005ade:	0552      	lsls	r2, r2, #21
 8005ae0:	4311      	orrs	r1, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ae6:	0852      	lsrs	r2, r2, #1
 8005ae8:	3a01      	subs	r2, #1
 8005aea:	0652      	lsls	r2, r2, #25
 8005aec:	4311      	orrs	r1, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005af2:	06d2      	lsls	r2, r2, #27
 8005af4:	430a      	orrs	r2, r1
 8005af6:	4943      	ldr	r1, [pc, #268]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005afc:	4b41      	ldr	r3, [pc, #260]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a40      	ldr	r2, [pc, #256]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b08:	4b3e      	ldr	r3, [pc, #248]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fc fb8c 	bl	8002230 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fc fb88 	bl	8002230 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e066      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2e:	4b35      	ldr	r3, [pc, #212]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCC_OscConfig+0x530>
 8005b3a:	e05e      	b.n	8005bfa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3c:	4b31      	ldr	r3, [pc, #196]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a30      	ldr	r2, [pc, #192]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fc fb72 	bl	8002230 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b50:	f7fc fb6e 	bl	8002230 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e04c      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b62:	4b28      	ldr	r3, [pc, #160]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b6e:	4b25      	ldr	r3, [pc, #148]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	4924      	ldr	r1, [pc, #144]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b74:	4b25      	ldr	r3, [pc, #148]	@ (8005c0c <HAL_RCC_OscConfig+0x620>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	60cb      	str	r3, [r1, #12]
 8005b7a:	e03e      	b.n	8005bfa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e039      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b88:	4b1e      	ldr	r3, [pc, #120]	@ (8005c04 <HAL_RCC_OscConfig+0x618>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f003 0203 	and.w	r2, r3, #3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d12c      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d123      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d11b      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d113      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d109      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bec:	085b      	lsrs	r3, r3, #1
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d001      	beq.n	8005bfa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3720      	adds	r7, #32
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000
 8005c08:	019f800c 	.word	0x019f800c
 8005c0c:	feeefffc 	.word	0xfeeefffc

08005c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e11e      	b.n	8005e66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c28:	4b91      	ldr	r3, [pc, #580]	@ (8005e70 <HAL_RCC_ClockConfig+0x260>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d910      	bls.n	8005c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c36:	4b8e      	ldr	r3, [pc, #568]	@ (8005e70 <HAL_RCC_ClockConfig+0x260>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f023 020f 	bic.w	r2, r3, #15
 8005c3e:	498c      	ldr	r1, [pc, #560]	@ (8005e70 <HAL_RCC_ClockConfig+0x260>)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c46:	4b8a      	ldr	r3, [pc, #552]	@ (8005e70 <HAL_RCC_ClockConfig+0x260>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e106      	b.n	8005e66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d073      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d129      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c6c:	4b81      	ldr	r3, [pc, #516]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0f4      	b.n	8005e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c7c:	f000 f99c 	bl	8005fb8 <RCC_GetSysClockFreqFromPLLSource>
 8005c80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4a7c      	ldr	r2, [pc, #496]	@ (8005e78 <HAL_RCC_ClockConfig+0x268>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d93f      	bls.n	8005d0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d033      	beq.n	8005d0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d12f      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005caa:	4b72      	ldr	r3, [pc, #456]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cb2:	4a70      	ldr	r2, [pc, #448]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cba:	2380      	movs	r3, #128	@ 0x80
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	e024      	b.n	8005d0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d107      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0c6      	b.n	8005e66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cd8:	4b66      	ldr	r3, [pc, #408]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0be      	b.n	8005e66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ce8:	f000 f8ce 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005cec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4a61      	ldr	r2, [pc, #388]	@ (8005e78 <HAL_RCC_ClockConfig+0x268>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d909      	bls.n	8005d0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005d06:	2380      	movs	r3, #128	@ 0x80
 8005d08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 0203 	bic.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	4957      	ldr	r1, [pc, #348]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d1c:	f7fc fa88 	bl	8002230 <HAL_GetTick>
 8005d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d24:	f7fc fa84 	bl	8002230 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e095      	b.n	8005e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 020c 	and.w	r2, r3, #12
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d1eb      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d023      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d64:	4b43      	ldr	r3, [pc, #268]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	4a42      	ldr	r2, [pc, #264]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d84:	4a3b      	ldr	r2, [pc, #236]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d8c:	4b39      	ldr	r3, [pc, #228]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4936      	ldr	r1, [pc, #216]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b80      	cmp	r3, #128	@ 0x80
 8005da4:	d105      	bne.n	8005db2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005da6:	4b33      	ldr	r3, [pc, #204]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	4a32      	ldr	r2, [pc, #200]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005dac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005db0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005db2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e70 <HAL_RCC_ClockConfig+0x260>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d21d      	bcs.n	8005dfc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e70 <HAL_RCC_ClockConfig+0x260>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f023 020f 	bic.w	r2, r3, #15
 8005dc8:	4929      	ldr	r1, [pc, #164]	@ (8005e70 <HAL_RCC_ClockConfig+0x260>)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005dd0:	f7fc fa2e 	bl	8002230 <HAL_GetTick>
 8005dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	e00a      	b.n	8005dee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd8:	f7fc fa2a 	bl	8002230 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e03b      	b.n	8005e66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dee:	4b20      	ldr	r3, [pc, #128]	@ (8005e70 <HAL_RCC_ClockConfig+0x260>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1ed      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e08:	4b1a      	ldr	r3, [pc, #104]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4917      	ldr	r1, [pc, #92]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e26:	4b13      	ldr	r3, [pc, #76]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	490f      	ldr	r1, [pc, #60]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e3a:	f000 f825 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	4b0c      	ldr	r3, [pc, #48]	@ (8005e74 <HAL_RCC_ClockConfig+0x264>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	091b      	lsrs	r3, r3, #4
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	490c      	ldr	r1, [pc, #48]	@ (8005e7c <HAL_RCC_ClockConfig+0x26c>)
 8005e4c:	5ccb      	ldrb	r3, [r1, r3]
 8005e4e:	f003 031f 	and.w	r3, r3, #31
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	4a0a      	ldr	r2, [pc, #40]	@ (8005e80 <HAL_RCC_ClockConfig+0x270>)
 8005e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e84 <HAL_RCC_ClockConfig+0x274>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fc f99a 	bl	8002198 <HAL_InitTick>
 8005e64:	4603      	mov	r3, r0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40022000 	.word	0x40022000
 8005e74:	40021000 	.word	0x40021000
 8005e78:	04c4b400 	.word	0x04c4b400
 8005e7c:	0800b474 	.word	0x0800b474
 8005e80:	20000004 	.word	0x20000004
 8005e84:	20000008 	.word	0x20000008

08005e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d102      	bne.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	e047      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ea0:	4b27      	ldr	r3, [pc, #156]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 030c 	and.w	r3, r3, #12
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d102      	bne.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005eac:	4b25      	ldr	r3, [pc, #148]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	e03e      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005eb2:	4b23      	ldr	r3, [pc, #140]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	2b0c      	cmp	r3, #12
 8005ebc:	d136      	bne.n	8005f2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ebe:	4b20      	ldr	r3, [pc, #128]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d10c      	bne.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005edc:	4a19      	ldr	r2, [pc, #100]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	4a16      	ldr	r2, [pc, #88]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ee6:	68d2      	ldr	r2, [r2, #12]
 8005ee8:	0a12      	lsrs	r2, r2, #8
 8005eea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	617b      	str	r3, [r7, #20]
      break;
 8005ef4:	e00c      	b.n	8005f10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ef6:	4a13      	ldr	r2, [pc, #76]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	4a10      	ldr	r2, [pc, #64]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f00:	68d2      	ldr	r2, [r2, #12]
 8005f02:	0a12      	lsrs	r2, r2, #8
 8005f04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f08:	fb02 f303 	mul.w	r3, r2, r3
 8005f0c:	617b      	str	r3, [r7, #20]
      break;
 8005f0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	0e5b      	lsrs	r3, r3, #25
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	e001      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f30:	693b      	ldr	r3, [r7, #16]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40021000 	.word	0x40021000
 8005f44:	00f42400 	.word	0x00f42400

08005f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f4c:	4b03      	ldr	r3, [pc, #12]	@ (8005f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000004 	.word	0x20000004

08005f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f64:	f7ff fff0 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4b06      	ldr	r3, [pc, #24]	@ (8005f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	4904      	ldr	r1, [pc, #16]	@ (8005f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f76:	5ccb      	ldrb	r3, [r1, r3]
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40021000 	.word	0x40021000
 8005f88:	0800b484 	.word	0x0800b484

08005f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f90:	f7ff ffda 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 8005f94:	4602      	mov	r2, r0
 8005f96:	4b06      	ldr	r3, [pc, #24]	@ (8005fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	0adb      	lsrs	r3, r3, #11
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	4904      	ldr	r1, [pc, #16]	@ (8005fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fa2:	5ccb      	ldrb	r3, [r1, r3]
 8005fa4:	f003 031f 	and.w	r3, r3, #31
 8005fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	0800b484 	.word	0x0800b484

08005fb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	091b      	lsrs	r3, r3, #4
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d10c      	bne.n	8005ff6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fdc:	4a17      	ldr	r2, [pc, #92]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe4:	4a14      	ldr	r2, [pc, #80]	@ (8006038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fe6:	68d2      	ldr	r2, [r2, #12]
 8005fe8:	0a12      	lsrs	r2, r2, #8
 8005fea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	617b      	str	r3, [r7, #20]
    break;
 8005ff4:	e00c      	b.n	8006010 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ff6:	4a11      	ldr	r2, [pc, #68]	@ (800603c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8006038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006000:	68d2      	ldr	r2, [r2, #12]
 8006002:	0a12      	lsrs	r2, r2, #8
 8006004:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006008:	fb02 f303 	mul.w	r3, r2, r3
 800600c:	617b      	str	r3, [r7, #20]
    break;
 800600e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006010:	4b09      	ldr	r3, [pc, #36]	@ (8006038 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	0e5b      	lsrs	r3, r3, #25
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	3301      	adds	r3, #1
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800602a:	687b      	ldr	r3, [r7, #4]
}
 800602c:	4618      	mov	r0, r3
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40021000 	.word	0x40021000
 800603c:	00f42400 	.word	0x00f42400

08006040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006048:	2300      	movs	r3, #0
 800604a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800604c:	2300      	movs	r3, #0
 800604e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8098 	beq.w	800618e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800605e:	2300      	movs	r3, #0
 8006060:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006062:	4b43      	ldr	r3, [pc, #268]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10d      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800606e:	4b40      	ldr	r3, [pc, #256]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006072:	4a3f      	ldr	r2, [pc, #252]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006078:	6593      	str	r3, [r2, #88]	@ 0x58
 800607a:	4b3d      	ldr	r3, [pc, #244]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800607c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006082:	60bb      	str	r3, [r7, #8]
 8006084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006086:	2301      	movs	r3, #1
 8006088:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800608a:	4b3a      	ldr	r3, [pc, #232]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a39      	ldr	r2, [pc, #228]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006096:	f7fc f8cb 	bl	8002230 <HAL_GetTick>
 800609a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800609c:	e009      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800609e:	f7fc f8c7 	bl	8002230 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d902      	bls.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	74fb      	strb	r3, [r7, #19]
        break;
 80060b0:	e005      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060b2:	4b30      	ldr	r3, [pc, #192]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0ef      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80060be:	7cfb      	ldrb	r3, [r7, #19]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d159      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01e      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d019      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060e0:	4b23      	ldr	r3, [pc, #140]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060ec:	4b20      	ldr	r3, [pc, #128]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800610c:	4a18      	ldr	r2, [pc, #96]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d016      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611e:	f7fc f887 	bl	8002230 <HAL_GetTick>
 8006122:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006124:	e00b      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006126:	f7fc f883 	bl	8002230 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006134:	4293      	cmp	r3, r2
 8006136:	d902      	bls.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	74fb      	strb	r3, [r7, #19]
            break;
 800613c:	e006      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800613e:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0ec      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800614c:	7cfb      	ldrb	r3, [r7, #19]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10b      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006152:	4b07      	ldr	r3, [pc, #28]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006158:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006160:	4903      	ldr	r1, [pc, #12]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006168:	e008      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800616a:	7cfb      	ldrb	r3, [r7, #19]
 800616c:	74bb      	strb	r3, [r7, #18]
 800616e:	e005      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006170:	40021000 	.word	0x40021000
 8006174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	7cfb      	ldrb	r3, [r7, #19]
 800617a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800617c:	7c7b      	ldrb	r3, [r7, #17]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d105      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006182:	4ba7      	ldr	r3, [pc, #668]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006186:	4aa6      	ldr	r2, [pc, #664]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800618c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800619a:	4ba1      	ldr	r3, [pc, #644]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a0:	f023 0203 	bic.w	r2, r3, #3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	499d      	ldr	r1, [pc, #628]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061bc:	4b98      	ldr	r3, [pc, #608]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c2:	f023 020c 	bic.w	r2, r3, #12
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	4995      	ldr	r1, [pc, #596]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061de:	4b90      	ldr	r3, [pc, #576]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	498c      	ldr	r1, [pc, #560]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006200:	4b87      	ldr	r3, [pc, #540]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006206:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	4984      	ldr	r1, [pc, #528]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006222:	4b7f      	ldr	r3, [pc, #508]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	497b      	ldr	r1, [pc, #492]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006244:	4b76      	ldr	r3, [pc, #472]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	4973      	ldr	r1, [pc, #460]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006254:	4313      	orrs	r3, r2
 8006256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006266:	4b6e      	ldr	r3, [pc, #440]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	496a      	ldr	r1, [pc, #424]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006288:	4b65      	ldr	r3, [pc, #404]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	4962      	ldr	r1, [pc, #392]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	4959      	ldr	r1, [pc, #356]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062cc:	4b54      	ldr	r3, [pc, #336]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062d2:	f023 0203 	bic.w	r2, r3, #3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	4951      	ldr	r1, [pc, #324]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	4948      	ldr	r1, [pc, #288]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800630c:	2b00      	cmp	r3, #0
 800630e:	d015      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006310:	4b43      	ldr	r3, [pc, #268]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800631e:	4940      	ldr	r1, [pc, #256]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800632e:	d105      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006330:	4b3b      	ldr	r3, [pc, #236]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4a3a      	ldr	r2, [pc, #232]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800633a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006344:	2b00      	cmp	r3, #0
 8006346:	d015      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006348:	4b35      	ldr	r3, [pc, #212]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006356:	4932      	ldr	r1, [pc, #200]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006366:	d105      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006368:	4b2d      	ldr	r3, [pc, #180]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4a2c      	ldr	r2, [pc, #176]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006372:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d015      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006380:	4b27      	ldr	r3, [pc, #156]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006386:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638e:	4924      	ldr	r1, [pc, #144]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800639e:	d105      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d015      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063b8:	4b19      	ldr	r3, [pc, #100]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c6:	4916      	ldr	r1, [pc, #88]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063d6:	d105      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063d8:	4b11      	ldr	r3, [pc, #68]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4a10      	ldr	r2, [pc, #64]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d019      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	4908      	ldr	r1, [pc, #32]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800640e:	d109      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006410:	4b03      	ldr	r3, [pc, #12]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4a02      	ldr	r2, [pc, #8]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800641a:	60d3      	str	r3, [r2, #12]
 800641c:	e002      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800641e:	bf00      	nop
 8006420:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d015      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006430:	4b29      	ldr	r3, [pc, #164]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006436:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	4926      	ldr	r1, [pc, #152]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800644e:	d105      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006450:	4b21      	ldr	r3, [pc, #132]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4a20      	ldr	r2, [pc, #128]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800645a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d015      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006468:	4b1b      	ldr	r3, [pc, #108]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006476:	4918      	ldr	r1, [pc, #96]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006486:	d105      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006488:	4b13      	ldr	r3, [pc, #76]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	4a12      	ldr	r2, [pc, #72]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800648e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006492:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d015      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064a0:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ae:	490a      	ldr	r1, [pc, #40]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064be:	d105      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064c0:	4b05      	ldr	r3, [pc, #20]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	4a04      	ldr	r2, [pc, #16]	@ (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80064cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40021000 	.word	0x40021000

080064dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e049      	b.n	8006582 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fb fbf0 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f000 fa76 	bl	8006a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e049      	b.n	8006630 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f841 	bl	8006638 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f000 fa1f 	bl	8006a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e041      	b.n	80066e4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f839 	bl	80066ec <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f000 f9bd 	bl	8006a0c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0208 	bic.w	r2, r2, #8
 80066a0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6819      	ldr	r1, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_TIM_OC_ConfigChannel+0x1e>
 800671a:	2302      	movs	r3, #2
 800671c:	e066      	b.n	80067ec <HAL_TIM_OC_ConfigChannel+0xec>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b14      	cmp	r3, #20
 800672a:	d857      	bhi.n	80067dc <HAL_TIM_OC_ConfigChannel+0xdc>
 800672c:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <HAL_TIM_OC_ConfigChannel+0x34>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006789 	.word	0x08006789
 8006738:	080067dd 	.word	0x080067dd
 800673c:	080067dd 	.word	0x080067dd
 8006740:	080067dd 	.word	0x080067dd
 8006744:	08006797 	.word	0x08006797
 8006748:	080067dd 	.word	0x080067dd
 800674c:	080067dd 	.word	0x080067dd
 8006750:	080067dd 	.word	0x080067dd
 8006754:	080067a5 	.word	0x080067a5
 8006758:	080067dd 	.word	0x080067dd
 800675c:	080067dd 	.word	0x080067dd
 8006760:	080067dd 	.word	0x080067dd
 8006764:	080067b3 	.word	0x080067b3
 8006768:	080067dd 	.word	0x080067dd
 800676c:	080067dd 	.word	0x080067dd
 8006770:	080067dd 	.word	0x080067dd
 8006774:	080067c1 	.word	0x080067c1
 8006778:	080067dd 	.word	0x080067dd
 800677c:	080067dd 	.word	0x080067dd
 8006780:	080067dd 	.word	0x080067dd
 8006784:	080067cf 	.word	0x080067cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 f9f0 	bl	8006b74 <TIM_OC1_SetConfig>
      break;
 8006794:	e025      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fa83 	bl	8006ca8 <TIM_OC2_SetConfig>
      break;
 80067a2:	e01e      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fb10 	bl	8006dd0 <TIM_OC3_SetConfig>
      break;
 80067b0:	e017      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fb9b 	bl	8006ef4 <TIM_OC4_SetConfig>
      break;
 80067be:	e010      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fc28 	bl	800701c <TIM_OC5_SetConfig>
      break;
 80067cc:	e009      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fc8b 	bl	80070f0 <TIM_OC6_SetConfig>
      break;
 80067da:	e002      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	75fb      	strb	r3, [r7, #23]
      break;
 80067e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_TIM_ConfigClockSource+0x1c>
 800680c:	2302      	movs	r3, #2
 800680e:	e0ee      	b.n	80069ee <HAL_TIM_ConfigClockSource+0x1fa>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800682e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800683a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a6b      	ldr	r2, [pc, #428]	@ (80069f8 <HAL_TIM_ConfigClockSource+0x204>)
 800684a:	4293      	cmp	r3, r2
 800684c:	f000 80b9 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006850:	4a69      	ldr	r2, [pc, #420]	@ (80069f8 <HAL_TIM_ConfigClockSource+0x204>)
 8006852:	4293      	cmp	r3, r2
 8006854:	f200 80be 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006858:	4a68      	ldr	r2, [pc, #416]	@ (80069fc <HAL_TIM_ConfigClockSource+0x208>)
 800685a:	4293      	cmp	r3, r2
 800685c:	f000 80b1 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006860:	4a66      	ldr	r2, [pc, #408]	@ (80069fc <HAL_TIM_ConfigClockSource+0x208>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f200 80b6 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006868:	4a65      	ldr	r2, [pc, #404]	@ (8006a00 <HAL_TIM_ConfigClockSource+0x20c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	f000 80a9 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006870:	4a63      	ldr	r2, [pc, #396]	@ (8006a00 <HAL_TIM_ConfigClockSource+0x20c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	f200 80ae 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006878:	4a62      	ldr	r2, [pc, #392]	@ (8006a04 <HAL_TIM_ConfigClockSource+0x210>)
 800687a:	4293      	cmp	r3, r2
 800687c:	f000 80a1 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006880:	4a60      	ldr	r2, [pc, #384]	@ (8006a04 <HAL_TIM_ConfigClockSource+0x210>)
 8006882:	4293      	cmp	r3, r2
 8006884:	f200 80a6 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006888:	4a5f      	ldr	r2, [pc, #380]	@ (8006a08 <HAL_TIM_ConfigClockSource+0x214>)
 800688a:	4293      	cmp	r3, r2
 800688c:	f000 8099 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006890:	4a5d      	ldr	r2, [pc, #372]	@ (8006a08 <HAL_TIM_ConfigClockSource+0x214>)
 8006892:	4293      	cmp	r3, r2
 8006894:	f200 809e 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006898:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800689c:	f000 8091 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 80068a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068a4:	f200 8096 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 80068a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068ac:	f000 8089 	beq.w	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 80068b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068b4:	f200 808e 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 80068b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068bc:	d03e      	beq.n	800693c <HAL_TIM_ConfigClockSource+0x148>
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068c2:	f200 8087 	bhi.w	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 80068c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ca:	f000 8086 	beq.w	80069da <HAL_TIM_ConfigClockSource+0x1e6>
 80068ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d2:	d87f      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 80068d4:	2b70      	cmp	r3, #112	@ 0x70
 80068d6:	d01a      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x11a>
 80068d8:	2b70      	cmp	r3, #112	@ 0x70
 80068da:	d87b      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 80068dc:	2b60      	cmp	r3, #96	@ 0x60
 80068de:	d050      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x18e>
 80068e0:	2b60      	cmp	r3, #96	@ 0x60
 80068e2:	d877      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 80068e4:	2b50      	cmp	r3, #80	@ 0x50
 80068e6:	d03c      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x16e>
 80068e8:	2b50      	cmp	r3, #80	@ 0x50
 80068ea:	d873      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 80068ec:	2b40      	cmp	r3, #64	@ 0x40
 80068ee:	d058      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d86f      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 80068f4:	2b30      	cmp	r3, #48	@ 0x30
 80068f6:	d064      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 80068f8:	2b30      	cmp	r3, #48	@ 0x30
 80068fa:	d86b      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d060      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006900:	2b20      	cmp	r3, #32
 8006902:	d867      	bhi.n	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d05c      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 8006908:	2b10      	cmp	r3, #16
 800690a:	d05a      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x1ce>
 800690c:	e062      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800691e:	f000 fccf 	bl	80072c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	609a      	str	r2, [r3, #8]
      break;
 800693a:	e04f      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800694c:	f000 fcb8 	bl	80072c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800695e:	609a      	str	r2, [r3, #8]
      break;
 8006960:	e03c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800696e:	461a      	mov	r2, r3
 8006970:	f000 fc2a 	bl	80071c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2150      	movs	r1, #80	@ 0x50
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fc83 	bl	8007286 <TIM_ITRx_SetConfig>
      break;
 8006980:	e02c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800698e:	461a      	mov	r2, r3
 8006990:	f000 fc49 	bl	8007226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2160      	movs	r1, #96	@ 0x60
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fc73 	bl	8007286 <TIM_ITRx_SetConfig>
      break;
 80069a0:	e01c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 fc0a 	bl	80071c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2140      	movs	r1, #64	@ 0x40
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fc63 	bl	8007286 <TIM_ITRx_SetConfig>
      break;
 80069c0:	e00c      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f000 fc5a 	bl	8007286 <TIM_ITRx_SetConfig>
      break;
 80069d2:	e003      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	e000      	b.n	80069dc <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80069da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	00100070 	.word	0x00100070
 80069fc:	00100050 	.word	0x00100050
 8006a00:	00100040 	.word	0x00100040
 8006a04:	00100030 	.word	0x00100030
 8006a08:	00100020 	.word	0x00100020

08006a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8006b50 <TIM_Base_SetConfig+0x144>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d017      	beq.n	8006a54 <TIM_Base_SetConfig+0x48>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2a:	d013      	beq.n	8006a54 <TIM_Base_SetConfig+0x48>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a49      	ldr	r2, [pc, #292]	@ (8006b54 <TIM_Base_SetConfig+0x148>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00f      	beq.n	8006a54 <TIM_Base_SetConfig+0x48>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a48      	ldr	r2, [pc, #288]	@ (8006b58 <TIM_Base_SetConfig+0x14c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00b      	beq.n	8006a54 <TIM_Base_SetConfig+0x48>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a47      	ldr	r2, [pc, #284]	@ (8006b5c <TIM_Base_SetConfig+0x150>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_Base_SetConfig+0x48>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a46      	ldr	r2, [pc, #280]	@ (8006b60 <TIM_Base_SetConfig+0x154>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_Base_SetConfig+0x48>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a45      	ldr	r2, [pc, #276]	@ (8006b64 <TIM_Base_SetConfig+0x158>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d108      	bne.n	8006a66 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a39      	ldr	r2, [pc, #228]	@ (8006b50 <TIM_Base_SetConfig+0x144>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d023      	beq.n	8006ab6 <TIM_Base_SetConfig+0xaa>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a74:	d01f      	beq.n	8006ab6 <TIM_Base_SetConfig+0xaa>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a36      	ldr	r2, [pc, #216]	@ (8006b54 <TIM_Base_SetConfig+0x148>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01b      	beq.n	8006ab6 <TIM_Base_SetConfig+0xaa>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a35      	ldr	r2, [pc, #212]	@ (8006b58 <TIM_Base_SetConfig+0x14c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d017      	beq.n	8006ab6 <TIM_Base_SetConfig+0xaa>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a34      	ldr	r2, [pc, #208]	@ (8006b5c <TIM_Base_SetConfig+0x150>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <TIM_Base_SetConfig+0xaa>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a33      	ldr	r2, [pc, #204]	@ (8006b60 <TIM_Base_SetConfig+0x154>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00f      	beq.n	8006ab6 <TIM_Base_SetConfig+0xaa>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a33      	ldr	r2, [pc, #204]	@ (8006b68 <TIM_Base_SetConfig+0x15c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00b      	beq.n	8006ab6 <TIM_Base_SetConfig+0xaa>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a32      	ldr	r2, [pc, #200]	@ (8006b6c <TIM_Base_SetConfig+0x160>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d007      	beq.n	8006ab6 <TIM_Base_SetConfig+0xaa>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a31      	ldr	r2, [pc, #196]	@ (8006b70 <TIM_Base_SetConfig+0x164>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d003      	beq.n	8006ab6 <TIM_Base_SetConfig+0xaa>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8006b64 <TIM_Base_SetConfig+0x158>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d108      	bne.n	8006ac8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a18      	ldr	r2, [pc, #96]	@ (8006b50 <TIM_Base_SetConfig+0x144>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d013      	beq.n	8006b1c <TIM_Base_SetConfig+0x110>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b60 <TIM_Base_SetConfig+0x154>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00f      	beq.n	8006b1c <TIM_Base_SetConfig+0x110>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a1a      	ldr	r2, [pc, #104]	@ (8006b68 <TIM_Base_SetConfig+0x15c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00b      	beq.n	8006b1c <TIM_Base_SetConfig+0x110>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a19      	ldr	r2, [pc, #100]	@ (8006b6c <TIM_Base_SetConfig+0x160>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d007      	beq.n	8006b1c <TIM_Base_SetConfig+0x110>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a18      	ldr	r2, [pc, #96]	@ (8006b70 <TIM_Base_SetConfig+0x164>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_Base_SetConfig+0x110>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a13      	ldr	r2, [pc, #76]	@ (8006b64 <TIM_Base_SetConfig+0x158>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d103      	bne.n	8006b24 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d105      	bne.n	8006b42 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f023 0201 	bic.w	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	611a      	str	r2, [r3, #16]
  }
}
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40012c00 	.word	0x40012c00
 8006b54:	40000400 	.word	0x40000400
 8006b58:	40000800 	.word	0x40000800
 8006b5c:	40000c00 	.word	0x40000c00
 8006b60:	40013400 	.word	0x40013400
 8006b64:	40015000 	.word	0x40015000
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40014400 	.word	0x40014400
 8006b70:	40014800 	.word	0x40014800

08006b74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f023 0201 	bic.w	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f023 0302 	bic.w	r3, r3, #2
 8006bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a30      	ldr	r2, [pc, #192]	@ (8006c90 <TIM_OC1_SetConfig+0x11c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d013      	beq.n	8006bfc <TIM_OC1_SetConfig+0x88>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8006c94 <TIM_OC1_SetConfig+0x120>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00f      	beq.n	8006bfc <TIM_OC1_SetConfig+0x88>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a2e      	ldr	r2, [pc, #184]	@ (8006c98 <TIM_OC1_SetConfig+0x124>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <TIM_OC1_SetConfig+0x88>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a2d      	ldr	r2, [pc, #180]	@ (8006c9c <TIM_OC1_SetConfig+0x128>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d007      	beq.n	8006bfc <TIM_OC1_SetConfig+0x88>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca0 <TIM_OC1_SetConfig+0x12c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_OC1_SetConfig+0x88>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8006ca4 <TIM_OC1_SetConfig+0x130>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d10c      	bne.n	8006c16 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f023 0308 	bic.w	r3, r3, #8
 8006c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f023 0304 	bic.w	r3, r3, #4
 8006c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a1d      	ldr	r2, [pc, #116]	@ (8006c90 <TIM_OC1_SetConfig+0x11c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d013      	beq.n	8006c46 <TIM_OC1_SetConfig+0xd2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a1c      	ldr	r2, [pc, #112]	@ (8006c94 <TIM_OC1_SetConfig+0x120>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00f      	beq.n	8006c46 <TIM_OC1_SetConfig+0xd2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a1b      	ldr	r2, [pc, #108]	@ (8006c98 <TIM_OC1_SetConfig+0x124>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00b      	beq.n	8006c46 <TIM_OC1_SetConfig+0xd2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a1a      	ldr	r2, [pc, #104]	@ (8006c9c <TIM_OC1_SetConfig+0x128>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d007      	beq.n	8006c46 <TIM_OC1_SetConfig+0xd2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a19      	ldr	r2, [pc, #100]	@ (8006ca0 <TIM_OC1_SetConfig+0x12c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d003      	beq.n	8006c46 <TIM_OC1_SetConfig+0xd2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a18      	ldr	r2, [pc, #96]	@ (8006ca4 <TIM_OC1_SetConfig+0x130>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d111      	bne.n	8006c6a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	621a      	str	r2, [r3, #32]
}
 8006c84:	bf00      	nop
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	40012c00 	.word	0x40012c00
 8006c94:	40013400 	.word	0x40013400
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40014400 	.word	0x40014400
 8006ca0:	40014800 	.word	0x40014800
 8006ca4:	40015000 	.word	0x40015000

08006ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f023 0210 	bic.w	r2, r3, #16
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f023 0320 	bic.w	r3, r3, #32
 8006cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a2c      	ldr	r2, [pc, #176]	@ (8006db8 <TIM_OC2_SetConfig+0x110>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <TIM_OC2_SetConfig+0x74>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8006dbc <TIM_OC2_SetConfig+0x114>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_OC2_SetConfig+0x74>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc0 <TIM_OC2_SetConfig+0x118>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d10d      	bne.n	8006d38 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006db8 <TIM_OC2_SetConfig+0x110>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <TIM_OC2_SetConfig+0xc0>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a1e      	ldr	r2, [pc, #120]	@ (8006dbc <TIM_OC2_SetConfig+0x114>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00f      	beq.n	8006d68 <TIM_OC2_SetConfig+0xc0>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <TIM_OC2_SetConfig+0x11c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00b      	beq.n	8006d68 <TIM_OC2_SetConfig+0xc0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc8 <TIM_OC2_SetConfig+0x120>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d007      	beq.n	8006d68 <TIM_OC2_SetConfig+0xc0>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dcc <TIM_OC2_SetConfig+0x124>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_OC2_SetConfig+0xc0>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a17      	ldr	r2, [pc, #92]	@ (8006dc0 <TIM_OC2_SetConfig+0x118>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d113      	bne.n	8006d90 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40012c00 	.word	0x40012c00
 8006dbc:	40013400 	.word	0x40013400
 8006dc0:	40015000 	.word	0x40015000
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	40014400 	.word	0x40014400
 8006dcc:	40014800 	.word	0x40014800

08006dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	021b      	lsls	r3, r3, #8
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006edc <TIM_OC3_SetConfig+0x10c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d007      	beq.n	8006e42 <TIM_OC3_SetConfig+0x72>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a2a      	ldr	r2, [pc, #168]	@ (8006ee0 <TIM_OC3_SetConfig+0x110>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d003      	beq.n	8006e42 <TIM_OC3_SetConfig+0x72>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a29      	ldr	r2, [pc, #164]	@ (8006ee4 <TIM_OC3_SetConfig+0x114>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d10d      	bne.n	8006e5e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a1e      	ldr	r2, [pc, #120]	@ (8006edc <TIM_OC3_SetConfig+0x10c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <TIM_OC3_SetConfig+0xbe>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee0 <TIM_OC3_SetConfig+0x110>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00f      	beq.n	8006e8e <TIM_OC3_SetConfig+0xbe>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ee8 <TIM_OC3_SetConfig+0x118>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00b      	beq.n	8006e8e <TIM_OC3_SetConfig+0xbe>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a1c      	ldr	r2, [pc, #112]	@ (8006eec <TIM_OC3_SetConfig+0x11c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d007      	beq.n	8006e8e <TIM_OC3_SetConfig+0xbe>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1b      	ldr	r2, [pc, #108]	@ (8006ef0 <TIM_OC3_SetConfig+0x120>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_OC3_SetConfig+0xbe>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a16      	ldr	r2, [pc, #88]	@ (8006ee4 <TIM_OC3_SetConfig+0x114>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d113      	bne.n	8006eb6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	621a      	str	r2, [r3, #32]
}
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40013400 	.word	0x40013400
 8006ee4:	40015000 	.word	0x40015000
 8006ee8:	40014000 	.word	0x40014000
 8006eec:	40014400 	.word	0x40014400
 8006ef0:	40014800 	.word	0x40014800

08006ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	031b      	lsls	r3, r3, #12
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a2c      	ldr	r2, [pc, #176]	@ (8007004 <TIM_OC4_SetConfig+0x110>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d007      	beq.n	8006f68 <TIM_OC4_SetConfig+0x74>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8007008 <TIM_OC4_SetConfig+0x114>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_OC4_SetConfig+0x74>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a2a      	ldr	r2, [pc, #168]	@ (800700c <TIM_OC4_SetConfig+0x118>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d10d      	bne.n	8006f84 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	031b      	lsls	r3, r3, #12
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a1f      	ldr	r2, [pc, #124]	@ (8007004 <TIM_OC4_SetConfig+0x110>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d013      	beq.n	8006fb4 <TIM_OC4_SetConfig+0xc0>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007008 <TIM_OC4_SetConfig+0x114>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00f      	beq.n	8006fb4 <TIM_OC4_SetConfig+0xc0>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a1e      	ldr	r2, [pc, #120]	@ (8007010 <TIM_OC4_SetConfig+0x11c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00b      	beq.n	8006fb4 <TIM_OC4_SetConfig+0xc0>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007014 <TIM_OC4_SetConfig+0x120>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d007      	beq.n	8006fb4 <TIM_OC4_SetConfig+0xc0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8007018 <TIM_OC4_SetConfig+0x124>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d003      	beq.n	8006fb4 <TIM_OC4_SetConfig+0xc0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a17      	ldr	r2, [pc, #92]	@ (800700c <TIM_OC4_SetConfig+0x118>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d113      	bne.n	8006fdc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006fc2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	019b      	lsls	r3, r3, #6
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	019b      	lsls	r3, r3, #6
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40012c00 	.word	0x40012c00
 8007008:	40013400 	.word	0x40013400
 800700c:	40015000 	.word	0x40015000
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800

0800701c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800704a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007060:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	041b      	lsls	r3, r3, #16
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a19      	ldr	r2, [pc, #100]	@ (80070d8 <TIM_OC5_SetConfig+0xbc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <TIM_OC5_SetConfig+0x82>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a18      	ldr	r2, [pc, #96]	@ (80070dc <TIM_OC5_SetConfig+0xc0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00f      	beq.n	800709e <TIM_OC5_SetConfig+0x82>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a17      	ldr	r2, [pc, #92]	@ (80070e0 <TIM_OC5_SetConfig+0xc4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00b      	beq.n	800709e <TIM_OC5_SetConfig+0x82>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a16      	ldr	r2, [pc, #88]	@ (80070e4 <TIM_OC5_SetConfig+0xc8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d007      	beq.n	800709e <TIM_OC5_SetConfig+0x82>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a15      	ldr	r2, [pc, #84]	@ (80070e8 <TIM_OC5_SetConfig+0xcc>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_OC5_SetConfig+0x82>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a14      	ldr	r2, [pc, #80]	@ (80070ec <TIM_OC5_SetConfig+0xd0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d109      	bne.n	80070b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	621a      	str	r2, [r3, #32]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800
 80070ec:	40015000 	.word	0x40015000

080070f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800711e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	051b      	lsls	r3, r3, #20
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a1a      	ldr	r2, [pc, #104]	@ (80071b0 <TIM_OC6_SetConfig+0xc0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d013      	beq.n	8007174 <TIM_OC6_SetConfig+0x84>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a19      	ldr	r2, [pc, #100]	@ (80071b4 <TIM_OC6_SetConfig+0xc4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00f      	beq.n	8007174 <TIM_OC6_SetConfig+0x84>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a18      	ldr	r2, [pc, #96]	@ (80071b8 <TIM_OC6_SetConfig+0xc8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00b      	beq.n	8007174 <TIM_OC6_SetConfig+0x84>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a17      	ldr	r2, [pc, #92]	@ (80071bc <TIM_OC6_SetConfig+0xcc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d007      	beq.n	8007174 <TIM_OC6_SetConfig+0x84>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a16      	ldr	r2, [pc, #88]	@ (80071c0 <TIM_OC6_SetConfig+0xd0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC6_SetConfig+0x84>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a15      	ldr	r2, [pc, #84]	@ (80071c4 <TIM_OC6_SetConfig+0xd4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d109      	bne.n	8007188 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800717a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	621a      	str	r2, [r3, #32]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40013400 	.word	0x40013400
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800
 80071c4:	40015000 	.word	0x40015000

080071c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0201 	bic.w	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f023 030a 	bic.w	r3, r3, #10
 8007204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007226:	b480      	push	{r7}
 8007228:	b087      	sub	sp, #28
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f023 0210 	bic.w	r2, r3, #16
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	031b      	lsls	r3, r3, #12
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	621a      	str	r2, [r3, #32]
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007286:	b480      	push	{r7}
 8007288:	b085      	sub	sp, #20
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800729c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f043 0307 	orr.w	r3, r3, #7
 80072ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	609a      	str	r2, [r3, #8]
}
 80072b4:	bf00      	nop
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	021a      	lsls	r2, r3, #8
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	609a      	str	r2, [r3, #8]
}
 80072f4:	bf00      	nop
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007314:	2302      	movs	r3, #2
 8007316:	e074      	b.n	8007402 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a34      	ldr	r2, [pc, #208]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d009      	beq.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a33      	ldr	r2, [pc, #204]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d004      	beq.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a31      	ldr	r2, [pc, #196]	@ (8007418 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d108      	bne.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800735c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800736e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a21      	ldr	r2, [pc, #132]	@ (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d022      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007398:	d01d      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a1f      	ldr	r2, [pc, #124]	@ (800741c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d018      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d013      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00e      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a15      	ldr	r2, [pc, #84]	@ (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d009      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a18      	ldr	r2, [pc, #96]	@ (8007428 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a11      	ldr	r2, [pc, #68]	@ (8007418 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d10c      	bne.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40012c00 	.word	0x40012c00
 8007414:	40013400 	.word	0x40013400
 8007418:	40015000 	.word	0x40015000
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40000c00 	.word	0x40000c00
 8007428:	40014000 	.word	0x40014000

0800742c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e042      	b.n	80074c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007444:	2b00      	cmp	r3, #0
 8007446:	d106      	bne.n	8007456 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7fa fc9d 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2224      	movs	r2, #36	@ 0x24
 800745a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0201 	bic.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fc28 	bl	8007ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f929 	bl	80076d4 <UART_SetConfig>
 8007482:	4603      	mov	r3, r0
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e01b      	b.n	80074c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800749a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fca7 	bl	8007e10 <UART_CheckIdleState>
 80074c2:	4603      	mov	r3, r0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	@ 0x28
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d17b      	bne.n	80075de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <HAL_UART_Transmit+0x26>
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e074      	b.n	80075e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2221      	movs	r2, #33	@ 0x21
 8007502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007506:	f7fa fe93 	bl	8002230 <HAL_GetTick>
 800750a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	88fa      	ldrh	r2, [r7, #6]
 8007510:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	88fa      	ldrh	r2, [r7, #6]
 8007518:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007524:	d108      	bne.n	8007538 <HAL_UART_Transmit+0x6c>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	e003      	b.n	8007540 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800753c:	2300      	movs	r3, #0
 800753e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007540:	e030      	b.n	80075a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	2180      	movs	r1, #128	@ 0x80
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fd09 	bl	8007f64 <UART_WaitOnFlagUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e03d      	b.n	80075e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10b      	bne.n	8007582 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007578:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	3302      	adds	r3, #2
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	e007      	b.n	8007592 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	781a      	ldrb	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	3301      	adds	r3, #1
 8007590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1c8      	bne.n	8007542 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2200      	movs	r2, #0
 80075b8:	2140      	movs	r1, #64	@ 0x40
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fcd2 	bl	8007f64 <UART_WaitOnFlagUntilTimeout>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e006      	b.n	80075e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	e000      	b.n	80075e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075de:	2302      	movs	r3, #2
  }
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	@ 0x28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d137      	bne.n	8007670 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_UART_Receive_DMA+0x24>
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e030      	b.n	8007672 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a18      	ldr	r2, [pc, #96]	@ (800767c <HAL_UART_Receive_DMA+0x94>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d01f      	beq.n	8007660 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d018      	beq.n	8007660 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	613b      	str	r3, [r7, #16]
   return(result);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007642:	627b      	str	r3, [r7, #36]	@ 0x24
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	623b      	str	r3, [r7, #32]
 800764e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	69f9      	ldr	r1, [r7, #28]
 8007652:	6a3a      	ldr	r2, [r7, #32]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	61bb      	str	r3, [r7, #24]
   return(result);
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e6      	bne.n	800762e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	461a      	mov	r2, r3
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fcea 	bl	8008040 <UART_Start_Receive_DMA>
 800766c:	4603      	mov	r3, r0
 800766e:	e000      	b.n	8007672 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3728      	adds	r7, #40	@ 0x28
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40008000 	.word	0x40008000

08007680 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d8:	b08c      	sub	sp, #48	@ 0x30
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	431a      	orrs	r2, r3
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4baa      	ldr	r3, [pc, #680]	@ (80079ac <UART_SetConfig+0x2d8>)
 8007704:	4013      	ands	r3, r2
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800770c:	430b      	orrs	r3, r1
 800770e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a9f      	ldr	r2, [pc, #636]	@ (80079b0 <UART_SetConfig+0x2dc>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d004      	beq.n	8007740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800773c:	4313      	orrs	r3, r2
 800773e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800774a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007754:	430b      	orrs	r3, r1
 8007756:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775e:	f023 010f 	bic.w	r1, r3, #15
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a90      	ldr	r2, [pc, #576]	@ (80079b4 <UART_SetConfig+0x2e0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d125      	bne.n	80077c4 <UART_SetConfig+0xf0>
 8007778:	4b8f      	ldr	r3, [pc, #572]	@ (80079b8 <UART_SetConfig+0x2e4>)
 800777a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	2b03      	cmp	r3, #3
 8007784:	d81a      	bhi.n	80077bc <UART_SetConfig+0xe8>
 8007786:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <UART_SetConfig+0xb8>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	0800779d 	.word	0x0800779d
 8007790:	080077ad 	.word	0x080077ad
 8007794:	080077a5 	.word	0x080077a5
 8007798:	080077b5 	.word	0x080077b5
 800779c:	2301      	movs	r3, #1
 800779e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a2:	e116      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80077a4:	2302      	movs	r3, #2
 80077a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077aa:	e112      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80077ac:	2304      	movs	r3, #4
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b2:	e10e      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80077b4:	2308      	movs	r3, #8
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ba:	e10a      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80077bc:	2310      	movs	r3, #16
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c2:	e106      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a7c      	ldr	r2, [pc, #496]	@ (80079bc <UART_SetConfig+0x2e8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d138      	bne.n	8007840 <UART_SetConfig+0x16c>
 80077ce:	4b7a      	ldr	r3, [pc, #488]	@ (80079b8 <UART_SetConfig+0x2e4>)
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d4:	f003 030c 	and.w	r3, r3, #12
 80077d8:	2b0c      	cmp	r3, #12
 80077da:	d82d      	bhi.n	8007838 <UART_SetConfig+0x164>
 80077dc:	a201      	add	r2, pc, #4	@ (adr r2, 80077e4 <UART_SetConfig+0x110>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	08007819 	.word	0x08007819
 80077e8:	08007839 	.word	0x08007839
 80077ec:	08007839 	.word	0x08007839
 80077f0:	08007839 	.word	0x08007839
 80077f4:	08007829 	.word	0x08007829
 80077f8:	08007839 	.word	0x08007839
 80077fc:	08007839 	.word	0x08007839
 8007800:	08007839 	.word	0x08007839
 8007804:	08007821 	.word	0x08007821
 8007808:	08007839 	.word	0x08007839
 800780c:	08007839 	.word	0x08007839
 8007810:	08007839 	.word	0x08007839
 8007814:	08007831 	.word	0x08007831
 8007818:	2300      	movs	r3, #0
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781e:	e0d8      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007820:	2302      	movs	r3, #2
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007826:	e0d4      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007828:	2304      	movs	r3, #4
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800782e:	e0d0      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007830:	2308      	movs	r3, #8
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007836:	e0cc      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007838:	2310      	movs	r3, #16
 800783a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800783e:	e0c8      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a5e      	ldr	r2, [pc, #376]	@ (80079c0 <UART_SetConfig+0x2ec>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d125      	bne.n	8007896 <UART_SetConfig+0x1c2>
 800784a:	4b5b      	ldr	r3, [pc, #364]	@ (80079b8 <UART_SetConfig+0x2e4>)
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007850:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007854:	2b30      	cmp	r3, #48	@ 0x30
 8007856:	d016      	beq.n	8007886 <UART_SetConfig+0x1b2>
 8007858:	2b30      	cmp	r3, #48	@ 0x30
 800785a:	d818      	bhi.n	800788e <UART_SetConfig+0x1ba>
 800785c:	2b20      	cmp	r3, #32
 800785e:	d00a      	beq.n	8007876 <UART_SetConfig+0x1a2>
 8007860:	2b20      	cmp	r3, #32
 8007862:	d814      	bhi.n	800788e <UART_SetConfig+0x1ba>
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <UART_SetConfig+0x19a>
 8007868:	2b10      	cmp	r3, #16
 800786a:	d008      	beq.n	800787e <UART_SetConfig+0x1aa>
 800786c:	e00f      	b.n	800788e <UART_SetConfig+0x1ba>
 800786e:	2300      	movs	r3, #0
 8007870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007874:	e0ad      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007876:	2302      	movs	r3, #2
 8007878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787c:	e0a9      	b.n	80079d2 <UART_SetConfig+0x2fe>
 800787e:	2304      	movs	r3, #4
 8007880:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007884:	e0a5      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007886:	2308      	movs	r3, #8
 8007888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788c:	e0a1      	b.n	80079d2 <UART_SetConfig+0x2fe>
 800788e:	2310      	movs	r3, #16
 8007890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007894:	e09d      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a4a      	ldr	r2, [pc, #296]	@ (80079c4 <UART_SetConfig+0x2f0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d125      	bne.n	80078ec <UART_SetConfig+0x218>
 80078a0:	4b45      	ldr	r3, [pc, #276]	@ (80079b8 <UART_SetConfig+0x2e4>)
 80078a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80078aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80078ac:	d016      	beq.n	80078dc <UART_SetConfig+0x208>
 80078ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80078b0:	d818      	bhi.n	80078e4 <UART_SetConfig+0x210>
 80078b2:	2b80      	cmp	r3, #128	@ 0x80
 80078b4:	d00a      	beq.n	80078cc <UART_SetConfig+0x1f8>
 80078b6:	2b80      	cmp	r3, #128	@ 0x80
 80078b8:	d814      	bhi.n	80078e4 <UART_SetConfig+0x210>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <UART_SetConfig+0x1f0>
 80078be:	2b40      	cmp	r3, #64	@ 0x40
 80078c0:	d008      	beq.n	80078d4 <UART_SetConfig+0x200>
 80078c2:	e00f      	b.n	80078e4 <UART_SetConfig+0x210>
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ca:	e082      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80078cc:	2302      	movs	r3, #2
 80078ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d2:	e07e      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80078d4:	2304      	movs	r3, #4
 80078d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078da:	e07a      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80078dc:	2308      	movs	r3, #8
 80078de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e2:	e076      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80078e4:	2310      	movs	r3, #16
 80078e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ea:	e072      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a35      	ldr	r2, [pc, #212]	@ (80079c8 <UART_SetConfig+0x2f4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d12a      	bne.n	800794c <UART_SetConfig+0x278>
 80078f6:	4b30      	ldr	r3, [pc, #192]	@ (80079b8 <UART_SetConfig+0x2e4>)
 80078f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007900:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007904:	d01a      	beq.n	800793c <UART_SetConfig+0x268>
 8007906:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800790a:	d81b      	bhi.n	8007944 <UART_SetConfig+0x270>
 800790c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007910:	d00c      	beq.n	800792c <UART_SetConfig+0x258>
 8007912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007916:	d815      	bhi.n	8007944 <UART_SetConfig+0x270>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <UART_SetConfig+0x250>
 800791c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007920:	d008      	beq.n	8007934 <UART_SetConfig+0x260>
 8007922:	e00f      	b.n	8007944 <UART_SetConfig+0x270>
 8007924:	2300      	movs	r3, #0
 8007926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792a:	e052      	b.n	80079d2 <UART_SetConfig+0x2fe>
 800792c:	2302      	movs	r3, #2
 800792e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007932:	e04e      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007934:	2304      	movs	r3, #4
 8007936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793a:	e04a      	b.n	80079d2 <UART_SetConfig+0x2fe>
 800793c:	2308      	movs	r3, #8
 800793e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007942:	e046      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800794a:	e042      	b.n	80079d2 <UART_SetConfig+0x2fe>
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a17      	ldr	r2, [pc, #92]	@ (80079b0 <UART_SetConfig+0x2dc>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d13a      	bne.n	80079cc <UART_SetConfig+0x2f8>
 8007956:	4b18      	ldr	r3, [pc, #96]	@ (80079b8 <UART_SetConfig+0x2e4>)
 8007958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800795c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007960:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007964:	d01a      	beq.n	800799c <UART_SetConfig+0x2c8>
 8007966:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800796a:	d81b      	bhi.n	80079a4 <UART_SetConfig+0x2d0>
 800796c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007970:	d00c      	beq.n	800798c <UART_SetConfig+0x2b8>
 8007972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007976:	d815      	bhi.n	80079a4 <UART_SetConfig+0x2d0>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <UART_SetConfig+0x2b0>
 800797c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007980:	d008      	beq.n	8007994 <UART_SetConfig+0x2c0>
 8007982:	e00f      	b.n	80079a4 <UART_SetConfig+0x2d0>
 8007984:	2300      	movs	r3, #0
 8007986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800798a:	e022      	b.n	80079d2 <UART_SetConfig+0x2fe>
 800798c:	2302      	movs	r3, #2
 800798e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007992:	e01e      	b.n	80079d2 <UART_SetConfig+0x2fe>
 8007994:	2304      	movs	r3, #4
 8007996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799a:	e01a      	b.n	80079d2 <UART_SetConfig+0x2fe>
 800799c:	2308      	movs	r3, #8
 800799e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a2:	e016      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80079a4:	2310      	movs	r3, #16
 80079a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079aa:	e012      	b.n	80079d2 <UART_SetConfig+0x2fe>
 80079ac:	cfff69f3 	.word	0xcfff69f3
 80079b0:	40008000 	.word	0x40008000
 80079b4:	40013800 	.word	0x40013800
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40004400 	.word	0x40004400
 80079c0:	40004800 	.word	0x40004800
 80079c4:	40004c00 	.word	0x40004c00
 80079c8:	40005000 	.word	0x40005000
 80079cc:	2310      	movs	r3, #16
 80079ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4aae      	ldr	r2, [pc, #696]	@ (8007c90 <UART_SetConfig+0x5bc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	f040 8097 	bne.w	8007b0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079e2:	2b08      	cmp	r3, #8
 80079e4:	d823      	bhi.n	8007a2e <UART_SetConfig+0x35a>
 80079e6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ec <UART_SetConfig+0x318>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a2f 	.word	0x08007a2f
 80079f4:	08007a19 	.word	0x08007a19
 80079f8:	08007a2f 	.word	0x08007a2f
 80079fc:	08007a1f 	.word	0x08007a1f
 8007a00:	08007a2f 	.word	0x08007a2f
 8007a04:	08007a2f 	.word	0x08007a2f
 8007a08:	08007a2f 	.word	0x08007a2f
 8007a0c:	08007a27 	.word	0x08007a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a10:	f7fe faa6 	bl	8005f60 <HAL_RCC_GetPCLK1Freq>
 8007a14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a16:	e010      	b.n	8007a3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a18:	4b9e      	ldr	r3, [pc, #632]	@ (8007c94 <UART_SetConfig+0x5c0>)
 8007a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a1c:	e00d      	b.n	8007a3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a1e:	f7fe fa33 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8007a22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a24:	e009      	b.n	8007a3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a2c:	e005      	b.n	8007a3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8130 	beq.w	8007ca2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a46:	4a94      	ldr	r2, [pc, #592]	@ (8007c98 <UART_SetConfig+0x5c4>)
 8007a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	4413      	add	r3, r2
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d305      	bcc.n	8007a72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d903      	bls.n	8007a7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a78:	e113      	b.n	8007ca2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	60bb      	str	r3, [r7, #8]
 8007a80:	60fa      	str	r2, [r7, #12]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a86:	4a84      	ldr	r2, [pc, #528]	@ (8007c98 <UART_SetConfig+0x5c4>)
 8007a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2200      	movs	r2, #0
 8007a90:	603b      	str	r3, [r7, #0]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a9c:	f7f9 f8ac 	bl	8000bf8 <__aeabi_uldivmod>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	020b      	lsls	r3, r1, #8
 8007ab2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ab6:	0202      	lsls	r2, r0, #8
 8007ab8:	6979      	ldr	r1, [r7, #20]
 8007aba:	6849      	ldr	r1, [r1, #4]
 8007abc:	0849      	lsrs	r1, r1, #1
 8007abe:	2000      	movs	r0, #0
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	eb12 0804 	adds.w	r8, r2, r4
 8007ac8:	eb43 0905 	adc.w	r9, r3, r5
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	469a      	mov	sl, r3
 8007ad4:	4693      	mov	fp, r2
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	465b      	mov	r3, fp
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	f7f9 f88b 	bl	8000bf8 <__aeabi_uldivmod>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007af0:	d308      	bcc.n	8007b04 <UART_SetConfig+0x430>
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af8:	d204      	bcs.n	8007b04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6a3a      	ldr	r2, [r7, #32]
 8007b00:	60da      	str	r2, [r3, #12]
 8007b02:	e0ce      	b.n	8007ca2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b0a:	e0ca      	b.n	8007ca2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b14:	d166      	bne.n	8007be4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007b16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d827      	bhi.n	8007b6e <UART_SetConfig+0x49a>
 8007b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <UART_SetConfig+0x450>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b49 	.word	0x08007b49
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b59 	.word	0x08007b59
 8007b30:	08007b6f 	.word	0x08007b6f
 8007b34:	08007b5f 	.word	0x08007b5f
 8007b38:	08007b6f 	.word	0x08007b6f
 8007b3c:	08007b6f 	.word	0x08007b6f
 8007b40:	08007b6f 	.word	0x08007b6f
 8007b44:	08007b67 	.word	0x08007b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b48:	f7fe fa0a 	bl	8005f60 <HAL_RCC_GetPCLK1Freq>
 8007b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b4e:	e014      	b.n	8007b7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b50:	f7fe fa1c 	bl	8005f8c <HAL_RCC_GetPCLK2Freq>
 8007b54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b56:	e010      	b.n	8007b7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b58:	4b4e      	ldr	r3, [pc, #312]	@ (8007c94 <UART_SetConfig+0x5c0>)
 8007b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b5c:	e00d      	b.n	8007b7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b5e:	f7fe f993 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8007b62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b64:	e009      	b.n	8007b7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b6c:	e005      	b.n	8007b7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8090 	beq.w	8007ca2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b86:	4a44      	ldr	r2, [pc, #272]	@ (8007c98 <UART_SetConfig+0x5c4>)
 8007b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b94:	005a      	lsls	r2, r3, #1
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	085b      	lsrs	r3, r3, #1
 8007b9c:	441a      	add	r2, r3
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	2b0f      	cmp	r3, #15
 8007bac:	d916      	bls.n	8007bdc <UART_SetConfig+0x508>
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb4:	d212      	bcs.n	8007bdc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f023 030f 	bic.w	r3, r3, #15
 8007bbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	8bfb      	ldrh	r3, [r7, #30]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	8bfa      	ldrh	r2, [r7, #30]
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	e062      	b.n	8007ca2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007be2:	e05e      	b.n	8007ca2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007be4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d828      	bhi.n	8007c3e <UART_SetConfig+0x56a>
 8007bec:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf4 <UART_SetConfig+0x520>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c19 	.word	0x08007c19
 8007bf8:	08007c21 	.word	0x08007c21
 8007bfc:	08007c29 	.word	0x08007c29
 8007c00:	08007c3f 	.word	0x08007c3f
 8007c04:	08007c2f 	.word	0x08007c2f
 8007c08:	08007c3f 	.word	0x08007c3f
 8007c0c:	08007c3f 	.word	0x08007c3f
 8007c10:	08007c3f 	.word	0x08007c3f
 8007c14:	08007c37 	.word	0x08007c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c18:	f7fe f9a2 	bl	8005f60 <HAL_RCC_GetPCLK1Freq>
 8007c1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c1e:	e014      	b.n	8007c4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c20:	f7fe f9b4 	bl	8005f8c <HAL_RCC_GetPCLK2Freq>
 8007c24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c26:	e010      	b.n	8007c4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c28:	4b1a      	ldr	r3, [pc, #104]	@ (8007c94 <UART_SetConfig+0x5c0>)
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c2c:	e00d      	b.n	8007c4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2e:	f7fe f92b 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8007c32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c34:	e009      	b.n	8007c4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c3c:	e005      	b.n	8007c4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c48:	bf00      	nop
    }

    if (pclk != 0U)
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d028      	beq.n	8007ca2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c54:	4a10      	ldr	r2, [pc, #64]	@ (8007c98 <UART_SetConfig+0x5c4>)
 8007c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	441a      	add	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	d910      	bls.n	8007c9c <UART_SetConfig+0x5c8>
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c80:	d20c      	bcs.n	8007c9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60da      	str	r2, [r3, #12]
 8007c8c:	e009      	b.n	8007ca2 <UART_SetConfig+0x5ce>
 8007c8e:	bf00      	nop
 8007c90:	40008000 	.word	0x40008000
 8007c94:	00f42400 	.word	0x00f42400
 8007c98:	0800b48c 	.word	0x0800b48c
      }
      else
      {
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007cbe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3730      	adds	r7, #48	@ 0x30
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd8:	f003 0308 	and.w	r3, r3, #8
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01a      	beq.n	8007de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dca:	d10a      	bne.n	8007de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	605a      	str	r2, [r3, #4]
  }
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b098      	sub	sp, #96	@ 0x60
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e20:	f7fa fa06 	bl	8002230 <HAL_GetTick>
 8007e24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d12f      	bne.n	8007e94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f88e 	bl	8007f64 <UART_WaitOnFlagUntilTimeout>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d022      	beq.n	8007e94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e62:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e6      	bne.n	8007e4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e063      	b.n	8007f5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d149      	bne.n	8007f36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f857 	bl	8007f64 <UART_WaitOnFlagUntilTimeout>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d03c      	beq.n	8007f36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8007edc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e6      	bne.n	8007ebc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f023 0301 	bic.w	r3, r3, #1
 8007f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f0e:	61fa      	str	r2, [r7, #28]
 8007f10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	69b9      	ldr	r1, [r7, #24]
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e5      	bne.n	8007eee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e012      	b.n	8007f5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3758      	adds	r7, #88	@ 0x58
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	4613      	mov	r3, r2
 8007f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f74:	e04f      	b.n	8008016 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f7c:	d04b      	beq.n	8008016 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7e:	f7fa f957 	bl	8002230 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d302      	bcc.n	8007f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e04e      	b.n	8008036 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d037      	beq.n	8008016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b80      	cmp	r3, #128	@ 0x80
 8007faa:	d034      	beq.n	8008016 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b40      	cmp	r3, #64	@ 0x40
 8007fb0:	d031      	beq.n	8008016 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b08      	cmp	r3, #8
 8007fbe:	d110      	bne.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 f920 	bl	800820e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2208      	movs	r2, #8
 8007fd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e029      	b.n	8008036 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ff0:	d111      	bne.n	8008016 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 f906 	bl	800820e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e00f      	b.n	8008036 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4013      	ands	r3, r2
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	429a      	cmp	r2, r3
 8008024:	bf0c      	ite	eq
 8008026:	2301      	moveq	r3, #1
 8008028:	2300      	movne	r3, #0
 800802a:	b2db      	uxtb	r3, r3
 800802c:	461a      	mov	r2, r3
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	429a      	cmp	r2, r3
 8008032:	d0a0      	beq.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b096      	sub	sp, #88	@ 0x58
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	88fa      	ldrh	r2, [r7, #6]
 8008058:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2222      	movs	r2, #34	@ 0x22
 8008068:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008072:	2b00      	cmp	r3, #0
 8008074:	d02d      	beq.n	80080d2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800807c:	4a40      	ldr	r2, [pc, #256]	@ (8008180 <UART_Start_Receive_DMA+0x140>)
 800807e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008086:	4a3f      	ldr	r2, [pc, #252]	@ (8008184 <UART_Start_Receive_DMA+0x144>)
 8008088:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008090:	4a3d      	ldr	r2, [pc, #244]	@ (8008188 <UART_Start_Receive_DMA+0x148>)
 8008092:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800809a:	2200      	movs	r2, #0
 800809c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3324      	adds	r3, #36	@ 0x24
 80080aa:	4619      	mov	r1, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b0:	461a      	mov	r2, r3
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	f7fc f9b2 	bl	800441c <HAL_DMA_Start_IT>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2210      	movs	r2, #16
 80080c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e051      	b.n	8008176 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d018      	beq.n	800810c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080fa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80080fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e6      	bne.n	80080da <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3308      	adds	r3, #8
 8008112:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008116:	e853 3f00 	ldrex	r3, [r3]
 800811a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	653b      	str	r3, [r7, #80]	@ 0x50
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3308      	adds	r3, #8
 800812a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800812c:	637a      	str	r2, [r7, #52]	@ 0x34
 800812e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008132:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800813a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e5      	bne.n	800810c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3308      	adds	r3, #8
 8008146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	613b      	str	r3, [r7, #16]
   return(result);
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008160:	623a      	str	r2, [r7, #32]
 8008162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	69f9      	ldr	r1, [r7, #28]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	61bb      	str	r3, [r7, #24]
   return(result);
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e5      	bne.n	8008140 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3758      	adds	r7, #88	@ 0x58
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	080082db 	.word	0x080082db
 8008184:	08008407 	.word	0x08008407
 8008188:	08008445 	.word	0x08008445

0800818c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800818c:	b480      	push	{r7}
 800818e:	b08f      	sub	sp, #60	@ 0x3c
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	e853 3f00 	ldrex	r3, [r3]
 80081a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80081a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e6      	bne.n	8008194 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3308      	adds	r3, #8
 80081cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80081dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3308      	adds	r3, #8
 80081e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e6:	61ba      	str	r2, [r7, #24]
 80081e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6979      	ldr	r1, [r7, #20]
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	613b      	str	r3, [r7, #16]
   return(result);
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e5      	bne.n	80081c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008202:	bf00      	nop
 8008204:	373c      	adds	r7, #60	@ 0x3c
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800820e:	b480      	push	{r7}
 8008210:	b095      	sub	sp, #84	@ 0x54
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800822a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008234:	643b      	str	r3, [r7, #64]	@ 0x40
 8008236:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800823a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e6      	bne.n	8008216 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3308      	adds	r3, #8
 800824e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	61fb      	str	r3, [r7, #28]
   return(result);
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3308      	adds	r3, #8
 800826a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800826c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800826e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e3      	bne.n	8008248 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008284:	2b01      	cmp	r3, #1
 8008286:	d118      	bne.n	80082ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	60bb      	str	r3, [r7, #8]
   return(result);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f023 0310 	bic.w	r3, r3, #16
 800829c:	647b      	str	r3, [r7, #68]	@ 0x44
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082a6:	61bb      	str	r3, [r7, #24]
 80082a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6979      	ldr	r1, [r7, #20]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	613b      	str	r3, [r7, #16]
   return(result);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e6      	bne.n	8008288 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082ce:	bf00      	nop
 80082d0:	3754      	adds	r7, #84	@ 0x54
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b09c      	sub	sp, #112	@ 0x70
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d171      	bne.n	80083da <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80082f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082f8:	2200      	movs	r2, #0
 80082fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800830c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800830e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008312:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800831c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800831e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008322:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800832a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e6      	bne.n	80082fe <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3308      	adds	r3, #8
 8008336:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008342:	f023 0301 	bic.w	r3, r3, #1
 8008346:	667b      	str	r3, [r7, #100]	@ 0x64
 8008348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3308      	adds	r3, #8
 800834e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008350:	647a      	str	r2, [r7, #68]	@ 0x44
 8008352:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800835e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e5      	bne.n	8008330 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3308      	adds	r3, #8
 800836a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	623b      	str	r3, [r7, #32]
   return(result);
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800837a:	663b      	str	r3, [r7, #96]	@ 0x60
 800837c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3308      	adds	r3, #8
 8008382:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008384:	633a      	str	r2, [r7, #48]	@ 0x30
 8008386:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800838a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e5      	bne.n	8008364 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800839a:	2220      	movs	r2, #32
 800839c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d118      	bne.n	80083da <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f023 0310 	bic.w	r3, r3, #16
 80083bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083c6:	61fb      	str	r3, [r7, #28]
 80083c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	69b9      	ldr	r1, [r7, #24]
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	617b      	str	r3, [r7, #20]
   return(result);
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e6      	bne.n	80083a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083dc:	2200      	movs	r2, #0
 80083de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d107      	bne.n	80083f8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083ee:	4619      	mov	r1, r3
 80083f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80083f2:	f7ff f963 	bl	80076bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083f6:	e002      	b.n	80083fe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80083f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80083fa:	f7ff f941 	bl	8007680 <HAL_UART_RxCpltCallback>
}
 80083fe:	bf00      	nop
 8008400:	3770      	adds	r7, #112	@ 0x70
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008412:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800841e:	2b01      	cmp	r3, #1
 8008420:	d109      	bne.n	8008436 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008428:	085b      	lsrs	r3, r3, #1
 800842a:	b29b      	uxth	r3, r3
 800842c:	4619      	mov	r1, r3
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f7ff f944 	bl	80076bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008434:	e002      	b.n	800843c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff f92c 	bl	8007694 <HAL_UART_RxHalfCpltCallback>
}
 800843c:	bf00      	nop
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008450:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008458:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008460:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800846c:	2b80      	cmp	r3, #128	@ 0x80
 800846e:	d109      	bne.n	8008484 <UART_DMAError+0x40>
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2b21      	cmp	r3, #33	@ 0x21
 8008474:	d106      	bne.n	8008484 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2200      	movs	r2, #0
 800847a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800847e:	6978      	ldr	r0, [r7, #20]
 8008480:	f7ff fe84 	bl	800818c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800848e:	2b40      	cmp	r3, #64	@ 0x40
 8008490:	d109      	bne.n	80084a6 <UART_DMAError+0x62>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b22      	cmp	r3, #34	@ 0x22
 8008496:	d106      	bne.n	80084a6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2200      	movs	r2, #0
 800849c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80084a0:	6978      	ldr	r0, [r7, #20]
 80084a2:	f7ff feb4 	bl	800820e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ac:	f043 0210 	orr.w	r2, r3, #16
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084b6:	6978      	ldr	r0, [r7, #20]
 80084b8:	f7ff f8f6 	bl	80076a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084bc:	bf00      	nop
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_UARTEx_DisableFifoMode+0x16>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e027      	b.n	800852a <HAL_UARTEx_DisableFifoMode+0x66>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2224      	movs	r2, #36	@ 0x24
 80084e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 0201 	bic.w	r2, r2, #1
 8008500:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008508:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800854a:	2302      	movs	r3, #2
 800854c:	e02d      	b.n	80085aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2224      	movs	r2, #36	@ 0x24
 800855a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0201 	bic.w	r2, r2, #1
 8008574:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f850 	bl	8008630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d101      	bne.n	80085ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085c6:	2302      	movs	r3, #2
 80085c8:	e02d      	b.n	8008626 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2224      	movs	r2, #36	@ 0x24
 80085d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0201 	bic.w	r2, r2, #1
 80085f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f812 	bl	8008630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2220      	movs	r2, #32
 8008618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800863c:	2b00      	cmp	r3, #0
 800863e:	d108      	bne.n	8008652 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008650:	e031      	b.n	80086b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008652:	2308      	movs	r3, #8
 8008654:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008656:	2308      	movs	r3, #8
 8008658:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	0e5b      	lsrs	r3, r3, #25
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	0f5b      	lsrs	r3, r3, #29
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	7b3a      	ldrb	r2, [r7, #12]
 800867e:	4911      	ldr	r1, [pc, #68]	@ (80086c4 <UARTEx_SetNbDataToProcess+0x94>)
 8008680:	5c8a      	ldrb	r2, [r1, r2]
 8008682:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008686:	7b3a      	ldrb	r2, [r7, #12]
 8008688:	490f      	ldr	r1, [pc, #60]	@ (80086c8 <UARTEx_SetNbDataToProcess+0x98>)
 800868a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800868c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008690:	b29a      	uxth	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	7b7a      	ldrb	r2, [r7, #13]
 800869c:	4909      	ldr	r1, [pc, #36]	@ (80086c4 <UARTEx_SetNbDataToProcess+0x94>)
 800869e:	5c8a      	ldrb	r2, [r1, r2]
 80086a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086a4:	7b7a      	ldrb	r2, [r7, #13]
 80086a6:	4908      	ldr	r1, [pc, #32]	@ (80086c8 <UARTEx_SetNbDataToProcess+0x98>)
 80086a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80086b6:	bf00      	nop
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	0800b4a4 	.word	0x0800b4a4
 80086c8:	0800b4ac 	.word	0x0800b4ac

080086cc <__cvt>:
 80086cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	ec57 6b10 	vmov	r6, r7, d0
 80086d4:	2f00      	cmp	r7, #0
 80086d6:	460c      	mov	r4, r1
 80086d8:	4619      	mov	r1, r3
 80086da:	463b      	mov	r3, r7
 80086dc:	bfbb      	ittet	lt
 80086de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80086e2:	461f      	movlt	r7, r3
 80086e4:	2300      	movge	r3, #0
 80086e6:	232d      	movlt	r3, #45	@ 0x2d
 80086e8:	700b      	strb	r3, [r1, #0]
 80086ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80086f0:	4691      	mov	r9, r2
 80086f2:	f023 0820 	bic.w	r8, r3, #32
 80086f6:	bfbc      	itt	lt
 80086f8:	4632      	movlt	r2, r6
 80086fa:	4616      	movlt	r6, r2
 80086fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008700:	d005      	beq.n	800870e <__cvt+0x42>
 8008702:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008706:	d100      	bne.n	800870a <__cvt+0x3e>
 8008708:	3401      	adds	r4, #1
 800870a:	2102      	movs	r1, #2
 800870c:	e000      	b.n	8008710 <__cvt+0x44>
 800870e:	2103      	movs	r1, #3
 8008710:	ab03      	add	r3, sp, #12
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	ab02      	add	r3, sp, #8
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	ec47 6b10 	vmov	d0, r6, r7
 800871c:	4653      	mov	r3, sl
 800871e:	4622      	mov	r2, r4
 8008720:	f000 fe66 	bl	80093f0 <_dtoa_r>
 8008724:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008728:	4605      	mov	r5, r0
 800872a:	d119      	bne.n	8008760 <__cvt+0x94>
 800872c:	f019 0f01 	tst.w	r9, #1
 8008730:	d00e      	beq.n	8008750 <__cvt+0x84>
 8008732:	eb00 0904 	add.w	r9, r0, r4
 8008736:	2200      	movs	r2, #0
 8008738:	2300      	movs	r3, #0
 800873a:	4630      	mov	r0, r6
 800873c:	4639      	mov	r1, r7
 800873e:	f7f8 f9eb 	bl	8000b18 <__aeabi_dcmpeq>
 8008742:	b108      	cbz	r0, 8008748 <__cvt+0x7c>
 8008744:	f8cd 900c 	str.w	r9, [sp, #12]
 8008748:	2230      	movs	r2, #48	@ 0x30
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	454b      	cmp	r3, r9
 800874e:	d31e      	bcc.n	800878e <__cvt+0xc2>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008754:	1b5b      	subs	r3, r3, r5
 8008756:	4628      	mov	r0, r5
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	b004      	add	sp, #16
 800875c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008760:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008764:	eb00 0904 	add.w	r9, r0, r4
 8008768:	d1e5      	bne.n	8008736 <__cvt+0x6a>
 800876a:	7803      	ldrb	r3, [r0, #0]
 800876c:	2b30      	cmp	r3, #48	@ 0x30
 800876e:	d10a      	bne.n	8008786 <__cvt+0xba>
 8008770:	2200      	movs	r2, #0
 8008772:	2300      	movs	r3, #0
 8008774:	4630      	mov	r0, r6
 8008776:	4639      	mov	r1, r7
 8008778:	f7f8 f9ce 	bl	8000b18 <__aeabi_dcmpeq>
 800877c:	b918      	cbnz	r0, 8008786 <__cvt+0xba>
 800877e:	f1c4 0401 	rsb	r4, r4, #1
 8008782:	f8ca 4000 	str.w	r4, [sl]
 8008786:	f8da 3000 	ldr.w	r3, [sl]
 800878a:	4499      	add	r9, r3
 800878c:	e7d3      	b.n	8008736 <__cvt+0x6a>
 800878e:	1c59      	adds	r1, r3, #1
 8008790:	9103      	str	r1, [sp, #12]
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	e7d9      	b.n	800874a <__cvt+0x7e>

08008796 <__exponent>:
 8008796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008798:	2900      	cmp	r1, #0
 800879a:	bfba      	itte	lt
 800879c:	4249      	neglt	r1, r1
 800879e:	232d      	movlt	r3, #45	@ 0x2d
 80087a0:	232b      	movge	r3, #43	@ 0x2b
 80087a2:	2909      	cmp	r1, #9
 80087a4:	7002      	strb	r2, [r0, #0]
 80087a6:	7043      	strb	r3, [r0, #1]
 80087a8:	dd29      	ble.n	80087fe <__exponent+0x68>
 80087aa:	f10d 0307 	add.w	r3, sp, #7
 80087ae:	461d      	mov	r5, r3
 80087b0:	270a      	movs	r7, #10
 80087b2:	461a      	mov	r2, r3
 80087b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80087b8:	fb07 1416 	mls	r4, r7, r6, r1
 80087bc:	3430      	adds	r4, #48	@ 0x30
 80087be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80087c2:	460c      	mov	r4, r1
 80087c4:	2c63      	cmp	r4, #99	@ 0x63
 80087c6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80087ca:	4631      	mov	r1, r6
 80087cc:	dcf1      	bgt.n	80087b2 <__exponent+0x1c>
 80087ce:	3130      	adds	r1, #48	@ 0x30
 80087d0:	1e94      	subs	r4, r2, #2
 80087d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80087d6:	1c41      	adds	r1, r0, #1
 80087d8:	4623      	mov	r3, r4
 80087da:	42ab      	cmp	r3, r5
 80087dc:	d30a      	bcc.n	80087f4 <__exponent+0x5e>
 80087de:	f10d 0309 	add.w	r3, sp, #9
 80087e2:	1a9b      	subs	r3, r3, r2
 80087e4:	42ac      	cmp	r4, r5
 80087e6:	bf88      	it	hi
 80087e8:	2300      	movhi	r3, #0
 80087ea:	3302      	adds	r3, #2
 80087ec:	4403      	add	r3, r0
 80087ee:	1a18      	subs	r0, r3, r0
 80087f0:	b003      	add	sp, #12
 80087f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80087f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80087fc:	e7ed      	b.n	80087da <__exponent+0x44>
 80087fe:	2330      	movs	r3, #48	@ 0x30
 8008800:	3130      	adds	r1, #48	@ 0x30
 8008802:	7083      	strb	r3, [r0, #2]
 8008804:	70c1      	strb	r1, [r0, #3]
 8008806:	1d03      	adds	r3, r0, #4
 8008808:	e7f1      	b.n	80087ee <__exponent+0x58>
	...

0800880c <_printf_float>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	b08d      	sub	sp, #52	@ 0x34
 8008812:	460c      	mov	r4, r1
 8008814:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008818:	4616      	mov	r6, r2
 800881a:	461f      	mov	r7, r3
 800881c:	4605      	mov	r5, r0
 800881e:	f000 fce7 	bl	80091f0 <_localeconv_r>
 8008822:	6803      	ldr	r3, [r0, #0]
 8008824:	9304      	str	r3, [sp, #16]
 8008826:	4618      	mov	r0, r3
 8008828:	f7f7 fd4a 	bl	80002c0 <strlen>
 800882c:	2300      	movs	r3, #0
 800882e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008830:	f8d8 3000 	ldr.w	r3, [r8]
 8008834:	9005      	str	r0, [sp, #20]
 8008836:	3307      	adds	r3, #7
 8008838:	f023 0307 	bic.w	r3, r3, #7
 800883c:	f103 0208 	add.w	r2, r3, #8
 8008840:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008844:	f8d4 b000 	ldr.w	fp, [r4]
 8008848:	f8c8 2000 	str.w	r2, [r8]
 800884c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008850:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008854:	9307      	str	r3, [sp, #28]
 8008856:	f8cd 8018 	str.w	r8, [sp, #24]
 800885a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800885e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008862:	4b9c      	ldr	r3, [pc, #624]	@ (8008ad4 <_printf_float+0x2c8>)
 8008864:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008868:	f7f8 f988 	bl	8000b7c <__aeabi_dcmpun>
 800886c:	bb70      	cbnz	r0, 80088cc <_printf_float+0xc0>
 800886e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008872:	4b98      	ldr	r3, [pc, #608]	@ (8008ad4 <_printf_float+0x2c8>)
 8008874:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008878:	f7f8 f962 	bl	8000b40 <__aeabi_dcmple>
 800887c:	bb30      	cbnz	r0, 80088cc <_printf_float+0xc0>
 800887e:	2200      	movs	r2, #0
 8008880:	2300      	movs	r3, #0
 8008882:	4640      	mov	r0, r8
 8008884:	4649      	mov	r1, r9
 8008886:	f7f8 f951 	bl	8000b2c <__aeabi_dcmplt>
 800888a:	b110      	cbz	r0, 8008892 <_printf_float+0x86>
 800888c:	232d      	movs	r3, #45	@ 0x2d
 800888e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008892:	4a91      	ldr	r2, [pc, #580]	@ (8008ad8 <_printf_float+0x2cc>)
 8008894:	4b91      	ldr	r3, [pc, #580]	@ (8008adc <_printf_float+0x2d0>)
 8008896:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800889a:	bf94      	ite	ls
 800889c:	4690      	movls	r8, r2
 800889e:	4698      	movhi	r8, r3
 80088a0:	2303      	movs	r3, #3
 80088a2:	6123      	str	r3, [r4, #16]
 80088a4:	f02b 0304 	bic.w	r3, fp, #4
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	f04f 0900 	mov.w	r9, #0
 80088ae:	9700      	str	r7, [sp, #0]
 80088b0:	4633      	mov	r3, r6
 80088b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80088b4:	4621      	mov	r1, r4
 80088b6:	4628      	mov	r0, r5
 80088b8:	f000 f9d2 	bl	8008c60 <_printf_common>
 80088bc:	3001      	adds	r0, #1
 80088be:	f040 808d 	bne.w	80089dc <_printf_float+0x1d0>
 80088c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088c6:	b00d      	add	sp, #52	@ 0x34
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088cc:	4642      	mov	r2, r8
 80088ce:	464b      	mov	r3, r9
 80088d0:	4640      	mov	r0, r8
 80088d2:	4649      	mov	r1, r9
 80088d4:	f7f8 f952 	bl	8000b7c <__aeabi_dcmpun>
 80088d8:	b140      	cbz	r0, 80088ec <_printf_float+0xe0>
 80088da:	464b      	mov	r3, r9
 80088dc:	2b00      	cmp	r3, #0
 80088de:	bfbc      	itt	lt
 80088e0:	232d      	movlt	r3, #45	@ 0x2d
 80088e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80088e6:	4a7e      	ldr	r2, [pc, #504]	@ (8008ae0 <_printf_float+0x2d4>)
 80088e8:	4b7e      	ldr	r3, [pc, #504]	@ (8008ae4 <_printf_float+0x2d8>)
 80088ea:	e7d4      	b.n	8008896 <_printf_float+0x8a>
 80088ec:	6863      	ldr	r3, [r4, #4]
 80088ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80088f2:	9206      	str	r2, [sp, #24]
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	d13b      	bne.n	8008970 <_printf_float+0x164>
 80088f8:	2306      	movs	r3, #6
 80088fa:	6063      	str	r3, [r4, #4]
 80088fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008900:	2300      	movs	r3, #0
 8008902:	6022      	str	r2, [r4, #0]
 8008904:	9303      	str	r3, [sp, #12]
 8008906:	ab0a      	add	r3, sp, #40	@ 0x28
 8008908:	e9cd a301 	strd	sl, r3, [sp, #4]
 800890c:	ab09      	add	r3, sp, #36	@ 0x24
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	6861      	ldr	r1, [r4, #4]
 8008912:	ec49 8b10 	vmov	d0, r8, r9
 8008916:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800891a:	4628      	mov	r0, r5
 800891c:	f7ff fed6 	bl	80086cc <__cvt>
 8008920:	9b06      	ldr	r3, [sp, #24]
 8008922:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008924:	2b47      	cmp	r3, #71	@ 0x47
 8008926:	4680      	mov	r8, r0
 8008928:	d129      	bne.n	800897e <_printf_float+0x172>
 800892a:	1cc8      	adds	r0, r1, #3
 800892c:	db02      	blt.n	8008934 <_printf_float+0x128>
 800892e:	6863      	ldr	r3, [r4, #4]
 8008930:	4299      	cmp	r1, r3
 8008932:	dd41      	ble.n	80089b8 <_printf_float+0x1ac>
 8008934:	f1aa 0a02 	sub.w	sl, sl, #2
 8008938:	fa5f fa8a 	uxtb.w	sl, sl
 800893c:	3901      	subs	r1, #1
 800893e:	4652      	mov	r2, sl
 8008940:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008944:	9109      	str	r1, [sp, #36]	@ 0x24
 8008946:	f7ff ff26 	bl	8008796 <__exponent>
 800894a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800894c:	1813      	adds	r3, r2, r0
 800894e:	2a01      	cmp	r2, #1
 8008950:	4681      	mov	r9, r0
 8008952:	6123      	str	r3, [r4, #16]
 8008954:	dc02      	bgt.n	800895c <_printf_float+0x150>
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	07d2      	lsls	r2, r2, #31
 800895a:	d501      	bpl.n	8008960 <_printf_float+0x154>
 800895c:	3301      	adds	r3, #1
 800895e:	6123      	str	r3, [r4, #16]
 8008960:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0a2      	beq.n	80088ae <_printf_float+0xa2>
 8008968:	232d      	movs	r3, #45	@ 0x2d
 800896a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800896e:	e79e      	b.n	80088ae <_printf_float+0xa2>
 8008970:	9a06      	ldr	r2, [sp, #24]
 8008972:	2a47      	cmp	r2, #71	@ 0x47
 8008974:	d1c2      	bne.n	80088fc <_printf_float+0xf0>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1c0      	bne.n	80088fc <_printf_float+0xf0>
 800897a:	2301      	movs	r3, #1
 800897c:	e7bd      	b.n	80088fa <_printf_float+0xee>
 800897e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008982:	d9db      	bls.n	800893c <_printf_float+0x130>
 8008984:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008988:	d118      	bne.n	80089bc <_printf_float+0x1b0>
 800898a:	2900      	cmp	r1, #0
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	dd0b      	ble.n	80089a8 <_printf_float+0x19c>
 8008990:	6121      	str	r1, [r4, #16]
 8008992:	b913      	cbnz	r3, 800899a <_printf_float+0x18e>
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	07d0      	lsls	r0, r2, #31
 8008998:	d502      	bpl.n	80089a0 <_printf_float+0x194>
 800899a:	3301      	adds	r3, #1
 800899c:	440b      	add	r3, r1
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089a2:	f04f 0900 	mov.w	r9, #0
 80089a6:	e7db      	b.n	8008960 <_printf_float+0x154>
 80089a8:	b913      	cbnz	r3, 80089b0 <_printf_float+0x1a4>
 80089aa:	6822      	ldr	r2, [r4, #0]
 80089ac:	07d2      	lsls	r2, r2, #31
 80089ae:	d501      	bpl.n	80089b4 <_printf_float+0x1a8>
 80089b0:	3302      	adds	r3, #2
 80089b2:	e7f4      	b.n	800899e <_printf_float+0x192>
 80089b4:	2301      	movs	r3, #1
 80089b6:	e7f2      	b.n	800899e <_printf_float+0x192>
 80089b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80089bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089be:	4299      	cmp	r1, r3
 80089c0:	db05      	blt.n	80089ce <_printf_float+0x1c2>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	6121      	str	r1, [r4, #16]
 80089c6:	07d8      	lsls	r0, r3, #31
 80089c8:	d5ea      	bpl.n	80089a0 <_printf_float+0x194>
 80089ca:	1c4b      	adds	r3, r1, #1
 80089cc:	e7e7      	b.n	800899e <_printf_float+0x192>
 80089ce:	2900      	cmp	r1, #0
 80089d0:	bfd4      	ite	le
 80089d2:	f1c1 0202 	rsble	r2, r1, #2
 80089d6:	2201      	movgt	r2, #1
 80089d8:	4413      	add	r3, r2
 80089da:	e7e0      	b.n	800899e <_printf_float+0x192>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	055a      	lsls	r2, r3, #21
 80089e0:	d407      	bmi.n	80089f2 <_printf_float+0x1e6>
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	4642      	mov	r2, r8
 80089e6:	4631      	mov	r1, r6
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b8      	blx	r7
 80089ec:	3001      	adds	r0, #1
 80089ee:	d12b      	bne.n	8008a48 <_printf_float+0x23c>
 80089f0:	e767      	b.n	80088c2 <_printf_float+0xb6>
 80089f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089f6:	f240 80dd 	bls.w	8008bb4 <_printf_float+0x3a8>
 80089fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80089fe:	2200      	movs	r2, #0
 8008a00:	2300      	movs	r3, #0
 8008a02:	f7f8 f889 	bl	8000b18 <__aeabi_dcmpeq>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d033      	beq.n	8008a72 <_printf_float+0x266>
 8008a0a:	4a37      	ldr	r2, [pc, #220]	@ (8008ae8 <_printf_float+0x2dc>)
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b8      	blx	r7
 8008a14:	3001      	adds	r0, #1
 8008a16:	f43f af54 	beq.w	80088c2 <_printf_float+0xb6>
 8008a1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a1e:	4543      	cmp	r3, r8
 8008a20:	db02      	blt.n	8008a28 <_printf_float+0x21c>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	07d8      	lsls	r0, r3, #31
 8008a26:	d50f      	bpl.n	8008a48 <_printf_float+0x23c>
 8008a28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	f43f af45 	beq.w	80088c2 <_printf_float+0xb6>
 8008a38:	f04f 0900 	mov.w	r9, #0
 8008a3c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008a40:	f104 0a1a 	add.w	sl, r4, #26
 8008a44:	45c8      	cmp	r8, r9
 8008a46:	dc09      	bgt.n	8008a5c <_printf_float+0x250>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	079b      	lsls	r3, r3, #30
 8008a4c:	f100 8103 	bmi.w	8008c56 <_printf_float+0x44a>
 8008a50:	68e0      	ldr	r0, [r4, #12]
 8008a52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a54:	4298      	cmp	r0, r3
 8008a56:	bfb8      	it	lt
 8008a58:	4618      	movlt	r0, r3
 8008a5a:	e734      	b.n	80088c6 <_printf_float+0xba>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4652      	mov	r2, sl
 8008a60:	4631      	mov	r1, r6
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b8      	blx	r7
 8008a66:	3001      	adds	r0, #1
 8008a68:	f43f af2b 	beq.w	80088c2 <_printf_float+0xb6>
 8008a6c:	f109 0901 	add.w	r9, r9, #1
 8008a70:	e7e8      	b.n	8008a44 <_printf_float+0x238>
 8008a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dc39      	bgt.n	8008aec <_printf_float+0x2e0>
 8008a78:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae8 <_printf_float+0x2dc>)
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f af1d 	beq.w	80088c2 <_printf_float+0xb6>
 8008a88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008a8c:	ea59 0303 	orrs.w	r3, r9, r3
 8008a90:	d102      	bne.n	8008a98 <_printf_float+0x28c>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	07d9      	lsls	r1, r3, #31
 8008a96:	d5d7      	bpl.n	8008a48 <_printf_float+0x23c>
 8008a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	f43f af0d 	beq.w	80088c2 <_printf_float+0xb6>
 8008aa8:	f04f 0a00 	mov.w	sl, #0
 8008aac:	f104 0b1a 	add.w	fp, r4, #26
 8008ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ab2:	425b      	negs	r3, r3
 8008ab4:	4553      	cmp	r3, sl
 8008ab6:	dc01      	bgt.n	8008abc <_printf_float+0x2b0>
 8008ab8:	464b      	mov	r3, r9
 8008aba:	e793      	b.n	80089e4 <_printf_float+0x1d8>
 8008abc:	2301      	movs	r3, #1
 8008abe:	465a      	mov	r2, fp
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	47b8      	blx	r7
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f43f aefb 	beq.w	80088c2 <_printf_float+0xb6>
 8008acc:	f10a 0a01 	add.w	sl, sl, #1
 8008ad0:	e7ee      	b.n	8008ab0 <_printf_float+0x2a4>
 8008ad2:	bf00      	nop
 8008ad4:	7fefffff 	.word	0x7fefffff
 8008ad8:	0800b4b4 	.word	0x0800b4b4
 8008adc:	0800b4b8 	.word	0x0800b4b8
 8008ae0:	0800b4bc 	.word	0x0800b4bc
 8008ae4:	0800b4c0 	.word	0x0800b4c0
 8008ae8:	0800b4c4 	.word	0x0800b4c4
 8008aec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008aee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008af2:	4553      	cmp	r3, sl
 8008af4:	bfa8      	it	ge
 8008af6:	4653      	movge	r3, sl
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	4699      	mov	r9, r3
 8008afc:	dc36      	bgt.n	8008b6c <_printf_float+0x360>
 8008afe:	f04f 0b00 	mov.w	fp, #0
 8008b02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b06:	f104 021a 	add.w	r2, r4, #26
 8008b0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b0c:	9306      	str	r3, [sp, #24]
 8008b0e:	eba3 0309 	sub.w	r3, r3, r9
 8008b12:	455b      	cmp	r3, fp
 8008b14:	dc31      	bgt.n	8008b7a <_printf_float+0x36e>
 8008b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b18:	459a      	cmp	sl, r3
 8008b1a:	dc3a      	bgt.n	8008b92 <_printf_float+0x386>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	07da      	lsls	r2, r3, #31
 8008b20:	d437      	bmi.n	8008b92 <_printf_float+0x386>
 8008b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b24:	ebaa 0903 	sub.w	r9, sl, r3
 8008b28:	9b06      	ldr	r3, [sp, #24]
 8008b2a:	ebaa 0303 	sub.w	r3, sl, r3
 8008b2e:	4599      	cmp	r9, r3
 8008b30:	bfa8      	it	ge
 8008b32:	4699      	movge	r9, r3
 8008b34:	f1b9 0f00 	cmp.w	r9, #0
 8008b38:	dc33      	bgt.n	8008ba2 <_printf_float+0x396>
 8008b3a:	f04f 0800 	mov.w	r8, #0
 8008b3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b42:	f104 0b1a 	add.w	fp, r4, #26
 8008b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b48:	ebaa 0303 	sub.w	r3, sl, r3
 8008b4c:	eba3 0309 	sub.w	r3, r3, r9
 8008b50:	4543      	cmp	r3, r8
 8008b52:	f77f af79 	ble.w	8008a48 <_printf_float+0x23c>
 8008b56:	2301      	movs	r3, #1
 8008b58:	465a      	mov	r2, fp
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	47b8      	blx	r7
 8008b60:	3001      	adds	r0, #1
 8008b62:	f43f aeae 	beq.w	80088c2 <_printf_float+0xb6>
 8008b66:	f108 0801 	add.w	r8, r8, #1
 8008b6a:	e7ec      	b.n	8008b46 <_printf_float+0x33a>
 8008b6c:	4642      	mov	r2, r8
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b8      	blx	r7
 8008b74:	3001      	adds	r0, #1
 8008b76:	d1c2      	bne.n	8008afe <_printf_float+0x2f2>
 8008b78:	e6a3      	b.n	80088c2 <_printf_float+0xb6>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	9206      	str	r2, [sp, #24]
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	f43f ae9c 	beq.w	80088c2 <_printf_float+0xb6>
 8008b8a:	9a06      	ldr	r2, [sp, #24]
 8008b8c:	f10b 0b01 	add.w	fp, fp, #1
 8008b90:	e7bb      	b.n	8008b0a <_printf_float+0x2fe>
 8008b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b96:	4631      	mov	r1, r6
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b8      	blx	r7
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	d1c0      	bne.n	8008b22 <_printf_float+0x316>
 8008ba0:	e68f      	b.n	80088c2 <_printf_float+0xb6>
 8008ba2:	9a06      	ldr	r2, [sp, #24]
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	4442      	add	r2, r8
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d1c3      	bne.n	8008b3a <_printf_float+0x32e>
 8008bb2:	e686      	b.n	80088c2 <_printf_float+0xb6>
 8008bb4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008bb8:	f1ba 0f01 	cmp.w	sl, #1
 8008bbc:	dc01      	bgt.n	8008bc2 <_printf_float+0x3b6>
 8008bbe:	07db      	lsls	r3, r3, #31
 8008bc0:	d536      	bpl.n	8008c30 <_printf_float+0x424>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4628      	mov	r0, r5
 8008bca:	47b8      	blx	r7
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f43f ae78 	beq.w	80088c2 <_printf_float+0xb6>
 8008bd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	4628      	mov	r0, r5
 8008bda:	47b8      	blx	r7
 8008bdc:	3001      	adds	r0, #1
 8008bde:	f43f ae70 	beq.w	80088c2 <_printf_float+0xb6>
 8008be2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008be6:	2200      	movs	r2, #0
 8008be8:	2300      	movs	r3, #0
 8008bea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008bee:	f7f7 ff93 	bl	8000b18 <__aeabi_dcmpeq>
 8008bf2:	b9c0      	cbnz	r0, 8008c26 <_printf_float+0x41a>
 8008bf4:	4653      	mov	r3, sl
 8008bf6:	f108 0201 	add.w	r2, r8, #1
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	d10c      	bne.n	8008c1e <_printf_float+0x412>
 8008c04:	e65d      	b.n	80088c2 <_printf_float+0xb6>
 8008c06:	2301      	movs	r3, #1
 8008c08:	465a      	mov	r2, fp
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	47b8      	blx	r7
 8008c10:	3001      	adds	r0, #1
 8008c12:	f43f ae56 	beq.w	80088c2 <_printf_float+0xb6>
 8008c16:	f108 0801 	add.w	r8, r8, #1
 8008c1a:	45d0      	cmp	r8, sl
 8008c1c:	dbf3      	blt.n	8008c06 <_printf_float+0x3fa>
 8008c1e:	464b      	mov	r3, r9
 8008c20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c24:	e6df      	b.n	80089e6 <_printf_float+0x1da>
 8008c26:	f04f 0800 	mov.w	r8, #0
 8008c2a:	f104 0b1a 	add.w	fp, r4, #26
 8008c2e:	e7f4      	b.n	8008c1a <_printf_float+0x40e>
 8008c30:	2301      	movs	r3, #1
 8008c32:	4642      	mov	r2, r8
 8008c34:	e7e1      	b.n	8008bfa <_printf_float+0x3ee>
 8008c36:	2301      	movs	r3, #1
 8008c38:	464a      	mov	r2, r9
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b8      	blx	r7
 8008c40:	3001      	adds	r0, #1
 8008c42:	f43f ae3e 	beq.w	80088c2 <_printf_float+0xb6>
 8008c46:	f108 0801 	add.w	r8, r8, #1
 8008c4a:	68e3      	ldr	r3, [r4, #12]
 8008c4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c4e:	1a5b      	subs	r3, r3, r1
 8008c50:	4543      	cmp	r3, r8
 8008c52:	dcf0      	bgt.n	8008c36 <_printf_float+0x42a>
 8008c54:	e6fc      	b.n	8008a50 <_printf_float+0x244>
 8008c56:	f04f 0800 	mov.w	r8, #0
 8008c5a:	f104 0919 	add.w	r9, r4, #25
 8008c5e:	e7f4      	b.n	8008c4a <_printf_float+0x43e>

08008c60 <_printf_common>:
 8008c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c64:	4616      	mov	r6, r2
 8008c66:	4698      	mov	r8, r3
 8008c68:	688a      	ldr	r2, [r1, #8]
 8008c6a:	690b      	ldr	r3, [r1, #16]
 8008c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c70:	4293      	cmp	r3, r2
 8008c72:	bfb8      	it	lt
 8008c74:	4613      	movlt	r3, r2
 8008c76:	6033      	str	r3, [r6, #0]
 8008c78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	b10a      	cbz	r2, 8008c86 <_printf_common+0x26>
 8008c82:	3301      	adds	r3, #1
 8008c84:	6033      	str	r3, [r6, #0]
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	0699      	lsls	r1, r3, #26
 8008c8a:	bf42      	ittt	mi
 8008c8c:	6833      	ldrmi	r3, [r6, #0]
 8008c8e:	3302      	addmi	r3, #2
 8008c90:	6033      	strmi	r3, [r6, #0]
 8008c92:	6825      	ldr	r5, [r4, #0]
 8008c94:	f015 0506 	ands.w	r5, r5, #6
 8008c98:	d106      	bne.n	8008ca8 <_printf_common+0x48>
 8008c9a:	f104 0a19 	add.w	sl, r4, #25
 8008c9e:	68e3      	ldr	r3, [r4, #12]
 8008ca0:	6832      	ldr	r2, [r6, #0]
 8008ca2:	1a9b      	subs	r3, r3, r2
 8008ca4:	42ab      	cmp	r3, r5
 8008ca6:	dc26      	bgt.n	8008cf6 <_printf_common+0x96>
 8008ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	3b00      	subs	r3, #0
 8008cb0:	bf18      	it	ne
 8008cb2:	2301      	movne	r3, #1
 8008cb4:	0692      	lsls	r2, r2, #26
 8008cb6:	d42b      	bmi.n	8008d10 <_printf_common+0xb0>
 8008cb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cbc:	4641      	mov	r1, r8
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	47c8      	blx	r9
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d01e      	beq.n	8008d04 <_printf_common+0xa4>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	6922      	ldr	r2, [r4, #16]
 8008cca:	f003 0306 	and.w	r3, r3, #6
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	bf02      	ittt	eq
 8008cd2:	68e5      	ldreq	r5, [r4, #12]
 8008cd4:	6833      	ldreq	r3, [r6, #0]
 8008cd6:	1aed      	subeq	r5, r5, r3
 8008cd8:	68a3      	ldr	r3, [r4, #8]
 8008cda:	bf0c      	ite	eq
 8008cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ce0:	2500      	movne	r5, #0
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	bfc4      	itt	gt
 8008ce6:	1a9b      	subgt	r3, r3, r2
 8008ce8:	18ed      	addgt	r5, r5, r3
 8008cea:	2600      	movs	r6, #0
 8008cec:	341a      	adds	r4, #26
 8008cee:	42b5      	cmp	r5, r6
 8008cf0:	d11a      	bne.n	8008d28 <_printf_common+0xc8>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	e008      	b.n	8008d08 <_printf_common+0xa8>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	4652      	mov	r2, sl
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	47c8      	blx	r9
 8008d00:	3001      	adds	r0, #1
 8008d02:	d103      	bne.n	8008d0c <_printf_common+0xac>
 8008d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	e7c6      	b.n	8008c9e <_printf_common+0x3e>
 8008d10:	18e1      	adds	r1, r4, r3
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	2030      	movs	r0, #48	@ 0x30
 8008d16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d1a:	4422      	add	r2, r4
 8008d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d24:	3302      	adds	r3, #2
 8008d26:	e7c7      	b.n	8008cb8 <_printf_common+0x58>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	4641      	mov	r1, r8
 8008d2e:	4638      	mov	r0, r7
 8008d30:	47c8      	blx	r9
 8008d32:	3001      	adds	r0, #1
 8008d34:	d0e6      	beq.n	8008d04 <_printf_common+0xa4>
 8008d36:	3601      	adds	r6, #1
 8008d38:	e7d9      	b.n	8008cee <_printf_common+0x8e>
	...

08008d3c <_printf_i>:
 8008d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d40:	7e0f      	ldrb	r7, [r1, #24]
 8008d42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d44:	2f78      	cmp	r7, #120	@ 0x78
 8008d46:	4691      	mov	r9, r2
 8008d48:	4680      	mov	r8, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	469a      	mov	sl, r3
 8008d4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d52:	d807      	bhi.n	8008d64 <_printf_i+0x28>
 8008d54:	2f62      	cmp	r7, #98	@ 0x62
 8008d56:	d80a      	bhi.n	8008d6e <_printf_i+0x32>
 8008d58:	2f00      	cmp	r7, #0
 8008d5a:	f000 80d2 	beq.w	8008f02 <_printf_i+0x1c6>
 8008d5e:	2f58      	cmp	r7, #88	@ 0x58
 8008d60:	f000 80b9 	beq.w	8008ed6 <_printf_i+0x19a>
 8008d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d6c:	e03a      	b.n	8008de4 <_printf_i+0xa8>
 8008d6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d72:	2b15      	cmp	r3, #21
 8008d74:	d8f6      	bhi.n	8008d64 <_printf_i+0x28>
 8008d76:	a101      	add	r1, pc, #4	@ (adr r1, 8008d7c <_printf_i+0x40>)
 8008d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d7c:	08008dd5 	.word	0x08008dd5
 8008d80:	08008de9 	.word	0x08008de9
 8008d84:	08008d65 	.word	0x08008d65
 8008d88:	08008d65 	.word	0x08008d65
 8008d8c:	08008d65 	.word	0x08008d65
 8008d90:	08008d65 	.word	0x08008d65
 8008d94:	08008de9 	.word	0x08008de9
 8008d98:	08008d65 	.word	0x08008d65
 8008d9c:	08008d65 	.word	0x08008d65
 8008da0:	08008d65 	.word	0x08008d65
 8008da4:	08008d65 	.word	0x08008d65
 8008da8:	08008ee9 	.word	0x08008ee9
 8008dac:	08008e13 	.word	0x08008e13
 8008db0:	08008ea3 	.word	0x08008ea3
 8008db4:	08008d65 	.word	0x08008d65
 8008db8:	08008d65 	.word	0x08008d65
 8008dbc:	08008f0b 	.word	0x08008f0b
 8008dc0:	08008d65 	.word	0x08008d65
 8008dc4:	08008e13 	.word	0x08008e13
 8008dc8:	08008d65 	.word	0x08008d65
 8008dcc:	08008d65 	.word	0x08008d65
 8008dd0:	08008eab 	.word	0x08008eab
 8008dd4:	6833      	ldr	r3, [r6, #0]
 8008dd6:	1d1a      	adds	r2, r3, #4
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6032      	str	r2, [r6, #0]
 8008ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008de0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008de4:	2301      	movs	r3, #1
 8008de6:	e09d      	b.n	8008f24 <_printf_i+0x1e8>
 8008de8:	6833      	ldr	r3, [r6, #0]
 8008dea:	6820      	ldr	r0, [r4, #0]
 8008dec:	1d19      	adds	r1, r3, #4
 8008dee:	6031      	str	r1, [r6, #0]
 8008df0:	0606      	lsls	r6, r0, #24
 8008df2:	d501      	bpl.n	8008df8 <_printf_i+0xbc>
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	e003      	b.n	8008e00 <_printf_i+0xc4>
 8008df8:	0645      	lsls	r5, r0, #25
 8008dfa:	d5fb      	bpl.n	8008df4 <_printf_i+0xb8>
 8008dfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e00:	2d00      	cmp	r5, #0
 8008e02:	da03      	bge.n	8008e0c <_printf_i+0xd0>
 8008e04:	232d      	movs	r3, #45	@ 0x2d
 8008e06:	426d      	negs	r5, r5
 8008e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e0c:	4859      	ldr	r0, [pc, #356]	@ (8008f74 <_printf_i+0x238>)
 8008e0e:	230a      	movs	r3, #10
 8008e10:	e011      	b.n	8008e36 <_printf_i+0xfa>
 8008e12:	6821      	ldr	r1, [r4, #0]
 8008e14:	6833      	ldr	r3, [r6, #0]
 8008e16:	0608      	lsls	r0, r1, #24
 8008e18:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e1c:	d402      	bmi.n	8008e24 <_printf_i+0xe8>
 8008e1e:	0649      	lsls	r1, r1, #25
 8008e20:	bf48      	it	mi
 8008e22:	b2ad      	uxthmi	r5, r5
 8008e24:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e26:	4853      	ldr	r0, [pc, #332]	@ (8008f74 <_printf_i+0x238>)
 8008e28:	6033      	str	r3, [r6, #0]
 8008e2a:	bf14      	ite	ne
 8008e2c:	230a      	movne	r3, #10
 8008e2e:	2308      	moveq	r3, #8
 8008e30:	2100      	movs	r1, #0
 8008e32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e36:	6866      	ldr	r6, [r4, #4]
 8008e38:	60a6      	str	r6, [r4, #8]
 8008e3a:	2e00      	cmp	r6, #0
 8008e3c:	bfa2      	ittt	ge
 8008e3e:	6821      	ldrge	r1, [r4, #0]
 8008e40:	f021 0104 	bicge.w	r1, r1, #4
 8008e44:	6021      	strge	r1, [r4, #0]
 8008e46:	b90d      	cbnz	r5, 8008e4c <_printf_i+0x110>
 8008e48:	2e00      	cmp	r6, #0
 8008e4a:	d04b      	beq.n	8008ee4 <_printf_i+0x1a8>
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e52:	fb03 5711 	mls	r7, r3, r1, r5
 8008e56:	5dc7      	ldrb	r7, [r0, r7]
 8008e58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e5c:	462f      	mov	r7, r5
 8008e5e:	42bb      	cmp	r3, r7
 8008e60:	460d      	mov	r5, r1
 8008e62:	d9f4      	bls.n	8008e4e <_printf_i+0x112>
 8008e64:	2b08      	cmp	r3, #8
 8008e66:	d10b      	bne.n	8008e80 <_printf_i+0x144>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	07df      	lsls	r7, r3, #31
 8008e6c:	d508      	bpl.n	8008e80 <_printf_i+0x144>
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	6861      	ldr	r1, [r4, #4]
 8008e72:	4299      	cmp	r1, r3
 8008e74:	bfde      	ittt	le
 8008e76:	2330      	movle	r3, #48	@ 0x30
 8008e78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008e80:	1b92      	subs	r2, r2, r6
 8008e82:	6122      	str	r2, [r4, #16]
 8008e84:	f8cd a000 	str.w	sl, [sp]
 8008e88:	464b      	mov	r3, r9
 8008e8a:	aa03      	add	r2, sp, #12
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4640      	mov	r0, r8
 8008e90:	f7ff fee6 	bl	8008c60 <_printf_common>
 8008e94:	3001      	adds	r0, #1
 8008e96:	d14a      	bne.n	8008f2e <_printf_i+0x1f2>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e9c:	b004      	add	sp, #16
 8008e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	f043 0320 	orr.w	r3, r3, #32
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	4833      	ldr	r0, [pc, #204]	@ (8008f78 <_printf_i+0x23c>)
 8008eac:	2778      	movs	r7, #120	@ 0x78
 8008eae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	6831      	ldr	r1, [r6, #0]
 8008eb6:	061f      	lsls	r7, r3, #24
 8008eb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ebc:	d402      	bmi.n	8008ec4 <_printf_i+0x188>
 8008ebe:	065f      	lsls	r7, r3, #25
 8008ec0:	bf48      	it	mi
 8008ec2:	b2ad      	uxthmi	r5, r5
 8008ec4:	6031      	str	r1, [r6, #0]
 8008ec6:	07d9      	lsls	r1, r3, #31
 8008ec8:	bf44      	itt	mi
 8008eca:	f043 0320 	orrmi.w	r3, r3, #32
 8008ece:	6023      	strmi	r3, [r4, #0]
 8008ed0:	b11d      	cbz	r5, 8008eda <_printf_i+0x19e>
 8008ed2:	2310      	movs	r3, #16
 8008ed4:	e7ac      	b.n	8008e30 <_printf_i+0xf4>
 8008ed6:	4827      	ldr	r0, [pc, #156]	@ (8008f74 <_printf_i+0x238>)
 8008ed8:	e7e9      	b.n	8008eae <_printf_i+0x172>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	f023 0320 	bic.w	r3, r3, #32
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	e7f6      	b.n	8008ed2 <_printf_i+0x196>
 8008ee4:	4616      	mov	r6, r2
 8008ee6:	e7bd      	b.n	8008e64 <_printf_i+0x128>
 8008ee8:	6833      	ldr	r3, [r6, #0]
 8008eea:	6825      	ldr	r5, [r4, #0]
 8008eec:	6961      	ldr	r1, [r4, #20]
 8008eee:	1d18      	adds	r0, r3, #4
 8008ef0:	6030      	str	r0, [r6, #0]
 8008ef2:	062e      	lsls	r6, r5, #24
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	d501      	bpl.n	8008efc <_printf_i+0x1c0>
 8008ef8:	6019      	str	r1, [r3, #0]
 8008efa:	e002      	b.n	8008f02 <_printf_i+0x1c6>
 8008efc:	0668      	lsls	r0, r5, #25
 8008efe:	d5fb      	bpl.n	8008ef8 <_printf_i+0x1bc>
 8008f00:	8019      	strh	r1, [r3, #0]
 8008f02:	2300      	movs	r3, #0
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	4616      	mov	r6, r2
 8008f08:	e7bc      	b.n	8008e84 <_printf_i+0x148>
 8008f0a:	6833      	ldr	r3, [r6, #0]
 8008f0c:	1d1a      	adds	r2, r3, #4
 8008f0e:	6032      	str	r2, [r6, #0]
 8008f10:	681e      	ldr	r6, [r3, #0]
 8008f12:	6862      	ldr	r2, [r4, #4]
 8008f14:	2100      	movs	r1, #0
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7f7 f982 	bl	8000220 <memchr>
 8008f1c:	b108      	cbz	r0, 8008f22 <_printf_i+0x1e6>
 8008f1e:	1b80      	subs	r0, r0, r6
 8008f20:	6060      	str	r0, [r4, #4]
 8008f22:	6863      	ldr	r3, [r4, #4]
 8008f24:	6123      	str	r3, [r4, #16]
 8008f26:	2300      	movs	r3, #0
 8008f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f2c:	e7aa      	b.n	8008e84 <_printf_i+0x148>
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	4632      	mov	r2, r6
 8008f32:	4649      	mov	r1, r9
 8008f34:	4640      	mov	r0, r8
 8008f36:	47d0      	blx	sl
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d0ad      	beq.n	8008e98 <_printf_i+0x15c>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	079b      	lsls	r3, r3, #30
 8008f40:	d413      	bmi.n	8008f6a <_printf_i+0x22e>
 8008f42:	68e0      	ldr	r0, [r4, #12]
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	4298      	cmp	r0, r3
 8008f48:	bfb8      	it	lt
 8008f4a:	4618      	movlt	r0, r3
 8008f4c:	e7a6      	b.n	8008e9c <_printf_i+0x160>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4632      	mov	r2, r6
 8008f52:	4649      	mov	r1, r9
 8008f54:	4640      	mov	r0, r8
 8008f56:	47d0      	blx	sl
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d09d      	beq.n	8008e98 <_printf_i+0x15c>
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	9903      	ldr	r1, [sp, #12]
 8008f62:	1a5b      	subs	r3, r3, r1
 8008f64:	42ab      	cmp	r3, r5
 8008f66:	dcf2      	bgt.n	8008f4e <_printf_i+0x212>
 8008f68:	e7eb      	b.n	8008f42 <_printf_i+0x206>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	f104 0619 	add.w	r6, r4, #25
 8008f70:	e7f5      	b.n	8008f5e <_printf_i+0x222>
 8008f72:	bf00      	nop
 8008f74:	0800b4c6 	.word	0x0800b4c6
 8008f78:	0800b4d7 	.word	0x0800b4d7

08008f7c <std>:
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	b510      	push	{r4, lr}
 8008f80:	4604      	mov	r4, r0
 8008f82:	e9c0 3300 	strd	r3, r3, [r0]
 8008f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f8a:	6083      	str	r3, [r0, #8]
 8008f8c:	8181      	strh	r1, [r0, #12]
 8008f8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f90:	81c2      	strh	r2, [r0, #14]
 8008f92:	6183      	str	r3, [r0, #24]
 8008f94:	4619      	mov	r1, r3
 8008f96:	2208      	movs	r2, #8
 8008f98:	305c      	adds	r0, #92	@ 0x5c
 8008f9a:	f000 f914 	bl	80091c6 <memset>
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd4 <std+0x58>)
 8008fa0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd8 <std+0x5c>)
 8008fa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fdc <std+0x60>)
 8008fa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008faa:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe0 <std+0x64>)
 8008fac:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fae:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <std+0x68>)
 8008fb0:	6224      	str	r4, [r4, #32]
 8008fb2:	429c      	cmp	r4, r3
 8008fb4:	d006      	beq.n	8008fc4 <std+0x48>
 8008fb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008fba:	4294      	cmp	r4, r2
 8008fbc:	d002      	beq.n	8008fc4 <std+0x48>
 8008fbe:	33d0      	adds	r3, #208	@ 0xd0
 8008fc0:	429c      	cmp	r4, r3
 8008fc2:	d105      	bne.n	8008fd0 <std+0x54>
 8008fc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fcc:	f000 b984 	b.w	80092d8 <__retarget_lock_init_recursive>
 8008fd0:	bd10      	pop	{r4, pc}
 8008fd2:	bf00      	nop
 8008fd4:	08009141 	.word	0x08009141
 8008fd8:	08009163 	.word	0x08009163
 8008fdc:	0800919b 	.word	0x0800919b
 8008fe0:	080091bf 	.word	0x080091bf
 8008fe4:	20004628 	.word	0x20004628

08008fe8 <stdio_exit_handler>:
 8008fe8:	4a02      	ldr	r2, [pc, #8]	@ (8008ff4 <stdio_exit_handler+0xc>)
 8008fea:	4903      	ldr	r1, [pc, #12]	@ (8008ff8 <stdio_exit_handler+0x10>)
 8008fec:	4803      	ldr	r0, [pc, #12]	@ (8008ffc <stdio_exit_handler+0x14>)
 8008fee:	f000 b869 	b.w	80090c4 <_fwalk_sglue>
 8008ff2:	bf00      	nop
 8008ff4:	20000010 	.word	0x20000010
 8008ff8:	0800ac35 	.word	0x0800ac35
 8008ffc:	20000020 	.word	0x20000020

08009000 <cleanup_stdio>:
 8009000:	6841      	ldr	r1, [r0, #4]
 8009002:	4b0c      	ldr	r3, [pc, #48]	@ (8009034 <cleanup_stdio+0x34>)
 8009004:	4299      	cmp	r1, r3
 8009006:	b510      	push	{r4, lr}
 8009008:	4604      	mov	r4, r0
 800900a:	d001      	beq.n	8009010 <cleanup_stdio+0x10>
 800900c:	f001 fe12 	bl	800ac34 <_fflush_r>
 8009010:	68a1      	ldr	r1, [r4, #8]
 8009012:	4b09      	ldr	r3, [pc, #36]	@ (8009038 <cleanup_stdio+0x38>)
 8009014:	4299      	cmp	r1, r3
 8009016:	d002      	beq.n	800901e <cleanup_stdio+0x1e>
 8009018:	4620      	mov	r0, r4
 800901a:	f001 fe0b 	bl	800ac34 <_fflush_r>
 800901e:	68e1      	ldr	r1, [r4, #12]
 8009020:	4b06      	ldr	r3, [pc, #24]	@ (800903c <cleanup_stdio+0x3c>)
 8009022:	4299      	cmp	r1, r3
 8009024:	d004      	beq.n	8009030 <cleanup_stdio+0x30>
 8009026:	4620      	mov	r0, r4
 8009028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800902c:	f001 be02 	b.w	800ac34 <_fflush_r>
 8009030:	bd10      	pop	{r4, pc}
 8009032:	bf00      	nop
 8009034:	20004628 	.word	0x20004628
 8009038:	20004690 	.word	0x20004690
 800903c:	200046f8 	.word	0x200046f8

08009040 <global_stdio_init.part.0>:
 8009040:	b510      	push	{r4, lr}
 8009042:	4b0b      	ldr	r3, [pc, #44]	@ (8009070 <global_stdio_init.part.0+0x30>)
 8009044:	4c0b      	ldr	r4, [pc, #44]	@ (8009074 <global_stdio_init.part.0+0x34>)
 8009046:	4a0c      	ldr	r2, [pc, #48]	@ (8009078 <global_stdio_init.part.0+0x38>)
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	4620      	mov	r0, r4
 800904c:	2200      	movs	r2, #0
 800904e:	2104      	movs	r1, #4
 8009050:	f7ff ff94 	bl	8008f7c <std>
 8009054:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009058:	2201      	movs	r2, #1
 800905a:	2109      	movs	r1, #9
 800905c:	f7ff ff8e 	bl	8008f7c <std>
 8009060:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009064:	2202      	movs	r2, #2
 8009066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906a:	2112      	movs	r1, #18
 800906c:	f7ff bf86 	b.w	8008f7c <std>
 8009070:	20004760 	.word	0x20004760
 8009074:	20004628 	.word	0x20004628
 8009078:	08008fe9 	.word	0x08008fe9

0800907c <__sfp_lock_acquire>:
 800907c:	4801      	ldr	r0, [pc, #4]	@ (8009084 <__sfp_lock_acquire+0x8>)
 800907e:	f000 b92c 	b.w	80092da <__retarget_lock_acquire_recursive>
 8009082:	bf00      	nop
 8009084:	20004769 	.word	0x20004769

08009088 <__sfp_lock_release>:
 8009088:	4801      	ldr	r0, [pc, #4]	@ (8009090 <__sfp_lock_release+0x8>)
 800908a:	f000 b927 	b.w	80092dc <__retarget_lock_release_recursive>
 800908e:	bf00      	nop
 8009090:	20004769 	.word	0x20004769

08009094 <__sinit>:
 8009094:	b510      	push	{r4, lr}
 8009096:	4604      	mov	r4, r0
 8009098:	f7ff fff0 	bl	800907c <__sfp_lock_acquire>
 800909c:	6a23      	ldr	r3, [r4, #32]
 800909e:	b11b      	cbz	r3, 80090a8 <__sinit+0x14>
 80090a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a4:	f7ff bff0 	b.w	8009088 <__sfp_lock_release>
 80090a8:	4b04      	ldr	r3, [pc, #16]	@ (80090bc <__sinit+0x28>)
 80090aa:	6223      	str	r3, [r4, #32]
 80090ac:	4b04      	ldr	r3, [pc, #16]	@ (80090c0 <__sinit+0x2c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1f5      	bne.n	80090a0 <__sinit+0xc>
 80090b4:	f7ff ffc4 	bl	8009040 <global_stdio_init.part.0>
 80090b8:	e7f2      	b.n	80090a0 <__sinit+0xc>
 80090ba:	bf00      	nop
 80090bc:	08009001 	.word	0x08009001
 80090c0:	20004760 	.word	0x20004760

080090c4 <_fwalk_sglue>:
 80090c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c8:	4607      	mov	r7, r0
 80090ca:	4688      	mov	r8, r1
 80090cc:	4614      	mov	r4, r2
 80090ce:	2600      	movs	r6, #0
 80090d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090d4:	f1b9 0901 	subs.w	r9, r9, #1
 80090d8:	d505      	bpl.n	80090e6 <_fwalk_sglue+0x22>
 80090da:	6824      	ldr	r4, [r4, #0]
 80090dc:	2c00      	cmp	r4, #0
 80090de:	d1f7      	bne.n	80090d0 <_fwalk_sglue+0xc>
 80090e0:	4630      	mov	r0, r6
 80090e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d907      	bls.n	80090fc <_fwalk_sglue+0x38>
 80090ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090f0:	3301      	adds	r3, #1
 80090f2:	d003      	beq.n	80090fc <_fwalk_sglue+0x38>
 80090f4:	4629      	mov	r1, r5
 80090f6:	4638      	mov	r0, r7
 80090f8:	47c0      	blx	r8
 80090fa:	4306      	orrs	r6, r0
 80090fc:	3568      	adds	r5, #104	@ 0x68
 80090fe:	e7e9      	b.n	80090d4 <_fwalk_sglue+0x10>

08009100 <siprintf>:
 8009100:	b40e      	push	{r1, r2, r3}
 8009102:	b500      	push	{lr}
 8009104:	b09c      	sub	sp, #112	@ 0x70
 8009106:	ab1d      	add	r3, sp, #116	@ 0x74
 8009108:	9002      	str	r0, [sp, #8]
 800910a:	9006      	str	r0, [sp, #24]
 800910c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009110:	4809      	ldr	r0, [pc, #36]	@ (8009138 <siprintf+0x38>)
 8009112:	9107      	str	r1, [sp, #28]
 8009114:	9104      	str	r1, [sp, #16]
 8009116:	4909      	ldr	r1, [pc, #36]	@ (800913c <siprintf+0x3c>)
 8009118:	f853 2b04 	ldr.w	r2, [r3], #4
 800911c:	9105      	str	r1, [sp, #20]
 800911e:	6800      	ldr	r0, [r0, #0]
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	a902      	add	r1, sp, #8
 8009124:	f001 fc06 	bl	800a934 <_svfiprintf_r>
 8009128:	9b02      	ldr	r3, [sp, #8]
 800912a:	2200      	movs	r2, #0
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	b01c      	add	sp, #112	@ 0x70
 8009130:	f85d eb04 	ldr.w	lr, [sp], #4
 8009134:	b003      	add	sp, #12
 8009136:	4770      	bx	lr
 8009138:	2000001c 	.word	0x2000001c
 800913c:	ffff0208 	.word	0xffff0208

08009140 <__sread>:
 8009140:	b510      	push	{r4, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	f000 f878 	bl	800923c <_read_r>
 800914c:	2800      	cmp	r0, #0
 800914e:	bfab      	itete	ge
 8009150:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009152:	89a3      	ldrhlt	r3, [r4, #12]
 8009154:	181b      	addge	r3, r3, r0
 8009156:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800915a:	bfac      	ite	ge
 800915c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800915e:	81a3      	strhlt	r3, [r4, #12]
 8009160:	bd10      	pop	{r4, pc}

08009162 <__swrite>:
 8009162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009166:	461f      	mov	r7, r3
 8009168:	898b      	ldrh	r3, [r1, #12]
 800916a:	05db      	lsls	r3, r3, #23
 800916c:	4605      	mov	r5, r0
 800916e:	460c      	mov	r4, r1
 8009170:	4616      	mov	r6, r2
 8009172:	d505      	bpl.n	8009180 <__swrite+0x1e>
 8009174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009178:	2302      	movs	r3, #2
 800917a:	2200      	movs	r2, #0
 800917c:	f000 f84c 	bl	8009218 <_lseek_r>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009186:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800918a:	81a3      	strh	r3, [r4, #12]
 800918c:	4632      	mov	r2, r6
 800918e:	463b      	mov	r3, r7
 8009190:	4628      	mov	r0, r5
 8009192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009196:	f000 b863 	b.w	8009260 <_write_r>

0800919a <__sseek>:
 800919a:	b510      	push	{r4, lr}
 800919c:	460c      	mov	r4, r1
 800919e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a2:	f000 f839 	bl	8009218 <_lseek_r>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	bf15      	itete	ne
 80091ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091b6:	81a3      	strheq	r3, [r4, #12]
 80091b8:	bf18      	it	ne
 80091ba:	81a3      	strhne	r3, [r4, #12]
 80091bc:	bd10      	pop	{r4, pc}

080091be <__sclose>:
 80091be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c2:	f000 b819 	b.w	80091f8 <_close_r>

080091c6 <memset>:
 80091c6:	4402      	add	r2, r0
 80091c8:	4603      	mov	r3, r0
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d100      	bne.n	80091d0 <memset+0xa>
 80091ce:	4770      	bx	lr
 80091d0:	f803 1b01 	strb.w	r1, [r3], #1
 80091d4:	e7f9      	b.n	80091ca <memset+0x4>

080091d6 <strchr>:
 80091d6:	b2c9      	uxtb	r1, r1
 80091d8:	4603      	mov	r3, r0
 80091da:	4618      	mov	r0, r3
 80091dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091e0:	b112      	cbz	r2, 80091e8 <strchr+0x12>
 80091e2:	428a      	cmp	r2, r1
 80091e4:	d1f9      	bne.n	80091da <strchr+0x4>
 80091e6:	4770      	bx	lr
 80091e8:	2900      	cmp	r1, #0
 80091ea:	bf18      	it	ne
 80091ec:	2000      	movne	r0, #0
 80091ee:	4770      	bx	lr

080091f0 <_localeconv_r>:
 80091f0:	4800      	ldr	r0, [pc, #0]	@ (80091f4 <_localeconv_r+0x4>)
 80091f2:	4770      	bx	lr
 80091f4:	2000015c 	.word	0x2000015c

080091f8 <_close_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d06      	ldr	r5, [pc, #24]	@ (8009214 <_close_r+0x1c>)
 80091fc:	2300      	movs	r3, #0
 80091fe:	4604      	mov	r4, r0
 8009200:	4608      	mov	r0, r1
 8009202:	602b      	str	r3, [r5, #0]
 8009204:	f7f8 ff0a 	bl	800201c <_close>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_close_r+0x1a>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_close_r+0x1a>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	20004764 	.word	0x20004764

08009218 <_lseek_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d07      	ldr	r5, [pc, #28]	@ (8009238 <_lseek_r+0x20>)
 800921c:	4604      	mov	r4, r0
 800921e:	4608      	mov	r0, r1
 8009220:	4611      	mov	r1, r2
 8009222:	2200      	movs	r2, #0
 8009224:	602a      	str	r2, [r5, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	f7f8 ff1f 	bl	800206a <_lseek>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_lseek_r+0x1e>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_lseek_r+0x1e>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	20004764 	.word	0x20004764

0800923c <_read_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d07      	ldr	r5, [pc, #28]	@ (800925c <_read_r+0x20>)
 8009240:	4604      	mov	r4, r0
 8009242:	4608      	mov	r0, r1
 8009244:	4611      	mov	r1, r2
 8009246:	2200      	movs	r2, #0
 8009248:	602a      	str	r2, [r5, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f7f8 fead 	bl	8001faa <_read>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_read_r+0x1e>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_read_r+0x1e>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20004764 	.word	0x20004764

08009260 <_write_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4d07      	ldr	r5, [pc, #28]	@ (8009280 <_write_r+0x20>)
 8009264:	4604      	mov	r4, r0
 8009266:	4608      	mov	r0, r1
 8009268:	4611      	mov	r1, r2
 800926a:	2200      	movs	r2, #0
 800926c:	602a      	str	r2, [r5, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	f7f8 feb8 	bl	8001fe4 <_write>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_write_r+0x1e>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_write_r+0x1e>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	20004764 	.word	0x20004764

08009284 <__errno>:
 8009284:	4b01      	ldr	r3, [pc, #4]	@ (800928c <__errno+0x8>)
 8009286:	6818      	ldr	r0, [r3, #0]
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	2000001c 	.word	0x2000001c

08009290 <__libc_init_array>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	4d0d      	ldr	r5, [pc, #52]	@ (80092c8 <__libc_init_array+0x38>)
 8009294:	4c0d      	ldr	r4, [pc, #52]	@ (80092cc <__libc_init_array+0x3c>)
 8009296:	1b64      	subs	r4, r4, r5
 8009298:	10a4      	asrs	r4, r4, #2
 800929a:	2600      	movs	r6, #0
 800929c:	42a6      	cmp	r6, r4
 800929e:	d109      	bne.n	80092b4 <__libc_init_array+0x24>
 80092a0:	4d0b      	ldr	r5, [pc, #44]	@ (80092d0 <__libc_init_array+0x40>)
 80092a2:	4c0c      	ldr	r4, [pc, #48]	@ (80092d4 <__libc_init_array+0x44>)
 80092a4:	f002 f864 	bl	800b370 <_init>
 80092a8:	1b64      	subs	r4, r4, r5
 80092aa:	10a4      	asrs	r4, r4, #2
 80092ac:	2600      	movs	r6, #0
 80092ae:	42a6      	cmp	r6, r4
 80092b0:	d105      	bne.n	80092be <__libc_init_array+0x2e>
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b8:	4798      	blx	r3
 80092ba:	3601      	adds	r6, #1
 80092bc:	e7ee      	b.n	800929c <__libc_init_array+0xc>
 80092be:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c2:	4798      	blx	r3
 80092c4:	3601      	adds	r6, #1
 80092c6:	e7f2      	b.n	80092ae <__libc_init_array+0x1e>
 80092c8:	0800b830 	.word	0x0800b830
 80092cc:	0800b830 	.word	0x0800b830
 80092d0:	0800b830 	.word	0x0800b830
 80092d4:	0800b834 	.word	0x0800b834

080092d8 <__retarget_lock_init_recursive>:
 80092d8:	4770      	bx	lr

080092da <__retarget_lock_acquire_recursive>:
 80092da:	4770      	bx	lr

080092dc <__retarget_lock_release_recursive>:
 80092dc:	4770      	bx	lr

080092de <quorem>:
 80092de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e2:	6903      	ldr	r3, [r0, #16]
 80092e4:	690c      	ldr	r4, [r1, #16]
 80092e6:	42a3      	cmp	r3, r4
 80092e8:	4607      	mov	r7, r0
 80092ea:	db7e      	blt.n	80093ea <quorem+0x10c>
 80092ec:	3c01      	subs	r4, #1
 80092ee:	f101 0814 	add.w	r8, r1, #20
 80092f2:	00a3      	lsls	r3, r4, #2
 80092f4:	f100 0514 	add.w	r5, r0, #20
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009304:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009308:	3301      	adds	r3, #1
 800930a:	429a      	cmp	r2, r3
 800930c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009310:	fbb2 f6f3 	udiv	r6, r2, r3
 8009314:	d32e      	bcc.n	8009374 <quorem+0x96>
 8009316:	f04f 0a00 	mov.w	sl, #0
 800931a:	46c4      	mov	ip, r8
 800931c:	46ae      	mov	lr, r5
 800931e:	46d3      	mov	fp, sl
 8009320:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009324:	b298      	uxth	r0, r3
 8009326:	fb06 a000 	mla	r0, r6, r0, sl
 800932a:	0c02      	lsrs	r2, r0, #16
 800932c:	0c1b      	lsrs	r3, r3, #16
 800932e:	fb06 2303 	mla	r3, r6, r3, r2
 8009332:	f8de 2000 	ldr.w	r2, [lr]
 8009336:	b280      	uxth	r0, r0
 8009338:	b292      	uxth	r2, r2
 800933a:	1a12      	subs	r2, r2, r0
 800933c:	445a      	add	r2, fp
 800933e:	f8de 0000 	ldr.w	r0, [lr]
 8009342:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009346:	b29b      	uxth	r3, r3
 8009348:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800934c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009350:	b292      	uxth	r2, r2
 8009352:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009356:	45e1      	cmp	r9, ip
 8009358:	f84e 2b04 	str.w	r2, [lr], #4
 800935c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009360:	d2de      	bcs.n	8009320 <quorem+0x42>
 8009362:	9b00      	ldr	r3, [sp, #0]
 8009364:	58eb      	ldr	r3, [r5, r3]
 8009366:	b92b      	cbnz	r3, 8009374 <quorem+0x96>
 8009368:	9b01      	ldr	r3, [sp, #4]
 800936a:	3b04      	subs	r3, #4
 800936c:	429d      	cmp	r5, r3
 800936e:	461a      	mov	r2, r3
 8009370:	d32f      	bcc.n	80093d2 <quorem+0xf4>
 8009372:	613c      	str	r4, [r7, #16]
 8009374:	4638      	mov	r0, r7
 8009376:	f001 f979 	bl	800a66c <__mcmp>
 800937a:	2800      	cmp	r0, #0
 800937c:	db25      	blt.n	80093ca <quorem+0xec>
 800937e:	4629      	mov	r1, r5
 8009380:	2000      	movs	r0, #0
 8009382:	f858 2b04 	ldr.w	r2, [r8], #4
 8009386:	f8d1 c000 	ldr.w	ip, [r1]
 800938a:	fa1f fe82 	uxth.w	lr, r2
 800938e:	fa1f f38c 	uxth.w	r3, ip
 8009392:	eba3 030e 	sub.w	r3, r3, lr
 8009396:	4403      	add	r3, r0
 8009398:	0c12      	lsrs	r2, r2, #16
 800939a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800939e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093a8:	45c1      	cmp	r9, r8
 80093aa:	f841 3b04 	str.w	r3, [r1], #4
 80093ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093b2:	d2e6      	bcs.n	8009382 <quorem+0xa4>
 80093b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093bc:	b922      	cbnz	r2, 80093c8 <quorem+0xea>
 80093be:	3b04      	subs	r3, #4
 80093c0:	429d      	cmp	r5, r3
 80093c2:	461a      	mov	r2, r3
 80093c4:	d30b      	bcc.n	80093de <quorem+0x100>
 80093c6:	613c      	str	r4, [r7, #16]
 80093c8:	3601      	adds	r6, #1
 80093ca:	4630      	mov	r0, r6
 80093cc:	b003      	add	sp, #12
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	6812      	ldr	r2, [r2, #0]
 80093d4:	3b04      	subs	r3, #4
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	d1cb      	bne.n	8009372 <quorem+0x94>
 80093da:	3c01      	subs	r4, #1
 80093dc:	e7c6      	b.n	800936c <quorem+0x8e>
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	3b04      	subs	r3, #4
 80093e2:	2a00      	cmp	r2, #0
 80093e4:	d1ef      	bne.n	80093c6 <quorem+0xe8>
 80093e6:	3c01      	subs	r4, #1
 80093e8:	e7ea      	b.n	80093c0 <quorem+0xe2>
 80093ea:	2000      	movs	r0, #0
 80093ec:	e7ee      	b.n	80093cc <quorem+0xee>
	...

080093f0 <_dtoa_r>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	69c7      	ldr	r7, [r0, #28]
 80093f6:	b099      	sub	sp, #100	@ 0x64
 80093f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80093fc:	ec55 4b10 	vmov	r4, r5, d0
 8009400:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009402:	9109      	str	r1, [sp, #36]	@ 0x24
 8009404:	4683      	mov	fp, r0
 8009406:	920e      	str	r2, [sp, #56]	@ 0x38
 8009408:	9313      	str	r3, [sp, #76]	@ 0x4c
 800940a:	b97f      	cbnz	r7, 800942c <_dtoa_r+0x3c>
 800940c:	2010      	movs	r0, #16
 800940e:	f000 fdfd 	bl	800a00c <malloc>
 8009412:	4602      	mov	r2, r0
 8009414:	f8cb 001c 	str.w	r0, [fp, #28]
 8009418:	b920      	cbnz	r0, 8009424 <_dtoa_r+0x34>
 800941a:	4ba7      	ldr	r3, [pc, #668]	@ (80096b8 <_dtoa_r+0x2c8>)
 800941c:	21ef      	movs	r1, #239	@ 0xef
 800941e:	48a7      	ldr	r0, [pc, #668]	@ (80096bc <_dtoa_r+0x2cc>)
 8009420:	f001 fc68 	bl	800acf4 <__assert_func>
 8009424:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009428:	6007      	str	r7, [r0, #0]
 800942a:	60c7      	str	r7, [r0, #12]
 800942c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009430:	6819      	ldr	r1, [r3, #0]
 8009432:	b159      	cbz	r1, 800944c <_dtoa_r+0x5c>
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	604a      	str	r2, [r1, #4]
 8009438:	2301      	movs	r3, #1
 800943a:	4093      	lsls	r3, r2
 800943c:	608b      	str	r3, [r1, #8]
 800943e:	4658      	mov	r0, fp
 8009440:	f000 feda 	bl	800a1f8 <_Bfree>
 8009444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	1e2b      	subs	r3, r5, #0
 800944e:	bfb9      	ittee	lt
 8009450:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009454:	9303      	strlt	r3, [sp, #12]
 8009456:	2300      	movge	r3, #0
 8009458:	6033      	strge	r3, [r6, #0]
 800945a:	9f03      	ldr	r7, [sp, #12]
 800945c:	4b98      	ldr	r3, [pc, #608]	@ (80096c0 <_dtoa_r+0x2d0>)
 800945e:	bfbc      	itt	lt
 8009460:	2201      	movlt	r2, #1
 8009462:	6032      	strlt	r2, [r6, #0]
 8009464:	43bb      	bics	r3, r7
 8009466:	d112      	bne.n	800948e <_dtoa_r+0x9e>
 8009468:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800946a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009474:	4323      	orrs	r3, r4
 8009476:	f000 854d 	beq.w	8009f14 <_dtoa_r+0xb24>
 800947a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800947c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80096d4 <_dtoa_r+0x2e4>
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 854f 	beq.w	8009f24 <_dtoa_r+0xb34>
 8009486:	f10a 0303 	add.w	r3, sl, #3
 800948a:	f000 bd49 	b.w	8009f20 <_dtoa_r+0xb30>
 800948e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009492:	2200      	movs	r2, #0
 8009494:	ec51 0b17 	vmov	r0, r1, d7
 8009498:	2300      	movs	r3, #0
 800949a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800949e:	f7f7 fb3b 	bl	8000b18 <__aeabi_dcmpeq>
 80094a2:	4680      	mov	r8, r0
 80094a4:	b158      	cbz	r0, 80094be <_dtoa_r+0xce>
 80094a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094a8:	2301      	movs	r3, #1
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094ae:	b113      	cbz	r3, 80094b6 <_dtoa_r+0xc6>
 80094b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094b2:	4b84      	ldr	r3, [pc, #528]	@ (80096c4 <_dtoa_r+0x2d4>)
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80096d8 <_dtoa_r+0x2e8>
 80094ba:	f000 bd33 	b.w	8009f24 <_dtoa_r+0xb34>
 80094be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094c2:	aa16      	add	r2, sp, #88	@ 0x58
 80094c4:	a917      	add	r1, sp, #92	@ 0x5c
 80094c6:	4658      	mov	r0, fp
 80094c8:	f001 f980 	bl	800a7cc <__d2b>
 80094cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80094d0:	4681      	mov	r9, r0
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d077      	beq.n	80095c6 <_dtoa_r+0x1d6>
 80094d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80094dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80094e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80094ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80094f0:	4619      	mov	r1, r3
 80094f2:	2200      	movs	r2, #0
 80094f4:	4b74      	ldr	r3, [pc, #464]	@ (80096c8 <_dtoa_r+0x2d8>)
 80094f6:	f7f6 feef 	bl	80002d8 <__aeabi_dsub>
 80094fa:	a369      	add	r3, pc, #420	@ (adr r3, 80096a0 <_dtoa_r+0x2b0>)
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f7f7 f8a2 	bl	8000648 <__aeabi_dmul>
 8009504:	a368      	add	r3, pc, #416	@ (adr r3, 80096a8 <_dtoa_r+0x2b8>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f7f6 fee7 	bl	80002dc <__adddf3>
 800950e:	4604      	mov	r4, r0
 8009510:	4630      	mov	r0, r6
 8009512:	460d      	mov	r5, r1
 8009514:	f7f7 f82e 	bl	8000574 <__aeabi_i2d>
 8009518:	a365      	add	r3, pc, #404	@ (adr r3, 80096b0 <_dtoa_r+0x2c0>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f7f7 f893 	bl	8000648 <__aeabi_dmul>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4620      	mov	r0, r4
 8009528:	4629      	mov	r1, r5
 800952a:	f7f6 fed7 	bl	80002dc <__adddf3>
 800952e:	4604      	mov	r4, r0
 8009530:	460d      	mov	r5, r1
 8009532:	f7f7 fb39 	bl	8000ba8 <__aeabi_d2iz>
 8009536:	2200      	movs	r2, #0
 8009538:	4607      	mov	r7, r0
 800953a:	2300      	movs	r3, #0
 800953c:	4620      	mov	r0, r4
 800953e:	4629      	mov	r1, r5
 8009540:	f7f7 faf4 	bl	8000b2c <__aeabi_dcmplt>
 8009544:	b140      	cbz	r0, 8009558 <_dtoa_r+0x168>
 8009546:	4638      	mov	r0, r7
 8009548:	f7f7 f814 	bl	8000574 <__aeabi_i2d>
 800954c:	4622      	mov	r2, r4
 800954e:	462b      	mov	r3, r5
 8009550:	f7f7 fae2 	bl	8000b18 <__aeabi_dcmpeq>
 8009554:	b900      	cbnz	r0, 8009558 <_dtoa_r+0x168>
 8009556:	3f01      	subs	r7, #1
 8009558:	2f16      	cmp	r7, #22
 800955a:	d851      	bhi.n	8009600 <_dtoa_r+0x210>
 800955c:	4b5b      	ldr	r3, [pc, #364]	@ (80096cc <_dtoa_r+0x2dc>)
 800955e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800956a:	f7f7 fadf 	bl	8000b2c <__aeabi_dcmplt>
 800956e:	2800      	cmp	r0, #0
 8009570:	d048      	beq.n	8009604 <_dtoa_r+0x214>
 8009572:	3f01      	subs	r7, #1
 8009574:	2300      	movs	r3, #0
 8009576:	9312      	str	r3, [sp, #72]	@ 0x48
 8009578:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800957a:	1b9b      	subs	r3, r3, r6
 800957c:	1e5a      	subs	r2, r3, #1
 800957e:	bf44      	itt	mi
 8009580:	f1c3 0801 	rsbmi	r8, r3, #1
 8009584:	2300      	movmi	r3, #0
 8009586:	9208      	str	r2, [sp, #32]
 8009588:	bf54      	ite	pl
 800958a:	f04f 0800 	movpl.w	r8, #0
 800958e:	9308      	strmi	r3, [sp, #32]
 8009590:	2f00      	cmp	r7, #0
 8009592:	db39      	blt.n	8009608 <_dtoa_r+0x218>
 8009594:	9b08      	ldr	r3, [sp, #32]
 8009596:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009598:	443b      	add	r3, r7
 800959a:	9308      	str	r3, [sp, #32]
 800959c:	2300      	movs	r3, #0
 800959e:	930a      	str	r3, [sp, #40]	@ 0x28
 80095a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095a2:	2b09      	cmp	r3, #9
 80095a4:	d864      	bhi.n	8009670 <_dtoa_r+0x280>
 80095a6:	2b05      	cmp	r3, #5
 80095a8:	bfc4      	itt	gt
 80095aa:	3b04      	subgt	r3, #4
 80095ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80095ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b0:	f1a3 0302 	sub.w	r3, r3, #2
 80095b4:	bfcc      	ite	gt
 80095b6:	2400      	movgt	r4, #0
 80095b8:	2401      	movle	r4, #1
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d863      	bhi.n	8009686 <_dtoa_r+0x296>
 80095be:	e8df f003 	tbb	[pc, r3]
 80095c2:	372a      	.short	0x372a
 80095c4:	5535      	.short	0x5535
 80095c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80095ca:	441e      	add	r6, r3
 80095cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	bfc1      	itttt	gt
 80095d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80095d8:	409f      	lslgt	r7, r3
 80095da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80095de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80095e2:	bfd6      	itet	le
 80095e4:	f1c3 0320 	rsble	r3, r3, #32
 80095e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80095ec:	fa04 f003 	lslle.w	r0, r4, r3
 80095f0:	f7f6 ffb0 	bl	8000554 <__aeabi_ui2d>
 80095f4:	2201      	movs	r2, #1
 80095f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80095fa:	3e01      	subs	r6, #1
 80095fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80095fe:	e777      	b.n	80094f0 <_dtoa_r+0x100>
 8009600:	2301      	movs	r3, #1
 8009602:	e7b8      	b.n	8009576 <_dtoa_r+0x186>
 8009604:	9012      	str	r0, [sp, #72]	@ 0x48
 8009606:	e7b7      	b.n	8009578 <_dtoa_r+0x188>
 8009608:	427b      	negs	r3, r7
 800960a:	930a      	str	r3, [sp, #40]	@ 0x28
 800960c:	2300      	movs	r3, #0
 800960e:	eba8 0807 	sub.w	r8, r8, r7
 8009612:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009614:	e7c4      	b.n	80095a0 <_dtoa_r+0x1b0>
 8009616:	2300      	movs	r3, #0
 8009618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800961a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800961c:	2b00      	cmp	r3, #0
 800961e:	dc35      	bgt.n	800968c <_dtoa_r+0x29c>
 8009620:	2301      	movs	r3, #1
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	9307      	str	r3, [sp, #28]
 8009626:	461a      	mov	r2, r3
 8009628:	920e      	str	r2, [sp, #56]	@ 0x38
 800962a:	e00b      	b.n	8009644 <_dtoa_r+0x254>
 800962c:	2301      	movs	r3, #1
 800962e:	e7f3      	b.n	8009618 <_dtoa_r+0x228>
 8009630:	2300      	movs	r3, #0
 8009632:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009636:	18fb      	adds	r3, r7, r3
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	2b01      	cmp	r3, #1
 800963e:	9307      	str	r3, [sp, #28]
 8009640:	bfb8      	it	lt
 8009642:	2301      	movlt	r3, #1
 8009644:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009648:	2100      	movs	r1, #0
 800964a:	2204      	movs	r2, #4
 800964c:	f102 0514 	add.w	r5, r2, #20
 8009650:	429d      	cmp	r5, r3
 8009652:	d91f      	bls.n	8009694 <_dtoa_r+0x2a4>
 8009654:	6041      	str	r1, [r0, #4]
 8009656:	4658      	mov	r0, fp
 8009658:	f000 fd8e 	bl	800a178 <_Balloc>
 800965c:	4682      	mov	sl, r0
 800965e:	2800      	cmp	r0, #0
 8009660:	d13c      	bne.n	80096dc <_dtoa_r+0x2ec>
 8009662:	4b1b      	ldr	r3, [pc, #108]	@ (80096d0 <_dtoa_r+0x2e0>)
 8009664:	4602      	mov	r2, r0
 8009666:	f240 11af 	movw	r1, #431	@ 0x1af
 800966a:	e6d8      	b.n	800941e <_dtoa_r+0x2e>
 800966c:	2301      	movs	r3, #1
 800966e:	e7e0      	b.n	8009632 <_dtoa_r+0x242>
 8009670:	2401      	movs	r4, #1
 8009672:	2300      	movs	r3, #0
 8009674:	9309      	str	r3, [sp, #36]	@ 0x24
 8009676:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	9307      	str	r3, [sp, #28]
 8009680:	2200      	movs	r2, #0
 8009682:	2312      	movs	r3, #18
 8009684:	e7d0      	b.n	8009628 <_dtoa_r+0x238>
 8009686:	2301      	movs	r3, #1
 8009688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800968a:	e7f5      	b.n	8009678 <_dtoa_r+0x288>
 800968c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	9307      	str	r3, [sp, #28]
 8009692:	e7d7      	b.n	8009644 <_dtoa_r+0x254>
 8009694:	3101      	adds	r1, #1
 8009696:	0052      	lsls	r2, r2, #1
 8009698:	e7d8      	b.n	800964c <_dtoa_r+0x25c>
 800969a:	bf00      	nop
 800969c:	f3af 8000 	nop.w
 80096a0:	636f4361 	.word	0x636f4361
 80096a4:	3fd287a7 	.word	0x3fd287a7
 80096a8:	8b60c8b3 	.word	0x8b60c8b3
 80096ac:	3fc68a28 	.word	0x3fc68a28
 80096b0:	509f79fb 	.word	0x509f79fb
 80096b4:	3fd34413 	.word	0x3fd34413
 80096b8:	0800b4f5 	.word	0x0800b4f5
 80096bc:	0800b50c 	.word	0x0800b50c
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	0800b4c5 	.word	0x0800b4c5
 80096c8:	3ff80000 	.word	0x3ff80000
 80096cc:	0800b608 	.word	0x0800b608
 80096d0:	0800b564 	.word	0x0800b564
 80096d4:	0800b4f1 	.word	0x0800b4f1
 80096d8:	0800b4c4 	.word	0x0800b4c4
 80096dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096e0:	6018      	str	r0, [r3, #0]
 80096e2:	9b07      	ldr	r3, [sp, #28]
 80096e4:	2b0e      	cmp	r3, #14
 80096e6:	f200 80a4 	bhi.w	8009832 <_dtoa_r+0x442>
 80096ea:	2c00      	cmp	r4, #0
 80096ec:	f000 80a1 	beq.w	8009832 <_dtoa_r+0x442>
 80096f0:	2f00      	cmp	r7, #0
 80096f2:	dd33      	ble.n	800975c <_dtoa_r+0x36c>
 80096f4:	4bad      	ldr	r3, [pc, #692]	@ (80099ac <_dtoa_r+0x5bc>)
 80096f6:	f007 020f 	and.w	r2, r7, #15
 80096fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096fe:	ed93 7b00 	vldr	d7, [r3]
 8009702:	05f8      	lsls	r0, r7, #23
 8009704:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009708:	ea4f 1427 	mov.w	r4, r7, asr #4
 800970c:	d516      	bpl.n	800973c <_dtoa_r+0x34c>
 800970e:	4ba8      	ldr	r3, [pc, #672]	@ (80099b0 <_dtoa_r+0x5c0>)
 8009710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009714:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009718:	f7f7 f8c0 	bl	800089c <__aeabi_ddiv>
 800971c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009720:	f004 040f 	and.w	r4, r4, #15
 8009724:	2603      	movs	r6, #3
 8009726:	4da2      	ldr	r5, [pc, #648]	@ (80099b0 <_dtoa_r+0x5c0>)
 8009728:	b954      	cbnz	r4, 8009740 <_dtoa_r+0x350>
 800972a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800972e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009732:	f7f7 f8b3 	bl	800089c <__aeabi_ddiv>
 8009736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800973a:	e028      	b.n	800978e <_dtoa_r+0x39e>
 800973c:	2602      	movs	r6, #2
 800973e:	e7f2      	b.n	8009726 <_dtoa_r+0x336>
 8009740:	07e1      	lsls	r1, r4, #31
 8009742:	d508      	bpl.n	8009756 <_dtoa_r+0x366>
 8009744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800974c:	f7f6 ff7c 	bl	8000648 <__aeabi_dmul>
 8009750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009754:	3601      	adds	r6, #1
 8009756:	1064      	asrs	r4, r4, #1
 8009758:	3508      	adds	r5, #8
 800975a:	e7e5      	b.n	8009728 <_dtoa_r+0x338>
 800975c:	f000 80d2 	beq.w	8009904 <_dtoa_r+0x514>
 8009760:	427c      	negs	r4, r7
 8009762:	4b92      	ldr	r3, [pc, #584]	@ (80099ac <_dtoa_r+0x5bc>)
 8009764:	4d92      	ldr	r5, [pc, #584]	@ (80099b0 <_dtoa_r+0x5c0>)
 8009766:	f004 020f 	and.w	r2, r4, #15
 800976a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009776:	f7f6 ff67 	bl	8000648 <__aeabi_dmul>
 800977a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800977e:	1124      	asrs	r4, r4, #4
 8009780:	2300      	movs	r3, #0
 8009782:	2602      	movs	r6, #2
 8009784:	2c00      	cmp	r4, #0
 8009786:	f040 80b2 	bne.w	80098ee <_dtoa_r+0x4fe>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1d3      	bne.n	8009736 <_dtoa_r+0x346>
 800978e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009790:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80b7 	beq.w	8009908 <_dtoa_r+0x518>
 800979a:	4b86      	ldr	r3, [pc, #536]	@ (80099b4 <_dtoa_r+0x5c4>)
 800979c:	2200      	movs	r2, #0
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f7 f9c3 	bl	8000b2c <__aeabi_dcmplt>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f000 80ae 	beq.w	8009908 <_dtoa_r+0x518>
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 80aa 	beq.w	8009908 <_dtoa_r+0x518>
 80097b4:	9b00      	ldr	r3, [sp, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dd37      	ble.n	800982a <_dtoa_r+0x43a>
 80097ba:	1e7b      	subs	r3, r7, #1
 80097bc:	9304      	str	r3, [sp, #16]
 80097be:	4620      	mov	r0, r4
 80097c0:	4b7d      	ldr	r3, [pc, #500]	@ (80099b8 <_dtoa_r+0x5c8>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	4629      	mov	r1, r5
 80097c6:	f7f6 ff3f 	bl	8000648 <__aeabi_dmul>
 80097ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ce:	9c00      	ldr	r4, [sp, #0]
 80097d0:	3601      	adds	r6, #1
 80097d2:	4630      	mov	r0, r6
 80097d4:	f7f6 fece 	bl	8000574 <__aeabi_i2d>
 80097d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097dc:	f7f6 ff34 	bl	8000648 <__aeabi_dmul>
 80097e0:	4b76      	ldr	r3, [pc, #472]	@ (80099bc <_dtoa_r+0x5cc>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	f7f6 fd7a 	bl	80002dc <__adddf3>
 80097e8:	4605      	mov	r5, r0
 80097ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80097ee:	2c00      	cmp	r4, #0
 80097f0:	f040 808d 	bne.w	800990e <_dtoa_r+0x51e>
 80097f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f8:	4b71      	ldr	r3, [pc, #452]	@ (80099c0 <_dtoa_r+0x5d0>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	f7f6 fd6c 	bl	80002d8 <__aeabi_dsub>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009808:	462a      	mov	r2, r5
 800980a:	4633      	mov	r3, r6
 800980c:	f7f7 f9ac 	bl	8000b68 <__aeabi_dcmpgt>
 8009810:	2800      	cmp	r0, #0
 8009812:	f040 828b 	bne.w	8009d2c <_dtoa_r+0x93c>
 8009816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800981a:	462a      	mov	r2, r5
 800981c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009820:	f7f7 f984 	bl	8000b2c <__aeabi_dcmplt>
 8009824:	2800      	cmp	r0, #0
 8009826:	f040 8128 	bne.w	8009a7a <_dtoa_r+0x68a>
 800982a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800982e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009834:	2b00      	cmp	r3, #0
 8009836:	f2c0 815a 	blt.w	8009aee <_dtoa_r+0x6fe>
 800983a:	2f0e      	cmp	r7, #14
 800983c:	f300 8157 	bgt.w	8009aee <_dtoa_r+0x6fe>
 8009840:	4b5a      	ldr	r3, [pc, #360]	@ (80099ac <_dtoa_r+0x5bc>)
 8009842:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009846:	ed93 7b00 	vldr	d7, [r3]
 800984a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800984c:	2b00      	cmp	r3, #0
 800984e:	ed8d 7b00 	vstr	d7, [sp]
 8009852:	da03      	bge.n	800985c <_dtoa_r+0x46c>
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f340 8101 	ble.w	8009a5e <_dtoa_r+0x66e>
 800985c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009860:	4656      	mov	r6, sl
 8009862:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	f7f7 f817 	bl	800089c <__aeabi_ddiv>
 800986e:	f7f7 f99b 	bl	8000ba8 <__aeabi_d2iz>
 8009872:	4680      	mov	r8, r0
 8009874:	f7f6 fe7e 	bl	8000574 <__aeabi_i2d>
 8009878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800987c:	f7f6 fee4 	bl	8000648 <__aeabi_dmul>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4620      	mov	r0, r4
 8009886:	4629      	mov	r1, r5
 8009888:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800988c:	f7f6 fd24 	bl	80002d8 <__aeabi_dsub>
 8009890:	f806 4b01 	strb.w	r4, [r6], #1
 8009894:	9d07      	ldr	r5, [sp, #28]
 8009896:	eba6 040a 	sub.w	r4, r6, sl
 800989a:	42a5      	cmp	r5, r4
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	f040 8117 	bne.w	8009ad2 <_dtoa_r+0x6e2>
 80098a4:	f7f6 fd1a 	bl	80002dc <__adddf3>
 80098a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098ac:	4604      	mov	r4, r0
 80098ae:	460d      	mov	r5, r1
 80098b0:	f7f7 f95a 	bl	8000b68 <__aeabi_dcmpgt>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	f040 80f9 	bne.w	8009aac <_dtoa_r+0x6bc>
 80098ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098be:	4620      	mov	r0, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	f7f7 f929 	bl	8000b18 <__aeabi_dcmpeq>
 80098c6:	b118      	cbz	r0, 80098d0 <_dtoa_r+0x4e0>
 80098c8:	f018 0f01 	tst.w	r8, #1
 80098cc:	f040 80ee 	bne.w	8009aac <_dtoa_r+0x6bc>
 80098d0:	4649      	mov	r1, r9
 80098d2:	4658      	mov	r0, fp
 80098d4:	f000 fc90 	bl	800a1f8 <_Bfree>
 80098d8:	2300      	movs	r3, #0
 80098da:	7033      	strb	r3, [r6, #0]
 80098dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098de:	3701      	adds	r7, #1
 80098e0:	601f      	str	r7, [r3, #0]
 80098e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 831d 	beq.w	8009f24 <_dtoa_r+0xb34>
 80098ea:	601e      	str	r6, [r3, #0]
 80098ec:	e31a      	b.n	8009f24 <_dtoa_r+0xb34>
 80098ee:	07e2      	lsls	r2, r4, #31
 80098f0:	d505      	bpl.n	80098fe <_dtoa_r+0x50e>
 80098f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098f6:	f7f6 fea7 	bl	8000648 <__aeabi_dmul>
 80098fa:	3601      	adds	r6, #1
 80098fc:	2301      	movs	r3, #1
 80098fe:	1064      	asrs	r4, r4, #1
 8009900:	3508      	adds	r5, #8
 8009902:	e73f      	b.n	8009784 <_dtoa_r+0x394>
 8009904:	2602      	movs	r6, #2
 8009906:	e742      	b.n	800978e <_dtoa_r+0x39e>
 8009908:	9c07      	ldr	r4, [sp, #28]
 800990a:	9704      	str	r7, [sp, #16]
 800990c:	e761      	b.n	80097d2 <_dtoa_r+0x3e2>
 800990e:	4b27      	ldr	r3, [pc, #156]	@ (80099ac <_dtoa_r+0x5bc>)
 8009910:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009916:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800991a:	4454      	add	r4, sl
 800991c:	2900      	cmp	r1, #0
 800991e:	d053      	beq.n	80099c8 <_dtoa_r+0x5d8>
 8009920:	4928      	ldr	r1, [pc, #160]	@ (80099c4 <_dtoa_r+0x5d4>)
 8009922:	2000      	movs	r0, #0
 8009924:	f7f6 ffba 	bl	800089c <__aeabi_ddiv>
 8009928:	4633      	mov	r3, r6
 800992a:	462a      	mov	r2, r5
 800992c:	f7f6 fcd4 	bl	80002d8 <__aeabi_dsub>
 8009930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009934:	4656      	mov	r6, sl
 8009936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800993a:	f7f7 f935 	bl	8000ba8 <__aeabi_d2iz>
 800993e:	4605      	mov	r5, r0
 8009940:	f7f6 fe18 	bl	8000574 <__aeabi_i2d>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800994c:	f7f6 fcc4 	bl	80002d8 <__aeabi_dsub>
 8009950:	3530      	adds	r5, #48	@ 0x30
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800995a:	f806 5b01 	strb.w	r5, [r6], #1
 800995e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009962:	f7f7 f8e3 	bl	8000b2c <__aeabi_dcmplt>
 8009966:	2800      	cmp	r0, #0
 8009968:	d171      	bne.n	8009a4e <_dtoa_r+0x65e>
 800996a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800996e:	4911      	ldr	r1, [pc, #68]	@ (80099b4 <_dtoa_r+0x5c4>)
 8009970:	2000      	movs	r0, #0
 8009972:	f7f6 fcb1 	bl	80002d8 <__aeabi_dsub>
 8009976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800997a:	f7f7 f8d7 	bl	8000b2c <__aeabi_dcmplt>
 800997e:	2800      	cmp	r0, #0
 8009980:	f040 8095 	bne.w	8009aae <_dtoa_r+0x6be>
 8009984:	42a6      	cmp	r6, r4
 8009986:	f43f af50 	beq.w	800982a <_dtoa_r+0x43a>
 800998a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800998e:	4b0a      	ldr	r3, [pc, #40]	@ (80099b8 <_dtoa_r+0x5c8>)
 8009990:	2200      	movs	r2, #0
 8009992:	f7f6 fe59 	bl	8000648 <__aeabi_dmul>
 8009996:	4b08      	ldr	r3, [pc, #32]	@ (80099b8 <_dtoa_r+0x5c8>)
 8009998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800999c:	2200      	movs	r2, #0
 800999e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099a2:	f7f6 fe51 	bl	8000648 <__aeabi_dmul>
 80099a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099aa:	e7c4      	b.n	8009936 <_dtoa_r+0x546>
 80099ac:	0800b608 	.word	0x0800b608
 80099b0:	0800b5e0 	.word	0x0800b5e0
 80099b4:	3ff00000 	.word	0x3ff00000
 80099b8:	40240000 	.word	0x40240000
 80099bc:	401c0000 	.word	0x401c0000
 80099c0:	40140000 	.word	0x40140000
 80099c4:	3fe00000 	.word	0x3fe00000
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	f7f6 fe3c 	bl	8000648 <__aeabi_dmul>
 80099d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80099d6:	4656      	mov	r6, sl
 80099d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099dc:	f7f7 f8e4 	bl	8000ba8 <__aeabi_d2iz>
 80099e0:	4605      	mov	r5, r0
 80099e2:	f7f6 fdc7 	bl	8000574 <__aeabi_i2d>
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ee:	f7f6 fc73 	bl	80002d8 <__aeabi_dsub>
 80099f2:	3530      	adds	r5, #48	@ 0x30
 80099f4:	f806 5b01 	strb.w	r5, [r6], #1
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	42a6      	cmp	r6, r4
 80099fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a02:	f04f 0200 	mov.w	r2, #0
 8009a06:	d124      	bne.n	8009a52 <_dtoa_r+0x662>
 8009a08:	4bac      	ldr	r3, [pc, #688]	@ (8009cbc <_dtoa_r+0x8cc>)
 8009a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a0e:	f7f6 fc65 	bl	80002dc <__adddf3>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a1a:	f7f7 f8a5 	bl	8000b68 <__aeabi_dcmpgt>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d145      	bne.n	8009aae <_dtoa_r+0x6be>
 8009a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a26:	49a5      	ldr	r1, [pc, #660]	@ (8009cbc <_dtoa_r+0x8cc>)
 8009a28:	2000      	movs	r0, #0
 8009a2a:	f7f6 fc55 	bl	80002d8 <__aeabi_dsub>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a36:	f7f7 f879 	bl	8000b2c <__aeabi_dcmplt>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	f43f aef5 	beq.w	800982a <_dtoa_r+0x43a>
 8009a40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009a42:	1e73      	subs	r3, r6, #1
 8009a44:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a4a:	2b30      	cmp	r3, #48	@ 0x30
 8009a4c:	d0f8      	beq.n	8009a40 <_dtoa_r+0x650>
 8009a4e:	9f04      	ldr	r7, [sp, #16]
 8009a50:	e73e      	b.n	80098d0 <_dtoa_r+0x4e0>
 8009a52:	4b9b      	ldr	r3, [pc, #620]	@ (8009cc0 <_dtoa_r+0x8d0>)
 8009a54:	f7f6 fdf8 	bl	8000648 <__aeabi_dmul>
 8009a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a5c:	e7bc      	b.n	80099d8 <_dtoa_r+0x5e8>
 8009a5e:	d10c      	bne.n	8009a7a <_dtoa_r+0x68a>
 8009a60:	4b98      	ldr	r3, [pc, #608]	@ (8009cc4 <_dtoa_r+0x8d4>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a68:	f7f6 fdee 	bl	8000648 <__aeabi_dmul>
 8009a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a70:	f7f7 f870 	bl	8000b54 <__aeabi_dcmpge>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f000 8157 	beq.w	8009d28 <_dtoa_r+0x938>
 8009a7a:	2400      	movs	r4, #0
 8009a7c:	4625      	mov	r5, r4
 8009a7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a80:	43db      	mvns	r3, r3
 8009a82:	9304      	str	r3, [sp, #16]
 8009a84:	4656      	mov	r6, sl
 8009a86:	2700      	movs	r7, #0
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4658      	mov	r0, fp
 8009a8c:	f000 fbb4 	bl	800a1f8 <_Bfree>
 8009a90:	2d00      	cmp	r5, #0
 8009a92:	d0dc      	beq.n	8009a4e <_dtoa_r+0x65e>
 8009a94:	b12f      	cbz	r7, 8009aa2 <_dtoa_r+0x6b2>
 8009a96:	42af      	cmp	r7, r5
 8009a98:	d003      	beq.n	8009aa2 <_dtoa_r+0x6b2>
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	4658      	mov	r0, fp
 8009a9e:	f000 fbab 	bl	800a1f8 <_Bfree>
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	4658      	mov	r0, fp
 8009aa6:	f000 fba7 	bl	800a1f8 <_Bfree>
 8009aaa:	e7d0      	b.n	8009a4e <_dtoa_r+0x65e>
 8009aac:	9704      	str	r7, [sp, #16]
 8009aae:	4633      	mov	r3, r6
 8009ab0:	461e      	mov	r6, r3
 8009ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ab6:	2a39      	cmp	r2, #57	@ 0x39
 8009ab8:	d107      	bne.n	8009aca <_dtoa_r+0x6da>
 8009aba:	459a      	cmp	sl, r3
 8009abc:	d1f8      	bne.n	8009ab0 <_dtoa_r+0x6c0>
 8009abe:	9a04      	ldr	r2, [sp, #16]
 8009ac0:	3201      	adds	r2, #1
 8009ac2:	9204      	str	r2, [sp, #16]
 8009ac4:	2230      	movs	r2, #48	@ 0x30
 8009ac6:	f88a 2000 	strb.w	r2, [sl]
 8009aca:	781a      	ldrb	r2, [r3, #0]
 8009acc:	3201      	adds	r2, #1
 8009ace:	701a      	strb	r2, [r3, #0]
 8009ad0:	e7bd      	b.n	8009a4e <_dtoa_r+0x65e>
 8009ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8009cc0 <_dtoa_r+0x8d0>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f7f6 fdb7 	bl	8000648 <__aeabi_dmul>
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	4604      	mov	r4, r0
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	f7f7 f819 	bl	8000b18 <__aeabi_dcmpeq>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f43f aebb 	beq.w	8009862 <_dtoa_r+0x472>
 8009aec:	e6f0      	b.n	80098d0 <_dtoa_r+0x4e0>
 8009aee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009af0:	2a00      	cmp	r2, #0
 8009af2:	f000 80db 	beq.w	8009cac <_dtoa_r+0x8bc>
 8009af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009af8:	2a01      	cmp	r2, #1
 8009afa:	f300 80bf 	bgt.w	8009c7c <_dtoa_r+0x88c>
 8009afe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	f000 80b7 	beq.w	8009c74 <_dtoa_r+0x884>
 8009b06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b0c:	4646      	mov	r6, r8
 8009b0e:	9a08      	ldr	r2, [sp, #32]
 8009b10:	2101      	movs	r1, #1
 8009b12:	441a      	add	r2, r3
 8009b14:	4658      	mov	r0, fp
 8009b16:	4498      	add	r8, r3
 8009b18:	9208      	str	r2, [sp, #32]
 8009b1a:	f000 fc21 	bl	800a360 <__i2b>
 8009b1e:	4605      	mov	r5, r0
 8009b20:	b15e      	cbz	r6, 8009b3a <_dtoa_r+0x74a>
 8009b22:	9b08      	ldr	r3, [sp, #32]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dd08      	ble.n	8009b3a <_dtoa_r+0x74a>
 8009b28:	42b3      	cmp	r3, r6
 8009b2a:	9a08      	ldr	r2, [sp, #32]
 8009b2c:	bfa8      	it	ge
 8009b2e:	4633      	movge	r3, r6
 8009b30:	eba8 0803 	sub.w	r8, r8, r3
 8009b34:	1af6      	subs	r6, r6, r3
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	9308      	str	r3, [sp, #32]
 8009b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b3c:	b1f3      	cbz	r3, 8009b7c <_dtoa_r+0x78c>
 8009b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 80b7 	beq.w	8009cb4 <_dtoa_r+0x8c4>
 8009b46:	b18c      	cbz	r4, 8009b6c <_dtoa_r+0x77c>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	4658      	mov	r0, fp
 8009b4e:	f000 fcc7 	bl	800a4e0 <__pow5mult>
 8009b52:	464a      	mov	r2, r9
 8009b54:	4601      	mov	r1, r0
 8009b56:	4605      	mov	r5, r0
 8009b58:	4658      	mov	r0, fp
 8009b5a:	f000 fc17 	bl	800a38c <__multiply>
 8009b5e:	4649      	mov	r1, r9
 8009b60:	9004      	str	r0, [sp, #16]
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 fb48 	bl	800a1f8 <_Bfree>
 8009b68:	9b04      	ldr	r3, [sp, #16]
 8009b6a:	4699      	mov	r9, r3
 8009b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b6e:	1b1a      	subs	r2, r3, r4
 8009b70:	d004      	beq.n	8009b7c <_dtoa_r+0x78c>
 8009b72:	4649      	mov	r1, r9
 8009b74:	4658      	mov	r0, fp
 8009b76:	f000 fcb3 	bl	800a4e0 <__pow5mult>
 8009b7a:	4681      	mov	r9, r0
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	4658      	mov	r0, fp
 8009b80:	f000 fbee 	bl	800a360 <__i2b>
 8009b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b86:	4604      	mov	r4, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 81cf 	beq.w	8009f2c <_dtoa_r+0xb3c>
 8009b8e:	461a      	mov	r2, r3
 8009b90:	4601      	mov	r1, r0
 8009b92:	4658      	mov	r0, fp
 8009b94:	f000 fca4 	bl	800a4e0 <__pow5mult>
 8009b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	f300 8095 	bgt.w	8009ccc <_dtoa_r+0x8dc>
 8009ba2:	9b02      	ldr	r3, [sp, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f040 8087 	bne.w	8009cb8 <_dtoa_r+0x8c8>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f040 8089 	bne.w	8009cc8 <_dtoa_r+0x8d8>
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bbc:	0d1b      	lsrs	r3, r3, #20
 8009bbe:	051b      	lsls	r3, r3, #20
 8009bc0:	b12b      	cbz	r3, 8009bce <_dtoa_r+0x7de>
 8009bc2:	9b08      	ldr	r3, [sp, #32]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	9308      	str	r3, [sp, #32]
 8009bc8:	f108 0801 	add.w	r8, r8, #1
 8009bcc:	2301      	movs	r3, #1
 8009bce:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 81b0 	beq.w	8009f38 <_dtoa_r+0xb48>
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bde:	6918      	ldr	r0, [r3, #16]
 8009be0:	f000 fb72 	bl	800a2c8 <__hi0bits>
 8009be4:	f1c0 0020 	rsb	r0, r0, #32
 8009be8:	9b08      	ldr	r3, [sp, #32]
 8009bea:	4418      	add	r0, r3
 8009bec:	f010 001f 	ands.w	r0, r0, #31
 8009bf0:	d077      	beq.n	8009ce2 <_dtoa_r+0x8f2>
 8009bf2:	f1c0 0320 	rsb	r3, r0, #32
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	dd6b      	ble.n	8009cd2 <_dtoa_r+0x8e2>
 8009bfa:	9b08      	ldr	r3, [sp, #32]
 8009bfc:	f1c0 001c 	rsb	r0, r0, #28
 8009c00:	4403      	add	r3, r0
 8009c02:	4480      	add	r8, r0
 8009c04:	4406      	add	r6, r0
 8009c06:	9308      	str	r3, [sp, #32]
 8009c08:	f1b8 0f00 	cmp.w	r8, #0
 8009c0c:	dd05      	ble.n	8009c1a <_dtoa_r+0x82a>
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4642      	mov	r2, r8
 8009c12:	4658      	mov	r0, fp
 8009c14:	f000 fcbe 	bl	800a594 <__lshift>
 8009c18:	4681      	mov	r9, r0
 8009c1a:	9b08      	ldr	r3, [sp, #32]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dd05      	ble.n	8009c2c <_dtoa_r+0x83c>
 8009c20:	4621      	mov	r1, r4
 8009c22:	461a      	mov	r2, r3
 8009c24:	4658      	mov	r0, fp
 8009c26:	f000 fcb5 	bl	800a594 <__lshift>
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d059      	beq.n	8009ce6 <_dtoa_r+0x8f6>
 8009c32:	4621      	mov	r1, r4
 8009c34:	4648      	mov	r0, r9
 8009c36:	f000 fd19 	bl	800a66c <__mcmp>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	da53      	bge.n	8009ce6 <_dtoa_r+0x8f6>
 8009c3e:	1e7b      	subs	r3, r7, #1
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	4649      	mov	r1, r9
 8009c44:	2300      	movs	r3, #0
 8009c46:	220a      	movs	r2, #10
 8009c48:	4658      	mov	r0, fp
 8009c4a:	f000 faf7 	bl	800a23c <__multadd>
 8009c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c50:	4681      	mov	r9, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 8172 	beq.w	8009f3c <_dtoa_r+0xb4c>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	220a      	movs	r2, #10
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f000 faec 	bl	800a23c <__multadd>
 8009c64:	9b00      	ldr	r3, [sp, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	4605      	mov	r5, r0
 8009c6a:	dc67      	bgt.n	8009d3c <_dtoa_r+0x94c>
 8009c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	dc41      	bgt.n	8009cf6 <_dtoa_r+0x906>
 8009c72:	e063      	b.n	8009d3c <_dtoa_r+0x94c>
 8009c74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c7a:	e746      	b.n	8009b0a <_dtoa_r+0x71a>
 8009c7c:	9b07      	ldr	r3, [sp, #28]
 8009c7e:	1e5c      	subs	r4, r3, #1
 8009c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	bfbf      	itttt	lt
 8009c86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009c88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009c8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009c8c:	1ae3      	sublt	r3, r4, r3
 8009c8e:	bfb4      	ite	lt
 8009c90:	18d2      	addlt	r2, r2, r3
 8009c92:	1b1c      	subge	r4, r3, r4
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	bfbc      	itt	lt
 8009c98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009c9a:	2400      	movlt	r4, #0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	bfb5      	itete	lt
 8009ca0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ca4:	9b07      	ldrge	r3, [sp, #28]
 8009ca6:	2300      	movlt	r3, #0
 8009ca8:	4646      	movge	r6, r8
 8009caa:	e730      	b.n	8009b0e <_dtoa_r+0x71e>
 8009cac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009cae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009cb0:	4646      	mov	r6, r8
 8009cb2:	e735      	b.n	8009b20 <_dtoa_r+0x730>
 8009cb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cb6:	e75c      	b.n	8009b72 <_dtoa_r+0x782>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e788      	b.n	8009bce <_dtoa_r+0x7de>
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	40240000 	.word	0x40240000
 8009cc4:	40140000 	.word	0x40140000
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	e780      	b.n	8009bce <_dtoa_r+0x7de>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cd0:	e782      	b.n	8009bd8 <_dtoa_r+0x7e8>
 8009cd2:	d099      	beq.n	8009c08 <_dtoa_r+0x818>
 8009cd4:	9a08      	ldr	r2, [sp, #32]
 8009cd6:	331c      	adds	r3, #28
 8009cd8:	441a      	add	r2, r3
 8009cda:	4498      	add	r8, r3
 8009cdc:	441e      	add	r6, r3
 8009cde:	9208      	str	r2, [sp, #32]
 8009ce0:	e792      	b.n	8009c08 <_dtoa_r+0x818>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	e7f6      	b.n	8009cd4 <_dtoa_r+0x8e4>
 8009ce6:	9b07      	ldr	r3, [sp, #28]
 8009ce8:	9704      	str	r7, [sp, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dc20      	bgt.n	8009d30 <_dtoa_r+0x940>
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	dd1e      	ble.n	8009d34 <_dtoa_r+0x944>
 8009cf6:	9b00      	ldr	r3, [sp, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f47f aec0 	bne.w	8009a7e <_dtoa_r+0x68e>
 8009cfe:	4621      	mov	r1, r4
 8009d00:	2205      	movs	r2, #5
 8009d02:	4658      	mov	r0, fp
 8009d04:	f000 fa9a 	bl	800a23c <__multadd>
 8009d08:	4601      	mov	r1, r0
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	f000 fcad 	bl	800a66c <__mcmp>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f77f aeb3 	ble.w	8009a7e <_dtoa_r+0x68e>
 8009d18:	4656      	mov	r6, sl
 8009d1a:	2331      	movs	r3, #49	@ 0x31
 8009d1c:	f806 3b01 	strb.w	r3, [r6], #1
 8009d20:	9b04      	ldr	r3, [sp, #16]
 8009d22:	3301      	adds	r3, #1
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	e6ae      	b.n	8009a86 <_dtoa_r+0x696>
 8009d28:	9c07      	ldr	r4, [sp, #28]
 8009d2a:	9704      	str	r7, [sp, #16]
 8009d2c:	4625      	mov	r5, r4
 8009d2e:	e7f3      	b.n	8009d18 <_dtoa_r+0x928>
 8009d30:	9b07      	ldr	r3, [sp, #28]
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f000 8104 	beq.w	8009f44 <_dtoa_r+0xb54>
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	dd05      	ble.n	8009d4c <_dtoa_r+0x95c>
 8009d40:	4629      	mov	r1, r5
 8009d42:	4632      	mov	r2, r6
 8009d44:	4658      	mov	r0, fp
 8009d46:	f000 fc25 	bl	800a594 <__lshift>
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d05a      	beq.n	8009e08 <_dtoa_r+0xa18>
 8009d52:	6869      	ldr	r1, [r5, #4]
 8009d54:	4658      	mov	r0, fp
 8009d56:	f000 fa0f 	bl	800a178 <_Balloc>
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	b928      	cbnz	r0, 8009d6a <_dtoa_r+0x97a>
 8009d5e:	4b84      	ldr	r3, [pc, #528]	@ (8009f70 <_dtoa_r+0xb80>)
 8009d60:	4602      	mov	r2, r0
 8009d62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d66:	f7ff bb5a 	b.w	800941e <_dtoa_r+0x2e>
 8009d6a:	692a      	ldr	r2, [r5, #16]
 8009d6c:	3202      	adds	r2, #2
 8009d6e:	0092      	lsls	r2, r2, #2
 8009d70:	f105 010c 	add.w	r1, r5, #12
 8009d74:	300c      	adds	r0, #12
 8009d76:	f000 ffaf 	bl	800acd8 <memcpy>
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4658      	mov	r0, fp
 8009d80:	f000 fc08 	bl	800a594 <__lshift>
 8009d84:	f10a 0301 	add.w	r3, sl, #1
 8009d88:	9307      	str	r3, [sp, #28]
 8009d8a:	9b00      	ldr	r3, [sp, #0]
 8009d8c:	4453      	add	r3, sl
 8009d8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d90:	9b02      	ldr	r3, [sp, #8]
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	462f      	mov	r7, r5
 8009d98:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	9b07      	ldr	r3, [sp, #28]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	3b01      	subs	r3, #1
 8009da2:	4648      	mov	r0, r9
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	f7ff fa9a 	bl	80092de <quorem>
 8009daa:	4639      	mov	r1, r7
 8009dac:	9002      	str	r0, [sp, #8]
 8009dae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009db2:	4648      	mov	r0, r9
 8009db4:	f000 fc5a 	bl	800a66c <__mcmp>
 8009db8:	462a      	mov	r2, r5
 8009dba:	9008      	str	r0, [sp, #32]
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	f000 fc70 	bl	800a6a4 <__mdiff>
 8009dc4:	68c2      	ldr	r2, [r0, #12]
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	bb02      	cbnz	r2, 8009e0c <_dtoa_r+0xa1c>
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4648      	mov	r0, r9
 8009dce:	f000 fc4d 	bl	800a66c <__mcmp>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4658      	mov	r0, fp
 8009dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009dda:	f000 fa0d 	bl	800a1f8 <_Bfree>
 8009dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009de2:	9e07      	ldr	r6, [sp, #28]
 8009de4:	ea43 0102 	orr.w	r1, r3, r2
 8009de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dea:	4319      	orrs	r1, r3
 8009dec:	d110      	bne.n	8009e10 <_dtoa_r+0xa20>
 8009dee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009df2:	d029      	beq.n	8009e48 <_dtoa_r+0xa58>
 8009df4:	9b08      	ldr	r3, [sp, #32]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	dd02      	ble.n	8009e00 <_dtoa_r+0xa10>
 8009dfa:	9b02      	ldr	r3, [sp, #8]
 8009dfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e00:	9b00      	ldr	r3, [sp, #0]
 8009e02:	f883 8000 	strb.w	r8, [r3]
 8009e06:	e63f      	b.n	8009a88 <_dtoa_r+0x698>
 8009e08:	4628      	mov	r0, r5
 8009e0a:	e7bb      	b.n	8009d84 <_dtoa_r+0x994>
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	e7e1      	b.n	8009dd4 <_dtoa_r+0x9e4>
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	db04      	blt.n	8009e20 <_dtoa_r+0xa30>
 8009e16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	d120      	bne.n	8009e62 <_dtoa_r+0xa72>
 8009e20:	2a00      	cmp	r2, #0
 8009e22:	dded      	ble.n	8009e00 <_dtoa_r+0xa10>
 8009e24:	4649      	mov	r1, r9
 8009e26:	2201      	movs	r2, #1
 8009e28:	4658      	mov	r0, fp
 8009e2a:	f000 fbb3 	bl	800a594 <__lshift>
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4681      	mov	r9, r0
 8009e32:	f000 fc1b 	bl	800a66c <__mcmp>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	dc03      	bgt.n	8009e42 <_dtoa_r+0xa52>
 8009e3a:	d1e1      	bne.n	8009e00 <_dtoa_r+0xa10>
 8009e3c:	f018 0f01 	tst.w	r8, #1
 8009e40:	d0de      	beq.n	8009e00 <_dtoa_r+0xa10>
 8009e42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e46:	d1d8      	bne.n	8009dfa <_dtoa_r+0xa0a>
 8009e48:	9a00      	ldr	r2, [sp, #0]
 8009e4a:	2339      	movs	r3, #57	@ 0x39
 8009e4c:	7013      	strb	r3, [r2, #0]
 8009e4e:	4633      	mov	r3, r6
 8009e50:	461e      	mov	r6, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e58:	2a39      	cmp	r2, #57	@ 0x39
 8009e5a:	d052      	beq.n	8009f02 <_dtoa_r+0xb12>
 8009e5c:	3201      	adds	r2, #1
 8009e5e:	701a      	strb	r2, [r3, #0]
 8009e60:	e612      	b.n	8009a88 <_dtoa_r+0x698>
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	dd07      	ble.n	8009e76 <_dtoa_r+0xa86>
 8009e66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e6a:	d0ed      	beq.n	8009e48 <_dtoa_r+0xa58>
 8009e6c:	9a00      	ldr	r2, [sp, #0]
 8009e6e:	f108 0301 	add.w	r3, r8, #1
 8009e72:	7013      	strb	r3, [r2, #0]
 8009e74:	e608      	b.n	8009a88 <_dtoa_r+0x698>
 8009e76:	9b07      	ldr	r3, [sp, #28]
 8009e78:	9a07      	ldr	r2, [sp, #28]
 8009e7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d028      	beq.n	8009ed6 <_dtoa_r+0xae6>
 8009e84:	4649      	mov	r1, r9
 8009e86:	2300      	movs	r3, #0
 8009e88:	220a      	movs	r2, #10
 8009e8a:	4658      	mov	r0, fp
 8009e8c:	f000 f9d6 	bl	800a23c <__multadd>
 8009e90:	42af      	cmp	r7, r5
 8009e92:	4681      	mov	r9, r0
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	f04f 020a 	mov.w	r2, #10
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	4658      	mov	r0, fp
 8009ea0:	d107      	bne.n	8009eb2 <_dtoa_r+0xac2>
 8009ea2:	f000 f9cb 	bl	800a23c <__multadd>
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	9b07      	ldr	r3, [sp, #28]
 8009eac:	3301      	adds	r3, #1
 8009eae:	9307      	str	r3, [sp, #28]
 8009eb0:	e774      	b.n	8009d9c <_dtoa_r+0x9ac>
 8009eb2:	f000 f9c3 	bl	800a23c <__multadd>
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4607      	mov	r7, r0
 8009eba:	2300      	movs	r3, #0
 8009ebc:	220a      	movs	r2, #10
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	f000 f9bc 	bl	800a23c <__multadd>
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	e7f0      	b.n	8009eaa <_dtoa_r+0xaba>
 8009ec8:	9b00      	ldr	r3, [sp, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	bfcc      	ite	gt
 8009ece:	461e      	movgt	r6, r3
 8009ed0:	2601      	movle	r6, #1
 8009ed2:	4456      	add	r6, sl
 8009ed4:	2700      	movs	r7, #0
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	2201      	movs	r2, #1
 8009eda:	4658      	mov	r0, fp
 8009edc:	f000 fb5a 	bl	800a594 <__lshift>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4681      	mov	r9, r0
 8009ee4:	f000 fbc2 	bl	800a66c <__mcmp>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	dcb0      	bgt.n	8009e4e <_dtoa_r+0xa5e>
 8009eec:	d102      	bne.n	8009ef4 <_dtoa_r+0xb04>
 8009eee:	f018 0f01 	tst.w	r8, #1
 8009ef2:	d1ac      	bne.n	8009e4e <_dtoa_r+0xa5e>
 8009ef4:	4633      	mov	r3, r6
 8009ef6:	461e      	mov	r6, r3
 8009ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009efc:	2a30      	cmp	r2, #48	@ 0x30
 8009efe:	d0fa      	beq.n	8009ef6 <_dtoa_r+0xb06>
 8009f00:	e5c2      	b.n	8009a88 <_dtoa_r+0x698>
 8009f02:	459a      	cmp	sl, r3
 8009f04:	d1a4      	bne.n	8009e50 <_dtoa_r+0xa60>
 8009f06:	9b04      	ldr	r3, [sp, #16]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	9304      	str	r3, [sp, #16]
 8009f0c:	2331      	movs	r3, #49	@ 0x31
 8009f0e:	f88a 3000 	strb.w	r3, [sl]
 8009f12:	e5b9      	b.n	8009a88 <_dtoa_r+0x698>
 8009f14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009f74 <_dtoa_r+0xb84>
 8009f1a:	b11b      	cbz	r3, 8009f24 <_dtoa_r+0xb34>
 8009f1c:	f10a 0308 	add.w	r3, sl, #8
 8009f20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	4650      	mov	r0, sl
 8009f26:	b019      	add	sp, #100	@ 0x64
 8009f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	f77f ae37 	ble.w	8009ba2 <_dtoa_r+0x7b2>
 8009f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f38:	2001      	movs	r0, #1
 8009f3a:	e655      	b.n	8009be8 <_dtoa_r+0x7f8>
 8009f3c:	9b00      	ldr	r3, [sp, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f77f aed6 	ble.w	8009cf0 <_dtoa_r+0x900>
 8009f44:	4656      	mov	r6, sl
 8009f46:	4621      	mov	r1, r4
 8009f48:	4648      	mov	r0, r9
 8009f4a:	f7ff f9c8 	bl	80092de <quorem>
 8009f4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f52:	f806 8b01 	strb.w	r8, [r6], #1
 8009f56:	9b00      	ldr	r3, [sp, #0]
 8009f58:	eba6 020a 	sub.w	r2, r6, sl
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	ddb3      	ble.n	8009ec8 <_dtoa_r+0xad8>
 8009f60:	4649      	mov	r1, r9
 8009f62:	2300      	movs	r3, #0
 8009f64:	220a      	movs	r2, #10
 8009f66:	4658      	mov	r0, fp
 8009f68:	f000 f968 	bl	800a23c <__multadd>
 8009f6c:	4681      	mov	r9, r0
 8009f6e:	e7ea      	b.n	8009f46 <_dtoa_r+0xb56>
 8009f70:	0800b564 	.word	0x0800b564
 8009f74:	0800b4e8 	.word	0x0800b4e8

08009f78 <_free_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	d041      	beq.n	800a004 <_free_r+0x8c>
 8009f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f84:	1f0c      	subs	r4, r1, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfb8      	it	lt
 8009f8a:	18e4      	addlt	r4, r4, r3
 8009f8c:	f000 f8e8 	bl	800a160 <__malloc_lock>
 8009f90:	4a1d      	ldr	r2, [pc, #116]	@ (800a008 <_free_r+0x90>)
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	b933      	cbnz	r3, 8009fa4 <_free_r+0x2c>
 8009f96:	6063      	str	r3, [r4, #4]
 8009f98:	6014      	str	r4, [r2, #0]
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa0:	f000 b8e4 	b.w	800a16c <__malloc_unlock>
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	d908      	bls.n	8009fba <_free_r+0x42>
 8009fa8:	6820      	ldr	r0, [r4, #0]
 8009faa:	1821      	adds	r1, r4, r0
 8009fac:	428b      	cmp	r3, r1
 8009fae:	bf01      	itttt	eq
 8009fb0:	6819      	ldreq	r1, [r3, #0]
 8009fb2:	685b      	ldreq	r3, [r3, #4]
 8009fb4:	1809      	addeq	r1, r1, r0
 8009fb6:	6021      	streq	r1, [r4, #0]
 8009fb8:	e7ed      	b.n	8009f96 <_free_r+0x1e>
 8009fba:	461a      	mov	r2, r3
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b10b      	cbz	r3, 8009fc4 <_free_r+0x4c>
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d9fa      	bls.n	8009fba <_free_r+0x42>
 8009fc4:	6811      	ldr	r1, [r2, #0]
 8009fc6:	1850      	adds	r0, r2, r1
 8009fc8:	42a0      	cmp	r0, r4
 8009fca:	d10b      	bne.n	8009fe4 <_free_r+0x6c>
 8009fcc:	6820      	ldr	r0, [r4, #0]
 8009fce:	4401      	add	r1, r0
 8009fd0:	1850      	adds	r0, r2, r1
 8009fd2:	4283      	cmp	r3, r0
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	d1e0      	bne.n	8009f9a <_free_r+0x22>
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	6053      	str	r3, [r2, #4]
 8009fde:	4408      	add	r0, r1
 8009fe0:	6010      	str	r0, [r2, #0]
 8009fe2:	e7da      	b.n	8009f9a <_free_r+0x22>
 8009fe4:	d902      	bls.n	8009fec <_free_r+0x74>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	e7d6      	b.n	8009f9a <_free_r+0x22>
 8009fec:	6820      	ldr	r0, [r4, #0]
 8009fee:	1821      	adds	r1, r4, r0
 8009ff0:	428b      	cmp	r3, r1
 8009ff2:	bf04      	itt	eq
 8009ff4:	6819      	ldreq	r1, [r3, #0]
 8009ff6:	685b      	ldreq	r3, [r3, #4]
 8009ff8:	6063      	str	r3, [r4, #4]
 8009ffa:	bf04      	itt	eq
 8009ffc:	1809      	addeq	r1, r1, r0
 8009ffe:	6021      	streq	r1, [r4, #0]
 800a000:	6054      	str	r4, [r2, #4]
 800a002:	e7ca      	b.n	8009f9a <_free_r+0x22>
 800a004:	bd38      	pop	{r3, r4, r5, pc}
 800a006:	bf00      	nop
 800a008:	20004770 	.word	0x20004770

0800a00c <malloc>:
 800a00c:	4b02      	ldr	r3, [pc, #8]	@ (800a018 <malloc+0xc>)
 800a00e:	4601      	mov	r1, r0
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	f000 b825 	b.w	800a060 <_malloc_r>
 800a016:	bf00      	nop
 800a018:	2000001c 	.word	0x2000001c

0800a01c <sbrk_aligned>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	4e0f      	ldr	r6, [pc, #60]	@ (800a05c <sbrk_aligned+0x40>)
 800a020:	460c      	mov	r4, r1
 800a022:	6831      	ldr	r1, [r6, #0]
 800a024:	4605      	mov	r5, r0
 800a026:	b911      	cbnz	r1, 800a02e <sbrk_aligned+0x12>
 800a028:	f000 fe46 	bl	800acb8 <_sbrk_r>
 800a02c:	6030      	str	r0, [r6, #0]
 800a02e:	4621      	mov	r1, r4
 800a030:	4628      	mov	r0, r5
 800a032:	f000 fe41 	bl	800acb8 <_sbrk_r>
 800a036:	1c43      	adds	r3, r0, #1
 800a038:	d103      	bne.n	800a042 <sbrk_aligned+0x26>
 800a03a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a03e:	4620      	mov	r0, r4
 800a040:	bd70      	pop	{r4, r5, r6, pc}
 800a042:	1cc4      	adds	r4, r0, #3
 800a044:	f024 0403 	bic.w	r4, r4, #3
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d0f8      	beq.n	800a03e <sbrk_aligned+0x22>
 800a04c:	1a21      	subs	r1, r4, r0
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 fe32 	bl	800acb8 <_sbrk_r>
 800a054:	3001      	adds	r0, #1
 800a056:	d1f2      	bne.n	800a03e <sbrk_aligned+0x22>
 800a058:	e7ef      	b.n	800a03a <sbrk_aligned+0x1e>
 800a05a:	bf00      	nop
 800a05c:	2000476c 	.word	0x2000476c

0800a060 <_malloc_r>:
 800a060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a064:	1ccd      	adds	r5, r1, #3
 800a066:	f025 0503 	bic.w	r5, r5, #3
 800a06a:	3508      	adds	r5, #8
 800a06c:	2d0c      	cmp	r5, #12
 800a06e:	bf38      	it	cc
 800a070:	250c      	movcc	r5, #12
 800a072:	2d00      	cmp	r5, #0
 800a074:	4606      	mov	r6, r0
 800a076:	db01      	blt.n	800a07c <_malloc_r+0x1c>
 800a078:	42a9      	cmp	r1, r5
 800a07a:	d904      	bls.n	800a086 <_malloc_r+0x26>
 800a07c:	230c      	movs	r3, #12
 800a07e:	6033      	str	r3, [r6, #0]
 800a080:	2000      	movs	r0, #0
 800a082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a15c <_malloc_r+0xfc>
 800a08a:	f000 f869 	bl	800a160 <__malloc_lock>
 800a08e:	f8d8 3000 	ldr.w	r3, [r8]
 800a092:	461c      	mov	r4, r3
 800a094:	bb44      	cbnz	r4, 800a0e8 <_malloc_r+0x88>
 800a096:	4629      	mov	r1, r5
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ffbf 	bl	800a01c <sbrk_aligned>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	d158      	bne.n	800a156 <_malloc_r+0xf6>
 800a0a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a0a8:	4627      	mov	r7, r4
 800a0aa:	2f00      	cmp	r7, #0
 800a0ac:	d143      	bne.n	800a136 <_malloc_r+0xd6>
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	d04b      	beq.n	800a14a <_malloc_r+0xea>
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	eb04 0903 	add.w	r9, r4, r3
 800a0bc:	f000 fdfc 	bl	800acb8 <_sbrk_r>
 800a0c0:	4581      	cmp	r9, r0
 800a0c2:	d142      	bne.n	800a14a <_malloc_r+0xea>
 800a0c4:	6821      	ldr	r1, [r4, #0]
 800a0c6:	1a6d      	subs	r5, r5, r1
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7ff ffa6 	bl	800a01c <sbrk_aligned>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d03a      	beq.n	800a14a <_malloc_r+0xea>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	442b      	add	r3, r5
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	f8d8 3000 	ldr.w	r3, [r8]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	bb62      	cbnz	r2, 800a13c <_malloc_r+0xdc>
 800a0e2:	f8c8 7000 	str.w	r7, [r8]
 800a0e6:	e00f      	b.n	800a108 <_malloc_r+0xa8>
 800a0e8:	6822      	ldr	r2, [r4, #0]
 800a0ea:	1b52      	subs	r2, r2, r5
 800a0ec:	d420      	bmi.n	800a130 <_malloc_r+0xd0>
 800a0ee:	2a0b      	cmp	r2, #11
 800a0f0:	d917      	bls.n	800a122 <_malloc_r+0xc2>
 800a0f2:	1961      	adds	r1, r4, r5
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	6025      	str	r5, [r4, #0]
 800a0f8:	bf18      	it	ne
 800a0fa:	6059      	strne	r1, [r3, #4]
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	bf08      	it	eq
 800a100:	f8c8 1000 	streq.w	r1, [r8]
 800a104:	5162      	str	r2, [r4, r5]
 800a106:	604b      	str	r3, [r1, #4]
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 f82f 	bl	800a16c <__malloc_unlock>
 800a10e:	f104 000b 	add.w	r0, r4, #11
 800a112:	1d23      	adds	r3, r4, #4
 800a114:	f020 0007 	bic.w	r0, r0, #7
 800a118:	1ac2      	subs	r2, r0, r3
 800a11a:	bf1c      	itt	ne
 800a11c:	1a1b      	subne	r3, r3, r0
 800a11e:	50a3      	strne	r3, [r4, r2]
 800a120:	e7af      	b.n	800a082 <_malloc_r+0x22>
 800a122:	6862      	ldr	r2, [r4, #4]
 800a124:	42a3      	cmp	r3, r4
 800a126:	bf0c      	ite	eq
 800a128:	f8c8 2000 	streq.w	r2, [r8]
 800a12c:	605a      	strne	r2, [r3, #4]
 800a12e:	e7eb      	b.n	800a108 <_malloc_r+0xa8>
 800a130:	4623      	mov	r3, r4
 800a132:	6864      	ldr	r4, [r4, #4]
 800a134:	e7ae      	b.n	800a094 <_malloc_r+0x34>
 800a136:	463c      	mov	r4, r7
 800a138:	687f      	ldr	r7, [r7, #4]
 800a13a:	e7b6      	b.n	800a0aa <_malloc_r+0x4a>
 800a13c:	461a      	mov	r2, r3
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	42a3      	cmp	r3, r4
 800a142:	d1fb      	bne.n	800a13c <_malloc_r+0xdc>
 800a144:	2300      	movs	r3, #0
 800a146:	6053      	str	r3, [r2, #4]
 800a148:	e7de      	b.n	800a108 <_malloc_r+0xa8>
 800a14a:	230c      	movs	r3, #12
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	4630      	mov	r0, r6
 800a150:	f000 f80c 	bl	800a16c <__malloc_unlock>
 800a154:	e794      	b.n	800a080 <_malloc_r+0x20>
 800a156:	6005      	str	r5, [r0, #0]
 800a158:	e7d6      	b.n	800a108 <_malloc_r+0xa8>
 800a15a:	bf00      	nop
 800a15c:	20004770 	.word	0x20004770

0800a160 <__malloc_lock>:
 800a160:	4801      	ldr	r0, [pc, #4]	@ (800a168 <__malloc_lock+0x8>)
 800a162:	f7ff b8ba 	b.w	80092da <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	20004768 	.word	0x20004768

0800a16c <__malloc_unlock>:
 800a16c:	4801      	ldr	r0, [pc, #4]	@ (800a174 <__malloc_unlock+0x8>)
 800a16e:	f7ff b8b5 	b.w	80092dc <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	20004768 	.word	0x20004768

0800a178 <_Balloc>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	69c6      	ldr	r6, [r0, #28]
 800a17c:	4604      	mov	r4, r0
 800a17e:	460d      	mov	r5, r1
 800a180:	b976      	cbnz	r6, 800a1a0 <_Balloc+0x28>
 800a182:	2010      	movs	r0, #16
 800a184:	f7ff ff42 	bl	800a00c <malloc>
 800a188:	4602      	mov	r2, r0
 800a18a:	61e0      	str	r0, [r4, #28]
 800a18c:	b920      	cbnz	r0, 800a198 <_Balloc+0x20>
 800a18e:	4b18      	ldr	r3, [pc, #96]	@ (800a1f0 <_Balloc+0x78>)
 800a190:	4818      	ldr	r0, [pc, #96]	@ (800a1f4 <_Balloc+0x7c>)
 800a192:	216b      	movs	r1, #107	@ 0x6b
 800a194:	f000 fdae 	bl	800acf4 <__assert_func>
 800a198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a19c:	6006      	str	r6, [r0, #0]
 800a19e:	60c6      	str	r6, [r0, #12]
 800a1a0:	69e6      	ldr	r6, [r4, #28]
 800a1a2:	68f3      	ldr	r3, [r6, #12]
 800a1a4:	b183      	cbz	r3, 800a1c8 <_Balloc+0x50>
 800a1a6:	69e3      	ldr	r3, [r4, #28]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ae:	b9b8      	cbnz	r0, 800a1e0 <_Balloc+0x68>
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a1b6:	1d72      	adds	r2, r6, #5
 800a1b8:	0092      	lsls	r2, r2, #2
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fdb8 	bl	800ad30 <_calloc_r>
 800a1c0:	b160      	cbz	r0, 800a1dc <_Balloc+0x64>
 800a1c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1c6:	e00e      	b.n	800a1e6 <_Balloc+0x6e>
 800a1c8:	2221      	movs	r2, #33	@ 0x21
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fdaf 	bl	800ad30 <_calloc_r>
 800a1d2:	69e3      	ldr	r3, [r4, #28]
 800a1d4:	60f0      	str	r0, [r6, #12]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e4      	bne.n	800a1a6 <_Balloc+0x2e>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	6802      	ldr	r2, [r0, #0]
 800a1e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1ec:	e7f7      	b.n	800a1de <_Balloc+0x66>
 800a1ee:	bf00      	nop
 800a1f0:	0800b4f5 	.word	0x0800b4f5
 800a1f4:	0800b575 	.word	0x0800b575

0800a1f8 <_Bfree>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	69c6      	ldr	r6, [r0, #28]
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	b976      	cbnz	r6, 800a220 <_Bfree+0x28>
 800a202:	2010      	movs	r0, #16
 800a204:	f7ff ff02 	bl	800a00c <malloc>
 800a208:	4602      	mov	r2, r0
 800a20a:	61e8      	str	r0, [r5, #28]
 800a20c:	b920      	cbnz	r0, 800a218 <_Bfree+0x20>
 800a20e:	4b09      	ldr	r3, [pc, #36]	@ (800a234 <_Bfree+0x3c>)
 800a210:	4809      	ldr	r0, [pc, #36]	@ (800a238 <_Bfree+0x40>)
 800a212:	218f      	movs	r1, #143	@ 0x8f
 800a214:	f000 fd6e 	bl	800acf4 <__assert_func>
 800a218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a21c:	6006      	str	r6, [r0, #0]
 800a21e:	60c6      	str	r6, [r0, #12]
 800a220:	b13c      	cbz	r4, 800a232 <_Bfree+0x3a>
 800a222:	69eb      	ldr	r3, [r5, #28]
 800a224:	6862      	ldr	r2, [r4, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a22c:	6021      	str	r1, [r4, #0]
 800a22e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	0800b4f5 	.word	0x0800b4f5
 800a238:	0800b575 	.word	0x0800b575

0800a23c <__multadd>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	690d      	ldr	r5, [r1, #16]
 800a242:	4607      	mov	r7, r0
 800a244:	460c      	mov	r4, r1
 800a246:	461e      	mov	r6, r3
 800a248:	f101 0c14 	add.w	ip, r1, #20
 800a24c:	2000      	movs	r0, #0
 800a24e:	f8dc 3000 	ldr.w	r3, [ip]
 800a252:	b299      	uxth	r1, r3
 800a254:	fb02 6101 	mla	r1, r2, r1, r6
 800a258:	0c1e      	lsrs	r6, r3, #16
 800a25a:	0c0b      	lsrs	r3, r1, #16
 800a25c:	fb02 3306 	mla	r3, r2, r6, r3
 800a260:	b289      	uxth	r1, r1
 800a262:	3001      	adds	r0, #1
 800a264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a268:	4285      	cmp	r5, r0
 800a26a:	f84c 1b04 	str.w	r1, [ip], #4
 800a26e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a272:	dcec      	bgt.n	800a24e <__multadd+0x12>
 800a274:	b30e      	cbz	r6, 800a2ba <__multadd+0x7e>
 800a276:	68a3      	ldr	r3, [r4, #8]
 800a278:	42ab      	cmp	r3, r5
 800a27a:	dc19      	bgt.n	800a2b0 <__multadd+0x74>
 800a27c:	6861      	ldr	r1, [r4, #4]
 800a27e:	4638      	mov	r0, r7
 800a280:	3101      	adds	r1, #1
 800a282:	f7ff ff79 	bl	800a178 <_Balloc>
 800a286:	4680      	mov	r8, r0
 800a288:	b928      	cbnz	r0, 800a296 <__multadd+0x5a>
 800a28a:	4602      	mov	r2, r0
 800a28c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <__multadd+0x84>)
 800a28e:	480d      	ldr	r0, [pc, #52]	@ (800a2c4 <__multadd+0x88>)
 800a290:	21ba      	movs	r1, #186	@ 0xba
 800a292:	f000 fd2f 	bl	800acf4 <__assert_func>
 800a296:	6922      	ldr	r2, [r4, #16]
 800a298:	3202      	adds	r2, #2
 800a29a:	f104 010c 	add.w	r1, r4, #12
 800a29e:	0092      	lsls	r2, r2, #2
 800a2a0:	300c      	adds	r0, #12
 800a2a2:	f000 fd19 	bl	800acd8 <memcpy>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff ffa5 	bl	800a1f8 <_Bfree>
 800a2ae:	4644      	mov	r4, r8
 800a2b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	615e      	str	r6, [r3, #20]
 800a2b8:	6125      	str	r5, [r4, #16]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c0:	0800b564 	.word	0x0800b564
 800a2c4:	0800b575 	.word	0x0800b575

0800a2c8 <__hi0bits>:
 800a2c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	bf36      	itet	cc
 800a2d0:	0403      	lslcc	r3, r0, #16
 800a2d2:	2000      	movcs	r0, #0
 800a2d4:	2010      	movcc	r0, #16
 800a2d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2da:	bf3c      	itt	cc
 800a2dc:	021b      	lslcc	r3, r3, #8
 800a2de:	3008      	addcc	r0, #8
 800a2e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2e4:	bf3c      	itt	cc
 800a2e6:	011b      	lslcc	r3, r3, #4
 800a2e8:	3004      	addcc	r0, #4
 800a2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ee:	bf3c      	itt	cc
 800a2f0:	009b      	lslcc	r3, r3, #2
 800a2f2:	3002      	addcc	r0, #2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	db05      	blt.n	800a304 <__hi0bits+0x3c>
 800a2f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2fc:	f100 0001 	add.w	r0, r0, #1
 800a300:	bf08      	it	eq
 800a302:	2020      	moveq	r0, #32
 800a304:	4770      	bx	lr

0800a306 <__lo0bits>:
 800a306:	6803      	ldr	r3, [r0, #0]
 800a308:	4602      	mov	r2, r0
 800a30a:	f013 0007 	ands.w	r0, r3, #7
 800a30e:	d00b      	beq.n	800a328 <__lo0bits+0x22>
 800a310:	07d9      	lsls	r1, r3, #31
 800a312:	d421      	bmi.n	800a358 <__lo0bits+0x52>
 800a314:	0798      	lsls	r0, r3, #30
 800a316:	bf49      	itett	mi
 800a318:	085b      	lsrmi	r3, r3, #1
 800a31a:	089b      	lsrpl	r3, r3, #2
 800a31c:	2001      	movmi	r0, #1
 800a31e:	6013      	strmi	r3, [r2, #0]
 800a320:	bf5c      	itt	pl
 800a322:	6013      	strpl	r3, [r2, #0]
 800a324:	2002      	movpl	r0, #2
 800a326:	4770      	bx	lr
 800a328:	b299      	uxth	r1, r3
 800a32a:	b909      	cbnz	r1, 800a330 <__lo0bits+0x2a>
 800a32c:	0c1b      	lsrs	r3, r3, #16
 800a32e:	2010      	movs	r0, #16
 800a330:	b2d9      	uxtb	r1, r3
 800a332:	b909      	cbnz	r1, 800a338 <__lo0bits+0x32>
 800a334:	3008      	adds	r0, #8
 800a336:	0a1b      	lsrs	r3, r3, #8
 800a338:	0719      	lsls	r1, r3, #28
 800a33a:	bf04      	itt	eq
 800a33c:	091b      	lsreq	r3, r3, #4
 800a33e:	3004      	addeq	r0, #4
 800a340:	0799      	lsls	r1, r3, #30
 800a342:	bf04      	itt	eq
 800a344:	089b      	lsreq	r3, r3, #2
 800a346:	3002      	addeq	r0, #2
 800a348:	07d9      	lsls	r1, r3, #31
 800a34a:	d403      	bmi.n	800a354 <__lo0bits+0x4e>
 800a34c:	085b      	lsrs	r3, r3, #1
 800a34e:	f100 0001 	add.w	r0, r0, #1
 800a352:	d003      	beq.n	800a35c <__lo0bits+0x56>
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	4770      	bx	lr
 800a358:	2000      	movs	r0, #0
 800a35a:	4770      	bx	lr
 800a35c:	2020      	movs	r0, #32
 800a35e:	4770      	bx	lr

0800a360 <__i2b>:
 800a360:	b510      	push	{r4, lr}
 800a362:	460c      	mov	r4, r1
 800a364:	2101      	movs	r1, #1
 800a366:	f7ff ff07 	bl	800a178 <_Balloc>
 800a36a:	4602      	mov	r2, r0
 800a36c:	b928      	cbnz	r0, 800a37a <__i2b+0x1a>
 800a36e:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <__i2b+0x24>)
 800a370:	4805      	ldr	r0, [pc, #20]	@ (800a388 <__i2b+0x28>)
 800a372:	f240 1145 	movw	r1, #325	@ 0x145
 800a376:	f000 fcbd 	bl	800acf4 <__assert_func>
 800a37a:	2301      	movs	r3, #1
 800a37c:	6144      	str	r4, [r0, #20]
 800a37e:	6103      	str	r3, [r0, #16]
 800a380:	bd10      	pop	{r4, pc}
 800a382:	bf00      	nop
 800a384:	0800b564 	.word	0x0800b564
 800a388:	0800b575 	.word	0x0800b575

0800a38c <__multiply>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	4614      	mov	r4, r2
 800a392:	690a      	ldr	r2, [r1, #16]
 800a394:	6923      	ldr	r3, [r4, #16]
 800a396:	429a      	cmp	r2, r3
 800a398:	bfa8      	it	ge
 800a39a:	4623      	movge	r3, r4
 800a39c:	460f      	mov	r7, r1
 800a39e:	bfa4      	itt	ge
 800a3a0:	460c      	movge	r4, r1
 800a3a2:	461f      	movge	r7, r3
 800a3a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a3a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a3ac:	68a3      	ldr	r3, [r4, #8]
 800a3ae:	6861      	ldr	r1, [r4, #4]
 800a3b0:	eb0a 0609 	add.w	r6, sl, r9
 800a3b4:	42b3      	cmp	r3, r6
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	bfb8      	it	lt
 800a3ba:	3101      	addlt	r1, #1
 800a3bc:	f7ff fedc 	bl	800a178 <_Balloc>
 800a3c0:	b930      	cbnz	r0, 800a3d0 <__multiply+0x44>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4b44      	ldr	r3, [pc, #272]	@ (800a4d8 <__multiply+0x14c>)
 800a3c6:	4845      	ldr	r0, [pc, #276]	@ (800a4dc <__multiply+0x150>)
 800a3c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3cc:	f000 fc92 	bl	800acf4 <__assert_func>
 800a3d0:	f100 0514 	add.w	r5, r0, #20
 800a3d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3d8:	462b      	mov	r3, r5
 800a3da:	2200      	movs	r2, #0
 800a3dc:	4543      	cmp	r3, r8
 800a3de:	d321      	bcc.n	800a424 <__multiply+0x98>
 800a3e0:	f107 0114 	add.w	r1, r7, #20
 800a3e4:	f104 0214 	add.w	r2, r4, #20
 800a3e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a3ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	1b13      	subs	r3, r2, r4
 800a3f4:	3b15      	subs	r3, #21
 800a3f6:	f023 0303 	bic.w	r3, r3, #3
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	f104 0715 	add.w	r7, r4, #21
 800a400:	42ba      	cmp	r2, r7
 800a402:	bf38      	it	cc
 800a404:	2304      	movcc	r3, #4
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	9b02      	ldr	r3, [sp, #8]
 800a40a:	9103      	str	r1, [sp, #12]
 800a40c:	428b      	cmp	r3, r1
 800a40e:	d80c      	bhi.n	800a42a <__multiply+0x9e>
 800a410:	2e00      	cmp	r6, #0
 800a412:	dd03      	ble.n	800a41c <__multiply+0x90>
 800a414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d05b      	beq.n	800a4d4 <__multiply+0x148>
 800a41c:	6106      	str	r6, [r0, #16]
 800a41e:	b005      	add	sp, #20
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	f843 2b04 	str.w	r2, [r3], #4
 800a428:	e7d8      	b.n	800a3dc <__multiply+0x50>
 800a42a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a42e:	f1ba 0f00 	cmp.w	sl, #0
 800a432:	d024      	beq.n	800a47e <__multiply+0xf2>
 800a434:	f104 0e14 	add.w	lr, r4, #20
 800a438:	46a9      	mov	r9, r5
 800a43a:	f04f 0c00 	mov.w	ip, #0
 800a43e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a442:	f8d9 3000 	ldr.w	r3, [r9]
 800a446:	fa1f fb87 	uxth.w	fp, r7
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a450:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a454:	f8d9 7000 	ldr.w	r7, [r9]
 800a458:	4463      	add	r3, ip
 800a45a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a45e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a462:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a466:	b29b      	uxth	r3, r3
 800a468:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a46c:	4572      	cmp	r2, lr
 800a46e:	f849 3b04 	str.w	r3, [r9], #4
 800a472:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a476:	d8e2      	bhi.n	800a43e <__multiply+0xb2>
 800a478:	9b01      	ldr	r3, [sp, #4]
 800a47a:	f845 c003 	str.w	ip, [r5, r3]
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a484:	3104      	adds	r1, #4
 800a486:	f1b9 0f00 	cmp.w	r9, #0
 800a48a:	d021      	beq.n	800a4d0 <__multiply+0x144>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	f104 0c14 	add.w	ip, r4, #20
 800a492:	46ae      	mov	lr, r5
 800a494:	f04f 0a00 	mov.w	sl, #0
 800a498:	f8bc b000 	ldrh.w	fp, [ip]
 800a49c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a4a0:	fb09 770b 	mla	r7, r9, fp, r7
 800a4a4:	4457      	add	r7, sl
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a4ac:	f84e 3b04 	str.w	r3, [lr], #4
 800a4b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a4b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4b8:	f8be 3000 	ldrh.w	r3, [lr]
 800a4bc:	fb09 330a 	mla	r3, r9, sl, r3
 800a4c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a4c4:	4562      	cmp	r2, ip
 800a4c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ca:	d8e5      	bhi.n	800a498 <__multiply+0x10c>
 800a4cc:	9f01      	ldr	r7, [sp, #4]
 800a4ce:	51eb      	str	r3, [r5, r7]
 800a4d0:	3504      	adds	r5, #4
 800a4d2:	e799      	b.n	800a408 <__multiply+0x7c>
 800a4d4:	3e01      	subs	r6, #1
 800a4d6:	e79b      	b.n	800a410 <__multiply+0x84>
 800a4d8:	0800b564 	.word	0x0800b564
 800a4dc:	0800b575 	.word	0x0800b575

0800a4e0 <__pow5mult>:
 800a4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e4:	4615      	mov	r5, r2
 800a4e6:	f012 0203 	ands.w	r2, r2, #3
 800a4ea:	4607      	mov	r7, r0
 800a4ec:	460e      	mov	r6, r1
 800a4ee:	d007      	beq.n	800a500 <__pow5mult+0x20>
 800a4f0:	4c25      	ldr	r4, [pc, #148]	@ (800a588 <__pow5mult+0xa8>)
 800a4f2:	3a01      	subs	r2, #1
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4fa:	f7ff fe9f 	bl	800a23c <__multadd>
 800a4fe:	4606      	mov	r6, r0
 800a500:	10ad      	asrs	r5, r5, #2
 800a502:	d03d      	beq.n	800a580 <__pow5mult+0xa0>
 800a504:	69fc      	ldr	r4, [r7, #28]
 800a506:	b97c      	cbnz	r4, 800a528 <__pow5mult+0x48>
 800a508:	2010      	movs	r0, #16
 800a50a:	f7ff fd7f 	bl	800a00c <malloc>
 800a50e:	4602      	mov	r2, r0
 800a510:	61f8      	str	r0, [r7, #28]
 800a512:	b928      	cbnz	r0, 800a520 <__pow5mult+0x40>
 800a514:	4b1d      	ldr	r3, [pc, #116]	@ (800a58c <__pow5mult+0xac>)
 800a516:	481e      	ldr	r0, [pc, #120]	@ (800a590 <__pow5mult+0xb0>)
 800a518:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a51c:	f000 fbea 	bl	800acf4 <__assert_func>
 800a520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a524:	6004      	str	r4, [r0, #0]
 800a526:	60c4      	str	r4, [r0, #12]
 800a528:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a530:	b94c      	cbnz	r4, 800a546 <__pow5mult+0x66>
 800a532:	f240 2171 	movw	r1, #625	@ 0x271
 800a536:	4638      	mov	r0, r7
 800a538:	f7ff ff12 	bl	800a360 <__i2b>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a542:	4604      	mov	r4, r0
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	f04f 0900 	mov.w	r9, #0
 800a54a:	07eb      	lsls	r3, r5, #31
 800a54c:	d50a      	bpl.n	800a564 <__pow5mult+0x84>
 800a54e:	4631      	mov	r1, r6
 800a550:	4622      	mov	r2, r4
 800a552:	4638      	mov	r0, r7
 800a554:	f7ff ff1a 	bl	800a38c <__multiply>
 800a558:	4631      	mov	r1, r6
 800a55a:	4680      	mov	r8, r0
 800a55c:	4638      	mov	r0, r7
 800a55e:	f7ff fe4b 	bl	800a1f8 <_Bfree>
 800a562:	4646      	mov	r6, r8
 800a564:	106d      	asrs	r5, r5, #1
 800a566:	d00b      	beq.n	800a580 <__pow5mult+0xa0>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	b938      	cbnz	r0, 800a57c <__pow5mult+0x9c>
 800a56c:	4622      	mov	r2, r4
 800a56e:	4621      	mov	r1, r4
 800a570:	4638      	mov	r0, r7
 800a572:	f7ff ff0b 	bl	800a38c <__multiply>
 800a576:	6020      	str	r0, [r4, #0]
 800a578:	f8c0 9000 	str.w	r9, [r0]
 800a57c:	4604      	mov	r4, r0
 800a57e:	e7e4      	b.n	800a54a <__pow5mult+0x6a>
 800a580:	4630      	mov	r0, r6
 800a582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a586:	bf00      	nop
 800a588:	0800b5d0 	.word	0x0800b5d0
 800a58c:	0800b4f5 	.word	0x0800b4f5
 800a590:	0800b575 	.word	0x0800b575

0800a594 <__lshift>:
 800a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	460c      	mov	r4, r1
 800a59a:	6849      	ldr	r1, [r1, #4]
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	4691      	mov	r9, r2
 800a5a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5ac:	f108 0601 	add.w	r6, r8, #1
 800a5b0:	42b3      	cmp	r3, r6
 800a5b2:	db0b      	blt.n	800a5cc <__lshift+0x38>
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f7ff fddf 	bl	800a178 <_Balloc>
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b948      	cbnz	r0, 800a5d2 <__lshift+0x3e>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	4b28      	ldr	r3, [pc, #160]	@ (800a664 <__lshift+0xd0>)
 800a5c2:	4829      	ldr	r0, [pc, #164]	@ (800a668 <__lshift+0xd4>)
 800a5c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5c8:	f000 fb94 	bl	800acf4 <__assert_func>
 800a5cc:	3101      	adds	r1, #1
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	e7ee      	b.n	800a5b0 <__lshift+0x1c>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f100 0114 	add.w	r1, r0, #20
 800a5d8:	f100 0210 	add.w	r2, r0, #16
 800a5dc:	4618      	mov	r0, r3
 800a5de:	4553      	cmp	r3, sl
 800a5e0:	db33      	blt.n	800a64a <__lshift+0xb6>
 800a5e2:	6920      	ldr	r0, [r4, #16]
 800a5e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5e8:	f104 0314 	add.w	r3, r4, #20
 800a5ec:	f019 091f 	ands.w	r9, r9, #31
 800a5f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5f8:	d02b      	beq.n	800a652 <__lshift+0xbe>
 800a5fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a5fe:	468a      	mov	sl, r1
 800a600:	2200      	movs	r2, #0
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	fa00 f009 	lsl.w	r0, r0, r9
 800a608:	4310      	orrs	r0, r2
 800a60a:	f84a 0b04 	str.w	r0, [sl], #4
 800a60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a612:	459c      	cmp	ip, r3
 800a614:	fa22 f20e 	lsr.w	r2, r2, lr
 800a618:	d8f3      	bhi.n	800a602 <__lshift+0x6e>
 800a61a:	ebac 0304 	sub.w	r3, ip, r4
 800a61e:	3b15      	subs	r3, #21
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	3304      	adds	r3, #4
 800a626:	f104 0015 	add.w	r0, r4, #21
 800a62a:	4584      	cmp	ip, r0
 800a62c:	bf38      	it	cc
 800a62e:	2304      	movcc	r3, #4
 800a630:	50ca      	str	r2, [r1, r3]
 800a632:	b10a      	cbz	r2, 800a638 <__lshift+0xa4>
 800a634:	f108 0602 	add.w	r6, r8, #2
 800a638:	3e01      	subs	r6, #1
 800a63a:	4638      	mov	r0, r7
 800a63c:	612e      	str	r6, [r5, #16]
 800a63e:	4621      	mov	r1, r4
 800a640:	f7ff fdda 	bl	800a1f8 <_Bfree>
 800a644:	4628      	mov	r0, r5
 800a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a64e:	3301      	adds	r3, #1
 800a650:	e7c5      	b.n	800a5de <__lshift+0x4a>
 800a652:	3904      	subs	r1, #4
 800a654:	f853 2b04 	ldr.w	r2, [r3], #4
 800a658:	f841 2f04 	str.w	r2, [r1, #4]!
 800a65c:	459c      	cmp	ip, r3
 800a65e:	d8f9      	bhi.n	800a654 <__lshift+0xc0>
 800a660:	e7ea      	b.n	800a638 <__lshift+0xa4>
 800a662:	bf00      	nop
 800a664:	0800b564 	.word	0x0800b564
 800a668:	0800b575 	.word	0x0800b575

0800a66c <__mcmp>:
 800a66c:	690a      	ldr	r2, [r1, #16]
 800a66e:	4603      	mov	r3, r0
 800a670:	6900      	ldr	r0, [r0, #16]
 800a672:	1a80      	subs	r0, r0, r2
 800a674:	b530      	push	{r4, r5, lr}
 800a676:	d10e      	bne.n	800a696 <__mcmp+0x2a>
 800a678:	3314      	adds	r3, #20
 800a67a:	3114      	adds	r1, #20
 800a67c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a680:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a684:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a688:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a68c:	4295      	cmp	r5, r2
 800a68e:	d003      	beq.n	800a698 <__mcmp+0x2c>
 800a690:	d205      	bcs.n	800a69e <__mcmp+0x32>
 800a692:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a696:	bd30      	pop	{r4, r5, pc}
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d3f3      	bcc.n	800a684 <__mcmp+0x18>
 800a69c:	e7fb      	b.n	800a696 <__mcmp+0x2a>
 800a69e:	2001      	movs	r0, #1
 800a6a0:	e7f9      	b.n	800a696 <__mcmp+0x2a>
	...

0800a6a4 <__mdiff>:
 800a6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	4689      	mov	r9, r1
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	4648      	mov	r0, r9
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	f7ff ffdb 	bl	800a66c <__mcmp>
 800a6b6:	1e05      	subs	r5, r0, #0
 800a6b8:	d112      	bne.n	800a6e0 <__mdiff+0x3c>
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7ff fd5b 	bl	800a178 <_Balloc>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	b928      	cbnz	r0, 800a6d2 <__mdiff+0x2e>
 800a6c6:	4b3f      	ldr	r3, [pc, #252]	@ (800a7c4 <__mdiff+0x120>)
 800a6c8:	f240 2137 	movw	r1, #567	@ 0x237
 800a6cc:	483e      	ldr	r0, [pc, #248]	@ (800a7c8 <__mdiff+0x124>)
 800a6ce:	f000 fb11 	bl	800acf4 <__assert_func>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6d8:	4610      	mov	r0, r2
 800a6da:	b003      	add	sp, #12
 800a6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e0:	bfbc      	itt	lt
 800a6e2:	464b      	movlt	r3, r9
 800a6e4:	46a1      	movlt	r9, r4
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6ec:	bfba      	itte	lt
 800a6ee:	461c      	movlt	r4, r3
 800a6f0:	2501      	movlt	r5, #1
 800a6f2:	2500      	movge	r5, #0
 800a6f4:	f7ff fd40 	bl	800a178 <_Balloc>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	b918      	cbnz	r0, 800a704 <__mdiff+0x60>
 800a6fc:	4b31      	ldr	r3, [pc, #196]	@ (800a7c4 <__mdiff+0x120>)
 800a6fe:	f240 2145 	movw	r1, #581	@ 0x245
 800a702:	e7e3      	b.n	800a6cc <__mdiff+0x28>
 800a704:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a708:	6926      	ldr	r6, [r4, #16]
 800a70a:	60c5      	str	r5, [r0, #12]
 800a70c:	f109 0310 	add.w	r3, r9, #16
 800a710:	f109 0514 	add.w	r5, r9, #20
 800a714:	f104 0e14 	add.w	lr, r4, #20
 800a718:	f100 0b14 	add.w	fp, r0, #20
 800a71c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a720:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	46d9      	mov	r9, fp
 800a728:	f04f 0c00 	mov.w	ip, #0
 800a72c:	9b01      	ldr	r3, [sp, #4]
 800a72e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a732:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	fa1f f38a 	uxth.w	r3, sl
 800a73c:	4619      	mov	r1, r3
 800a73e:	b283      	uxth	r3, r0
 800a740:	1acb      	subs	r3, r1, r3
 800a742:	0c00      	lsrs	r0, r0, #16
 800a744:	4463      	add	r3, ip
 800a746:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a74a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a74e:	b29b      	uxth	r3, r3
 800a750:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a754:	4576      	cmp	r6, lr
 800a756:	f849 3b04 	str.w	r3, [r9], #4
 800a75a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a75e:	d8e5      	bhi.n	800a72c <__mdiff+0x88>
 800a760:	1b33      	subs	r3, r6, r4
 800a762:	3b15      	subs	r3, #21
 800a764:	f023 0303 	bic.w	r3, r3, #3
 800a768:	3415      	adds	r4, #21
 800a76a:	3304      	adds	r3, #4
 800a76c:	42a6      	cmp	r6, r4
 800a76e:	bf38      	it	cc
 800a770:	2304      	movcc	r3, #4
 800a772:	441d      	add	r5, r3
 800a774:	445b      	add	r3, fp
 800a776:	461e      	mov	r6, r3
 800a778:	462c      	mov	r4, r5
 800a77a:	4544      	cmp	r4, r8
 800a77c:	d30e      	bcc.n	800a79c <__mdiff+0xf8>
 800a77e:	f108 0103 	add.w	r1, r8, #3
 800a782:	1b49      	subs	r1, r1, r5
 800a784:	f021 0103 	bic.w	r1, r1, #3
 800a788:	3d03      	subs	r5, #3
 800a78a:	45a8      	cmp	r8, r5
 800a78c:	bf38      	it	cc
 800a78e:	2100      	movcc	r1, #0
 800a790:	440b      	add	r3, r1
 800a792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a796:	b191      	cbz	r1, 800a7be <__mdiff+0x11a>
 800a798:	6117      	str	r7, [r2, #16]
 800a79a:	e79d      	b.n	800a6d8 <__mdiff+0x34>
 800a79c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7a0:	46e6      	mov	lr, ip
 800a7a2:	0c08      	lsrs	r0, r1, #16
 800a7a4:	fa1c fc81 	uxtah	ip, ip, r1
 800a7a8:	4471      	add	r1, lr
 800a7aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7ae:	b289      	uxth	r1, r1
 800a7b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7b4:	f846 1b04 	str.w	r1, [r6], #4
 800a7b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7bc:	e7dd      	b.n	800a77a <__mdiff+0xd6>
 800a7be:	3f01      	subs	r7, #1
 800a7c0:	e7e7      	b.n	800a792 <__mdiff+0xee>
 800a7c2:	bf00      	nop
 800a7c4:	0800b564 	.word	0x0800b564
 800a7c8:	0800b575 	.word	0x0800b575

0800a7cc <__d2b>:
 800a7cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	ec59 8b10 	vmov	r8, r9, d0
 800a7d8:	4616      	mov	r6, r2
 800a7da:	f7ff fccd 	bl	800a178 <_Balloc>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	b930      	cbnz	r0, 800a7f0 <__d2b+0x24>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	4b23      	ldr	r3, [pc, #140]	@ (800a874 <__d2b+0xa8>)
 800a7e6:	4824      	ldr	r0, [pc, #144]	@ (800a878 <__d2b+0xac>)
 800a7e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7ec:	f000 fa82 	bl	800acf4 <__assert_func>
 800a7f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7f8:	b10d      	cbz	r5, 800a7fe <__d2b+0x32>
 800a7fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	f1b8 0300 	subs.w	r3, r8, #0
 800a804:	d023      	beq.n	800a84e <__d2b+0x82>
 800a806:	4668      	mov	r0, sp
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	f7ff fd7c 	bl	800a306 <__lo0bits>
 800a80e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a812:	b1d0      	cbz	r0, 800a84a <__d2b+0x7e>
 800a814:	f1c0 0320 	rsb	r3, r0, #32
 800a818:	fa02 f303 	lsl.w	r3, r2, r3
 800a81c:	430b      	orrs	r3, r1
 800a81e:	40c2      	lsrs	r2, r0
 800a820:	6163      	str	r3, [r4, #20]
 800a822:	9201      	str	r2, [sp, #4]
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	61a3      	str	r3, [r4, #24]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bf0c      	ite	eq
 800a82c:	2201      	moveq	r2, #1
 800a82e:	2202      	movne	r2, #2
 800a830:	6122      	str	r2, [r4, #16]
 800a832:	b1a5      	cbz	r5, 800a85e <__d2b+0x92>
 800a834:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a838:	4405      	add	r5, r0
 800a83a:	603d      	str	r5, [r7, #0]
 800a83c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a840:	6030      	str	r0, [r6, #0]
 800a842:	4620      	mov	r0, r4
 800a844:	b003      	add	sp, #12
 800a846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a84a:	6161      	str	r1, [r4, #20]
 800a84c:	e7ea      	b.n	800a824 <__d2b+0x58>
 800a84e:	a801      	add	r0, sp, #4
 800a850:	f7ff fd59 	bl	800a306 <__lo0bits>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	6163      	str	r3, [r4, #20]
 800a858:	3020      	adds	r0, #32
 800a85a:	2201      	movs	r2, #1
 800a85c:	e7e8      	b.n	800a830 <__d2b+0x64>
 800a85e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a862:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a866:	6038      	str	r0, [r7, #0]
 800a868:	6918      	ldr	r0, [r3, #16]
 800a86a:	f7ff fd2d 	bl	800a2c8 <__hi0bits>
 800a86e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a872:	e7e5      	b.n	800a840 <__d2b+0x74>
 800a874:	0800b564 	.word	0x0800b564
 800a878:	0800b575 	.word	0x0800b575

0800a87c <__ssputs_r>:
 800a87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a880:	688e      	ldr	r6, [r1, #8]
 800a882:	461f      	mov	r7, r3
 800a884:	42be      	cmp	r6, r7
 800a886:	680b      	ldr	r3, [r1, #0]
 800a888:	4682      	mov	sl, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	4690      	mov	r8, r2
 800a88e:	d82d      	bhi.n	800a8ec <__ssputs_r+0x70>
 800a890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a894:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a898:	d026      	beq.n	800a8e8 <__ssputs_r+0x6c>
 800a89a:	6965      	ldr	r5, [r4, #20]
 800a89c:	6909      	ldr	r1, [r1, #16]
 800a89e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8a2:	eba3 0901 	sub.w	r9, r3, r1
 800a8a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8aa:	1c7b      	adds	r3, r7, #1
 800a8ac:	444b      	add	r3, r9
 800a8ae:	106d      	asrs	r5, r5, #1
 800a8b0:	429d      	cmp	r5, r3
 800a8b2:	bf38      	it	cc
 800a8b4:	461d      	movcc	r5, r3
 800a8b6:	0553      	lsls	r3, r2, #21
 800a8b8:	d527      	bpl.n	800a90a <__ssputs_r+0x8e>
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	f7ff fbd0 	bl	800a060 <_malloc_r>
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	b360      	cbz	r0, 800a91e <__ssputs_r+0xa2>
 800a8c4:	6921      	ldr	r1, [r4, #16]
 800a8c6:	464a      	mov	r2, r9
 800a8c8:	f000 fa06 	bl	800acd8 <memcpy>
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8d6:	81a3      	strh	r3, [r4, #12]
 800a8d8:	6126      	str	r6, [r4, #16]
 800a8da:	6165      	str	r5, [r4, #20]
 800a8dc:	444e      	add	r6, r9
 800a8de:	eba5 0509 	sub.w	r5, r5, r9
 800a8e2:	6026      	str	r6, [r4, #0]
 800a8e4:	60a5      	str	r5, [r4, #8]
 800a8e6:	463e      	mov	r6, r7
 800a8e8:	42be      	cmp	r6, r7
 800a8ea:	d900      	bls.n	800a8ee <__ssputs_r+0x72>
 800a8ec:	463e      	mov	r6, r7
 800a8ee:	6820      	ldr	r0, [r4, #0]
 800a8f0:	4632      	mov	r2, r6
 800a8f2:	4641      	mov	r1, r8
 800a8f4:	f000 f9c6 	bl	800ac84 <memmove>
 800a8f8:	68a3      	ldr	r3, [r4, #8]
 800a8fa:	1b9b      	subs	r3, r3, r6
 800a8fc:	60a3      	str	r3, [r4, #8]
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	4433      	add	r3, r6
 800a902:	6023      	str	r3, [r4, #0]
 800a904:	2000      	movs	r0, #0
 800a906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90a:	462a      	mov	r2, r5
 800a90c:	f000 fa36 	bl	800ad7c <_realloc_r>
 800a910:	4606      	mov	r6, r0
 800a912:	2800      	cmp	r0, #0
 800a914:	d1e0      	bne.n	800a8d8 <__ssputs_r+0x5c>
 800a916:	6921      	ldr	r1, [r4, #16]
 800a918:	4650      	mov	r0, sl
 800a91a:	f7ff fb2d 	bl	8009f78 <_free_r>
 800a91e:	230c      	movs	r3, #12
 800a920:	f8ca 3000 	str.w	r3, [sl]
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a92a:	81a3      	strh	r3, [r4, #12]
 800a92c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a930:	e7e9      	b.n	800a906 <__ssputs_r+0x8a>
	...

0800a934 <_svfiprintf_r>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	4698      	mov	r8, r3
 800a93a:	898b      	ldrh	r3, [r1, #12]
 800a93c:	061b      	lsls	r3, r3, #24
 800a93e:	b09d      	sub	sp, #116	@ 0x74
 800a940:	4607      	mov	r7, r0
 800a942:	460d      	mov	r5, r1
 800a944:	4614      	mov	r4, r2
 800a946:	d510      	bpl.n	800a96a <_svfiprintf_r+0x36>
 800a948:	690b      	ldr	r3, [r1, #16]
 800a94a:	b973      	cbnz	r3, 800a96a <_svfiprintf_r+0x36>
 800a94c:	2140      	movs	r1, #64	@ 0x40
 800a94e:	f7ff fb87 	bl	800a060 <_malloc_r>
 800a952:	6028      	str	r0, [r5, #0]
 800a954:	6128      	str	r0, [r5, #16]
 800a956:	b930      	cbnz	r0, 800a966 <_svfiprintf_r+0x32>
 800a958:	230c      	movs	r3, #12
 800a95a:	603b      	str	r3, [r7, #0]
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a960:	b01d      	add	sp, #116	@ 0x74
 800a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a966:	2340      	movs	r3, #64	@ 0x40
 800a968:	616b      	str	r3, [r5, #20]
 800a96a:	2300      	movs	r3, #0
 800a96c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a96e:	2320      	movs	r3, #32
 800a970:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a974:	f8cd 800c 	str.w	r8, [sp, #12]
 800a978:	2330      	movs	r3, #48	@ 0x30
 800a97a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab18 <_svfiprintf_r+0x1e4>
 800a97e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a982:	f04f 0901 	mov.w	r9, #1
 800a986:	4623      	mov	r3, r4
 800a988:	469a      	mov	sl, r3
 800a98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a98e:	b10a      	cbz	r2, 800a994 <_svfiprintf_r+0x60>
 800a990:	2a25      	cmp	r2, #37	@ 0x25
 800a992:	d1f9      	bne.n	800a988 <_svfiprintf_r+0x54>
 800a994:	ebba 0b04 	subs.w	fp, sl, r4
 800a998:	d00b      	beq.n	800a9b2 <_svfiprintf_r+0x7e>
 800a99a:	465b      	mov	r3, fp
 800a99c:	4622      	mov	r2, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	f7ff ff6b 	bl	800a87c <__ssputs_r>
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	f000 80a7 	beq.w	800aafa <_svfiprintf_r+0x1c6>
 800a9ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9ae:	445a      	add	r2, fp
 800a9b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 809f 	beq.w	800aafa <_svfiprintf_r+0x1c6>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9c6:	f10a 0a01 	add.w	sl, sl, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	9307      	str	r3, [sp, #28]
 800a9ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9d4:	4654      	mov	r4, sl
 800a9d6:	2205      	movs	r2, #5
 800a9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9dc:	484e      	ldr	r0, [pc, #312]	@ (800ab18 <_svfiprintf_r+0x1e4>)
 800a9de:	f7f5 fc1f 	bl	8000220 <memchr>
 800a9e2:	9a04      	ldr	r2, [sp, #16]
 800a9e4:	b9d8      	cbnz	r0, 800aa1e <_svfiprintf_r+0xea>
 800a9e6:	06d0      	lsls	r0, r2, #27
 800a9e8:	bf44      	itt	mi
 800a9ea:	2320      	movmi	r3, #32
 800a9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9f0:	0711      	lsls	r1, r2, #28
 800a9f2:	bf44      	itt	mi
 800a9f4:	232b      	movmi	r3, #43	@ 0x2b
 800a9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa00:	d015      	beq.n	800aa2e <_svfiprintf_r+0xfa>
 800aa02:	9a07      	ldr	r2, [sp, #28]
 800aa04:	4654      	mov	r4, sl
 800aa06:	2000      	movs	r0, #0
 800aa08:	f04f 0c0a 	mov.w	ip, #10
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa12:	3b30      	subs	r3, #48	@ 0x30
 800aa14:	2b09      	cmp	r3, #9
 800aa16:	d94b      	bls.n	800aab0 <_svfiprintf_r+0x17c>
 800aa18:	b1b0      	cbz	r0, 800aa48 <_svfiprintf_r+0x114>
 800aa1a:	9207      	str	r2, [sp, #28]
 800aa1c:	e014      	b.n	800aa48 <_svfiprintf_r+0x114>
 800aa1e:	eba0 0308 	sub.w	r3, r0, r8
 800aa22:	fa09 f303 	lsl.w	r3, r9, r3
 800aa26:	4313      	orrs	r3, r2
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	46a2      	mov	sl, r4
 800aa2c:	e7d2      	b.n	800a9d4 <_svfiprintf_r+0xa0>
 800aa2e:	9b03      	ldr	r3, [sp, #12]
 800aa30:	1d19      	adds	r1, r3, #4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	9103      	str	r1, [sp, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	bfbb      	ittet	lt
 800aa3a:	425b      	neglt	r3, r3
 800aa3c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa40:	9307      	strge	r3, [sp, #28]
 800aa42:	9307      	strlt	r3, [sp, #28]
 800aa44:	bfb8      	it	lt
 800aa46:	9204      	strlt	r2, [sp, #16]
 800aa48:	7823      	ldrb	r3, [r4, #0]
 800aa4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa4c:	d10a      	bne.n	800aa64 <_svfiprintf_r+0x130>
 800aa4e:	7863      	ldrb	r3, [r4, #1]
 800aa50:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa52:	d132      	bne.n	800aaba <_svfiprintf_r+0x186>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	1d1a      	adds	r2, r3, #4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	9203      	str	r2, [sp, #12]
 800aa5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa60:	3402      	adds	r4, #2
 800aa62:	9305      	str	r3, [sp, #20]
 800aa64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab28 <_svfiprintf_r+0x1f4>
 800aa68:	7821      	ldrb	r1, [r4, #0]
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	4650      	mov	r0, sl
 800aa6e:	f7f5 fbd7 	bl	8000220 <memchr>
 800aa72:	b138      	cbz	r0, 800aa84 <_svfiprintf_r+0x150>
 800aa74:	9b04      	ldr	r3, [sp, #16]
 800aa76:	eba0 000a 	sub.w	r0, r0, sl
 800aa7a:	2240      	movs	r2, #64	@ 0x40
 800aa7c:	4082      	lsls	r2, r0
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	3401      	adds	r4, #1
 800aa82:	9304      	str	r3, [sp, #16]
 800aa84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa88:	4824      	ldr	r0, [pc, #144]	@ (800ab1c <_svfiprintf_r+0x1e8>)
 800aa8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa8e:	2206      	movs	r2, #6
 800aa90:	f7f5 fbc6 	bl	8000220 <memchr>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d036      	beq.n	800ab06 <_svfiprintf_r+0x1d2>
 800aa98:	4b21      	ldr	r3, [pc, #132]	@ (800ab20 <_svfiprintf_r+0x1ec>)
 800aa9a:	bb1b      	cbnz	r3, 800aae4 <_svfiprintf_r+0x1b0>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	3307      	adds	r3, #7
 800aaa0:	f023 0307 	bic.w	r3, r3, #7
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	9303      	str	r3, [sp, #12]
 800aaa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaaa:	4433      	add	r3, r6
 800aaac:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaae:	e76a      	b.n	800a986 <_svfiprintf_r+0x52>
 800aab0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aab4:	460c      	mov	r4, r1
 800aab6:	2001      	movs	r0, #1
 800aab8:	e7a8      	b.n	800aa0c <_svfiprintf_r+0xd8>
 800aaba:	2300      	movs	r3, #0
 800aabc:	3401      	adds	r4, #1
 800aabe:	9305      	str	r3, [sp, #20]
 800aac0:	4619      	mov	r1, r3
 800aac2:	f04f 0c0a 	mov.w	ip, #10
 800aac6:	4620      	mov	r0, r4
 800aac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aacc:	3a30      	subs	r2, #48	@ 0x30
 800aace:	2a09      	cmp	r2, #9
 800aad0:	d903      	bls.n	800aada <_svfiprintf_r+0x1a6>
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d0c6      	beq.n	800aa64 <_svfiprintf_r+0x130>
 800aad6:	9105      	str	r1, [sp, #20]
 800aad8:	e7c4      	b.n	800aa64 <_svfiprintf_r+0x130>
 800aada:	fb0c 2101 	mla	r1, ip, r1, r2
 800aade:	4604      	mov	r4, r0
 800aae0:	2301      	movs	r3, #1
 800aae2:	e7f0      	b.n	800aac6 <_svfiprintf_r+0x192>
 800aae4:	ab03      	add	r3, sp, #12
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	462a      	mov	r2, r5
 800aaea:	4b0e      	ldr	r3, [pc, #56]	@ (800ab24 <_svfiprintf_r+0x1f0>)
 800aaec:	a904      	add	r1, sp, #16
 800aaee:	4638      	mov	r0, r7
 800aaf0:	f7fd fe8c 	bl	800880c <_printf_float>
 800aaf4:	1c42      	adds	r2, r0, #1
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	d1d6      	bne.n	800aaa8 <_svfiprintf_r+0x174>
 800aafa:	89ab      	ldrh	r3, [r5, #12]
 800aafc:	065b      	lsls	r3, r3, #25
 800aafe:	f53f af2d 	bmi.w	800a95c <_svfiprintf_r+0x28>
 800ab02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab04:	e72c      	b.n	800a960 <_svfiprintf_r+0x2c>
 800ab06:	ab03      	add	r3, sp, #12
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	462a      	mov	r2, r5
 800ab0c:	4b05      	ldr	r3, [pc, #20]	@ (800ab24 <_svfiprintf_r+0x1f0>)
 800ab0e:	a904      	add	r1, sp, #16
 800ab10:	4638      	mov	r0, r7
 800ab12:	f7fe f913 	bl	8008d3c <_printf_i>
 800ab16:	e7ed      	b.n	800aaf4 <_svfiprintf_r+0x1c0>
 800ab18:	0800b6d0 	.word	0x0800b6d0
 800ab1c:	0800b6da 	.word	0x0800b6da
 800ab20:	0800880d 	.word	0x0800880d
 800ab24:	0800a87d 	.word	0x0800a87d
 800ab28:	0800b6d6 	.word	0x0800b6d6

0800ab2c <__sflush_r>:
 800ab2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab34:	0716      	lsls	r6, r2, #28
 800ab36:	4605      	mov	r5, r0
 800ab38:	460c      	mov	r4, r1
 800ab3a:	d454      	bmi.n	800abe6 <__sflush_r+0xba>
 800ab3c:	684b      	ldr	r3, [r1, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	dc02      	bgt.n	800ab48 <__sflush_r+0x1c>
 800ab42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	dd48      	ble.n	800abda <__sflush_r+0xae>
 800ab48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab4a:	2e00      	cmp	r6, #0
 800ab4c:	d045      	beq.n	800abda <__sflush_r+0xae>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab54:	682f      	ldr	r7, [r5, #0]
 800ab56:	6a21      	ldr	r1, [r4, #32]
 800ab58:	602b      	str	r3, [r5, #0]
 800ab5a:	d030      	beq.n	800abbe <__sflush_r+0x92>
 800ab5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab5e:	89a3      	ldrh	r3, [r4, #12]
 800ab60:	0759      	lsls	r1, r3, #29
 800ab62:	d505      	bpl.n	800ab70 <__sflush_r+0x44>
 800ab64:	6863      	ldr	r3, [r4, #4]
 800ab66:	1ad2      	subs	r2, r2, r3
 800ab68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab6a:	b10b      	cbz	r3, 800ab70 <__sflush_r+0x44>
 800ab6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab6e:	1ad2      	subs	r2, r2, r3
 800ab70:	2300      	movs	r3, #0
 800ab72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab74:	6a21      	ldr	r1, [r4, #32]
 800ab76:	4628      	mov	r0, r5
 800ab78:	47b0      	blx	r6
 800ab7a:	1c43      	adds	r3, r0, #1
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	d106      	bne.n	800ab8e <__sflush_r+0x62>
 800ab80:	6829      	ldr	r1, [r5, #0]
 800ab82:	291d      	cmp	r1, #29
 800ab84:	d82b      	bhi.n	800abde <__sflush_r+0xb2>
 800ab86:	4a2a      	ldr	r2, [pc, #168]	@ (800ac30 <__sflush_r+0x104>)
 800ab88:	410a      	asrs	r2, r1
 800ab8a:	07d6      	lsls	r6, r2, #31
 800ab8c:	d427      	bmi.n	800abde <__sflush_r+0xb2>
 800ab8e:	2200      	movs	r2, #0
 800ab90:	6062      	str	r2, [r4, #4]
 800ab92:	04d9      	lsls	r1, r3, #19
 800ab94:	6922      	ldr	r2, [r4, #16]
 800ab96:	6022      	str	r2, [r4, #0]
 800ab98:	d504      	bpl.n	800aba4 <__sflush_r+0x78>
 800ab9a:	1c42      	adds	r2, r0, #1
 800ab9c:	d101      	bne.n	800aba2 <__sflush_r+0x76>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	b903      	cbnz	r3, 800aba4 <__sflush_r+0x78>
 800aba2:	6560      	str	r0, [r4, #84]	@ 0x54
 800aba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aba6:	602f      	str	r7, [r5, #0]
 800aba8:	b1b9      	cbz	r1, 800abda <__sflush_r+0xae>
 800abaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abae:	4299      	cmp	r1, r3
 800abb0:	d002      	beq.n	800abb8 <__sflush_r+0x8c>
 800abb2:	4628      	mov	r0, r5
 800abb4:	f7ff f9e0 	bl	8009f78 <_free_r>
 800abb8:	2300      	movs	r3, #0
 800abba:	6363      	str	r3, [r4, #52]	@ 0x34
 800abbc:	e00d      	b.n	800abda <__sflush_r+0xae>
 800abbe:	2301      	movs	r3, #1
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b0      	blx	r6
 800abc4:	4602      	mov	r2, r0
 800abc6:	1c50      	adds	r0, r2, #1
 800abc8:	d1c9      	bne.n	800ab5e <__sflush_r+0x32>
 800abca:	682b      	ldr	r3, [r5, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d0c6      	beq.n	800ab5e <__sflush_r+0x32>
 800abd0:	2b1d      	cmp	r3, #29
 800abd2:	d001      	beq.n	800abd8 <__sflush_r+0xac>
 800abd4:	2b16      	cmp	r3, #22
 800abd6:	d11e      	bne.n	800ac16 <__sflush_r+0xea>
 800abd8:	602f      	str	r7, [r5, #0]
 800abda:	2000      	movs	r0, #0
 800abdc:	e022      	b.n	800ac24 <__sflush_r+0xf8>
 800abde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abe2:	b21b      	sxth	r3, r3
 800abe4:	e01b      	b.n	800ac1e <__sflush_r+0xf2>
 800abe6:	690f      	ldr	r7, [r1, #16]
 800abe8:	2f00      	cmp	r7, #0
 800abea:	d0f6      	beq.n	800abda <__sflush_r+0xae>
 800abec:	0793      	lsls	r3, r2, #30
 800abee:	680e      	ldr	r6, [r1, #0]
 800abf0:	bf08      	it	eq
 800abf2:	694b      	ldreq	r3, [r1, #20]
 800abf4:	600f      	str	r7, [r1, #0]
 800abf6:	bf18      	it	ne
 800abf8:	2300      	movne	r3, #0
 800abfa:	eba6 0807 	sub.w	r8, r6, r7
 800abfe:	608b      	str	r3, [r1, #8]
 800ac00:	f1b8 0f00 	cmp.w	r8, #0
 800ac04:	dde9      	ble.n	800abda <__sflush_r+0xae>
 800ac06:	6a21      	ldr	r1, [r4, #32]
 800ac08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac0a:	4643      	mov	r3, r8
 800ac0c:	463a      	mov	r2, r7
 800ac0e:	4628      	mov	r0, r5
 800ac10:	47b0      	blx	r6
 800ac12:	2800      	cmp	r0, #0
 800ac14:	dc08      	bgt.n	800ac28 <__sflush_r+0xfc>
 800ac16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac1e:	81a3      	strh	r3, [r4, #12]
 800ac20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac28:	4407      	add	r7, r0
 800ac2a:	eba8 0800 	sub.w	r8, r8, r0
 800ac2e:	e7e7      	b.n	800ac00 <__sflush_r+0xd4>
 800ac30:	dfbffffe 	.word	0xdfbffffe

0800ac34 <_fflush_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	690b      	ldr	r3, [r1, #16]
 800ac38:	4605      	mov	r5, r0
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	b913      	cbnz	r3, 800ac44 <_fflush_r+0x10>
 800ac3e:	2500      	movs	r5, #0
 800ac40:	4628      	mov	r0, r5
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	b118      	cbz	r0, 800ac4e <_fflush_r+0x1a>
 800ac46:	6a03      	ldr	r3, [r0, #32]
 800ac48:	b90b      	cbnz	r3, 800ac4e <_fflush_r+0x1a>
 800ac4a:	f7fe fa23 	bl	8009094 <__sinit>
 800ac4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0f3      	beq.n	800ac3e <_fflush_r+0xa>
 800ac56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac58:	07d0      	lsls	r0, r2, #31
 800ac5a:	d404      	bmi.n	800ac66 <_fflush_r+0x32>
 800ac5c:	0599      	lsls	r1, r3, #22
 800ac5e:	d402      	bmi.n	800ac66 <_fflush_r+0x32>
 800ac60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac62:	f7fe fb3a 	bl	80092da <__retarget_lock_acquire_recursive>
 800ac66:	4628      	mov	r0, r5
 800ac68:	4621      	mov	r1, r4
 800ac6a:	f7ff ff5f 	bl	800ab2c <__sflush_r>
 800ac6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac70:	07da      	lsls	r2, r3, #31
 800ac72:	4605      	mov	r5, r0
 800ac74:	d4e4      	bmi.n	800ac40 <_fflush_r+0xc>
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	059b      	lsls	r3, r3, #22
 800ac7a:	d4e1      	bmi.n	800ac40 <_fflush_r+0xc>
 800ac7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac7e:	f7fe fb2d 	bl	80092dc <__retarget_lock_release_recursive>
 800ac82:	e7dd      	b.n	800ac40 <_fflush_r+0xc>

0800ac84 <memmove>:
 800ac84:	4288      	cmp	r0, r1
 800ac86:	b510      	push	{r4, lr}
 800ac88:	eb01 0402 	add.w	r4, r1, r2
 800ac8c:	d902      	bls.n	800ac94 <memmove+0x10>
 800ac8e:	4284      	cmp	r4, r0
 800ac90:	4623      	mov	r3, r4
 800ac92:	d807      	bhi.n	800aca4 <memmove+0x20>
 800ac94:	1e43      	subs	r3, r0, #1
 800ac96:	42a1      	cmp	r1, r4
 800ac98:	d008      	beq.n	800acac <memmove+0x28>
 800ac9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aca2:	e7f8      	b.n	800ac96 <memmove+0x12>
 800aca4:	4402      	add	r2, r0
 800aca6:	4601      	mov	r1, r0
 800aca8:	428a      	cmp	r2, r1
 800acaa:	d100      	bne.n	800acae <memmove+0x2a>
 800acac:	bd10      	pop	{r4, pc}
 800acae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acb6:	e7f7      	b.n	800aca8 <memmove+0x24>

0800acb8 <_sbrk_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4d06      	ldr	r5, [pc, #24]	@ (800acd4 <_sbrk_r+0x1c>)
 800acbc:	2300      	movs	r3, #0
 800acbe:	4604      	mov	r4, r0
 800acc0:	4608      	mov	r0, r1
 800acc2:	602b      	str	r3, [r5, #0]
 800acc4:	f7f7 f9de 	bl	8002084 <_sbrk>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d102      	bne.n	800acd2 <_sbrk_r+0x1a>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	b103      	cbz	r3, 800acd2 <_sbrk_r+0x1a>
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	20004764 	.word	0x20004764

0800acd8 <memcpy>:
 800acd8:	440a      	add	r2, r1
 800acda:	4291      	cmp	r1, r2
 800acdc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ace0:	d100      	bne.n	800ace4 <memcpy+0xc>
 800ace2:	4770      	bx	lr
 800ace4:	b510      	push	{r4, lr}
 800ace6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acee:	4291      	cmp	r1, r2
 800acf0:	d1f9      	bne.n	800ace6 <memcpy+0xe>
 800acf2:	bd10      	pop	{r4, pc}

0800acf4 <__assert_func>:
 800acf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acf6:	4614      	mov	r4, r2
 800acf8:	461a      	mov	r2, r3
 800acfa:	4b09      	ldr	r3, [pc, #36]	@ (800ad20 <__assert_func+0x2c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4605      	mov	r5, r0
 800ad00:	68d8      	ldr	r0, [r3, #12]
 800ad02:	b954      	cbnz	r4, 800ad1a <__assert_func+0x26>
 800ad04:	4b07      	ldr	r3, [pc, #28]	@ (800ad24 <__assert_func+0x30>)
 800ad06:	461c      	mov	r4, r3
 800ad08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad0c:	9100      	str	r1, [sp, #0]
 800ad0e:	462b      	mov	r3, r5
 800ad10:	4905      	ldr	r1, [pc, #20]	@ (800ad28 <__assert_func+0x34>)
 800ad12:	f000 f86f 	bl	800adf4 <fiprintf>
 800ad16:	f000 f87f 	bl	800ae18 <abort>
 800ad1a:	4b04      	ldr	r3, [pc, #16]	@ (800ad2c <__assert_func+0x38>)
 800ad1c:	e7f4      	b.n	800ad08 <__assert_func+0x14>
 800ad1e:	bf00      	nop
 800ad20:	2000001c 	.word	0x2000001c
 800ad24:	0800b726 	.word	0x0800b726
 800ad28:	0800b6f8 	.word	0x0800b6f8
 800ad2c:	0800b6eb 	.word	0x0800b6eb

0800ad30 <_calloc_r>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	fba1 5402 	umull	r5, r4, r1, r2
 800ad36:	b93c      	cbnz	r4, 800ad48 <_calloc_r+0x18>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	f7ff f991 	bl	800a060 <_malloc_r>
 800ad3e:	4606      	mov	r6, r0
 800ad40:	b928      	cbnz	r0, 800ad4e <_calloc_r+0x1e>
 800ad42:	2600      	movs	r6, #0
 800ad44:	4630      	mov	r0, r6
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	220c      	movs	r2, #12
 800ad4a:	6002      	str	r2, [r0, #0]
 800ad4c:	e7f9      	b.n	800ad42 <_calloc_r+0x12>
 800ad4e:	462a      	mov	r2, r5
 800ad50:	4621      	mov	r1, r4
 800ad52:	f7fe fa38 	bl	80091c6 <memset>
 800ad56:	e7f5      	b.n	800ad44 <_calloc_r+0x14>

0800ad58 <__ascii_mbtowc>:
 800ad58:	b082      	sub	sp, #8
 800ad5a:	b901      	cbnz	r1, 800ad5e <__ascii_mbtowc+0x6>
 800ad5c:	a901      	add	r1, sp, #4
 800ad5e:	b142      	cbz	r2, 800ad72 <__ascii_mbtowc+0x1a>
 800ad60:	b14b      	cbz	r3, 800ad76 <__ascii_mbtowc+0x1e>
 800ad62:	7813      	ldrb	r3, [r2, #0]
 800ad64:	600b      	str	r3, [r1, #0]
 800ad66:	7812      	ldrb	r2, [r2, #0]
 800ad68:	1e10      	subs	r0, r2, #0
 800ad6a:	bf18      	it	ne
 800ad6c:	2001      	movne	r0, #1
 800ad6e:	b002      	add	sp, #8
 800ad70:	4770      	bx	lr
 800ad72:	4610      	mov	r0, r2
 800ad74:	e7fb      	b.n	800ad6e <__ascii_mbtowc+0x16>
 800ad76:	f06f 0001 	mvn.w	r0, #1
 800ad7a:	e7f8      	b.n	800ad6e <__ascii_mbtowc+0x16>

0800ad7c <_realloc_r>:
 800ad7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad80:	4680      	mov	r8, r0
 800ad82:	4615      	mov	r5, r2
 800ad84:	460c      	mov	r4, r1
 800ad86:	b921      	cbnz	r1, 800ad92 <_realloc_r+0x16>
 800ad88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	f7ff b967 	b.w	800a060 <_malloc_r>
 800ad92:	b92a      	cbnz	r2, 800ada0 <_realloc_r+0x24>
 800ad94:	f7ff f8f0 	bl	8009f78 <_free_r>
 800ad98:	2400      	movs	r4, #0
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	f000 f841 	bl	800ae26 <_malloc_usable_size_r>
 800ada4:	4285      	cmp	r5, r0
 800ada6:	4606      	mov	r6, r0
 800ada8:	d802      	bhi.n	800adb0 <_realloc_r+0x34>
 800adaa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800adae:	d8f4      	bhi.n	800ad9a <_realloc_r+0x1e>
 800adb0:	4629      	mov	r1, r5
 800adb2:	4640      	mov	r0, r8
 800adb4:	f7ff f954 	bl	800a060 <_malloc_r>
 800adb8:	4607      	mov	r7, r0
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0ec      	beq.n	800ad98 <_realloc_r+0x1c>
 800adbe:	42b5      	cmp	r5, r6
 800adc0:	462a      	mov	r2, r5
 800adc2:	4621      	mov	r1, r4
 800adc4:	bf28      	it	cs
 800adc6:	4632      	movcs	r2, r6
 800adc8:	f7ff ff86 	bl	800acd8 <memcpy>
 800adcc:	4621      	mov	r1, r4
 800adce:	4640      	mov	r0, r8
 800add0:	f7ff f8d2 	bl	8009f78 <_free_r>
 800add4:	463c      	mov	r4, r7
 800add6:	e7e0      	b.n	800ad9a <_realloc_r+0x1e>

0800add8 <__ascii_wctomb>:
 800add8:	4603      	mov	r3, r0
 800adda:	4608      	mov	r0, r1
 800addc:	b141      	cbz	r1, 800adf0 <__ascii_wctomb+0x18>
 800adde:	2aff      	cmp	r2, #255	@ 0xff
 800ade0:	d904      	bls.n	800adec <__ascii_wctomb+0x14>
 800ade2:	228a      	movs	r2, #138	@ 0x8a
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adea:	4770      	bx	lr
 800adec:	700a      	strb	r2, [r1, #0]
 800adee:	2001      	movs	r0, #1
 800adf0:	4770      	bx	lr
	...

0800adf4 <fiprintf>:
 800adf4:	b40e      	push	{r1, r2, r3}
 800adf6:	b503      	push	{r0, r1, lr}
 800adf8:	4601      	mov	r1, r0
 800adfa:	ab03      	add	r3, sp, #12
 800adfc:	4805      	ldr	r0, [pc, #20]	@ (800ae14 <fiprintf+0x20>)
 800adfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae02:	6800      	ldr	r0, [r0, #0]
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	f000 f83f 	bl	800ae88 <_vfiprintf_r>
 800ae0a:	b002      	add	sp, #8
 800ae0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae10:	b003      	add	sp, #12
 800ae12:	4770      	bx	lr
 800ae14:	2000001c 	.word	0x2000001c

0800ae18 <abort>:
 800ae18:	b508      	push	{r3, lr}
 800ae1a:	2006      	movs	r0, #6
 800ae1c:	f000 fa08 	bl	800b230 <raise>
 800ae20:	2001      	movs	r0, #1
 800ae22:	f7f7 f8b7 	bl	8001f94 <_exit>

0800ae26 <_malloc_usable_size_r>:
 800ae26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae2a:	1f18      	subs	r0, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	bfbc      	itt	lt
 800ae30:	580b      	ldrlt	r3, [r1, r0]
 800ae32:	18c0      	addlt	r0, r0, r3
 800ae34:	4770      	bx	lr

0800ae36 <__sfputc_r>:
 800ae36:	6893      	ldr	r3, [r2, #8]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	b410      	push	{r4}
 800ae3e:	6093      	str	r3, [r2, #8]
 800ae40:	da08      	bge.n	800ae54 <__sfputc_r+0x1e>
 800ae42:	6994      	ldr	r4, [r2, #24]
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	db01      	blt.n	800ae4c <__sfputc_r+0x16>
 800ae48:	290a      	cmp	r1, #10
 800ae4a:	d103      	bne.n	800ae54 <__sfputc_r+0x1e>
 800ae4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae50:	f000 b932 	b.w	800b0b8 <__swbuf_r>
 800ae54:	6813      	ldr	r3, [r2, #0]
 800ae56:	1c58      	adds	r0, r3, #1
 800ae58:	6010      	str	r0, [r2, #0]
 800ae5a:	7019      	strb	r1, [r3, #0]
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <__sfputs_r>:
 800ae64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	4614      	mov	r4, r2
 800ae6c:	18d5      	adds	r5, r2, r3
 800ae6e:	42ac      	cmp	r4, r5
 800ae70:	d101      	bne.n	800ae76 <__sfputs_r+0x12>
 800ae72:	2000      	movs	r0, #0
 800ae74:	e007      	b.n	800ae86 <__sfputs_r+0x22>
 800ae76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7a:	463a      	mov	r2, r7
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7ff ffda 	bl	800ae36 <__sfputc_r>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	d1f3      	bne.n	800ae6e <__sfputs_r+0xa>
 800ae86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae88 <_vfiprintf_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	b09d      	sub	sp, #116	@ 0x74
 800ae90:	4614      	mov	r4, r2
 800ae92:	4698      	mov	r8, r3
 800ae94:	4606      	mov	r6, r0
 800ae96:	b118      	cbz	r0, 800aea0 <_vfiprintf_r+0x18>
 800ae98:	6a03      	ldr	r3, [r0, #32]
 800ae9a:	b90b      	cbnz	r3, 800aea0 <_vfiprintf_r+0x18>
 800ae9c:	f7fe f8fa 	bl	8009094 <__sinit>
 800aea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aea2:	07d9      	lsls	r1, r3, #31
 800aea4:	d405      	bmi.n	800aeb2 <_vfiprintf_r+0x2a>
 800aea6:	89ab      	ldrh	r3, [r5, #12]
 800aea8:	059a      	lsls	r2, r3, #22
 800aeaa:	d402      	bmi.n	800aeb2 <_vfiprintf_r+0x2a>
 800aeac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeae:	f7fe fa14 	bl	80092da <__retarget_lock_acquire_recursive>
 800aeb2:	89ab      	ldrh	r3, [r5, #12]
 800aeb4:	071b      	lsls	r3, r3, #28
 800aeb6:	d501      	bpl.n	800aebc <_vfiprintf_r+0x34>
 800aeb8:	692b      	ldr	r3, [r5, #16]
 800aeba:	b99b      	cbnz	r3, 800aee4 <_vfiprintf_r+0x5c>
 800aebc:	4629      	mov	r1, r5
 800aebe:	4630      	mov	r0, r6
 800aec0:	f000 f938 	bl	800b134 <__swsetup_r>
 800aec4:	b170      	cbz	r0, 800aee4 <_vfiprintf_r+0x5c>
 800aec6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aec8:	07dc      	lsls	r4, r3, #31
 800aeca:	d504      	bpl.n	800aed6 <_vfiprintf_r+0x4e>
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aed0:	b01d      	add	sp, #116	@ 0x74
 800aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed6:	89ab      	ldrh	r3, [r5, #12]
 800aed8:	0598      	lsls	r0, r3, #22
 800aeda:	d4f7      	bmi.n	800aecc <_vfiprintf_r+0x44>
 800aedc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aede:	f7fe f9fd 	bl	80092dc <__retarget_lock_release_recursive>
 800aee2:	e7f3      	b.n	800aecc <_vfiprintf_r+0x44>
 800aee4:	2300      	movs	r3, #0
 800aee6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aee8:	2320      	movs	r3, #32
 800aeea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeee:	f8cd 800c 	str.w	r8, [sp, #12]
 800aef2:	2330      	movs	r3, #48	@ 0x30
 800aef4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b0a4 <_vfiprintf_r+0x21c>
 800aef8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aefc:	f04f 0901 	mov.w	r9, #1
 800af00:	4623      	mov	r3, r4
 800af02:	469a      	mov	sl, r3
 800af04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af08:	b10a      	cbz	r2, 800af0e <_vfiprintf_r+0x86>
 800af0a:	2a25      	cmp	r2, #37	@ 0x25
 800af0c:	d1f9      	bne.n	800af02 <_vfiprintf_r+0x7a>
 800af0e:	ebba 0b04 	subs.w	fp, sl, r4
 800af12:	d00b      	beq.n	800af2c <_vfiprintf_r+0xa4>
 800af14:	465b      	mov	r3, fp
 800af16:	4622      	mov	r2, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff ffa2 	bl	800ae64 <__sfputs_r>
 800af20:	3001      	adds	r0, #1
 800af22:	f000 80a7 	beq.w	800b074 <_vfiprintf_r+0x1ec>
 800af26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af28:	445a      	add	r2, fp
 800af2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800af2c:	f89a 3000 	ldrb.w	r3, [sl]
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 809f 	beq.w	800b074 <_vfiprintf_r+0x1ec>
 800af36:	2300      	movs	r3, #0
 800af38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af40:	f10a 0a01 	add.w	sl, sl, #1
 800af44:	9304      	str	r3, [sp, #16]
 800af46:	9307      	str	r3, [sp, #28]
 800af48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800af4e:	4654      	mov	r4, sl
 800af50:	2205      	movs	r2, #5
 800af52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af56:	4853      	ldr	r0, [pc, #332]	@ (800b0a4 <_vfiprintf_r+0x21c>)
 800af58:	f7f5 f962 	bl	8000220 <memchr>
 800af5c:	9a04      	ldr	r2, [sp, #16]
 800af5e:	b9d8      	cbnz	r0, 800af98 <_vfiprintf_r+0x110>
 800af60:	06d1      	lsls	r1, r2, #27
 800af62:	bf44      	itt	mi
 800af64:	2320      	movmi	r3, #32
 800af66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af6a:	0713      	lsls	r3, r2, #28
 800af6c:	bf44      	itt	mi
 800af6e:	232b      	movmi	r3, #43	@ 0x2b
 800af70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af74:	f89a 3000 	ldrb.w	r3, [sl]
 800af78:	2b2a      	cmp	r3, #42	@ 0x2a
 800af7a:	d015      	beq.n	800afa8 <_vfiprintf_r+0x120>
 800af7c:	9a07      	ldr	r2, [sp, #28]
 800af7e:	4654      	mov	r4, sl
 800af80:	2000      	movs	r0, #0
 800af82:	f04f 0c0a 	mov.w	ip, #10
 800af86:	4621      	mov	r1, r4
 800af88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af8c:	3b30      	subs	r3, #48	@ 0x30
 800af8e:	2b09      	cmp	r3, #9
 800af90:	d94b      	bls.n	800b02a <_vfiprintf_r+0x1a2>
 800af92:	b1b0      	cbz	r0, 800afc2 <_vfiprintf_r+0x13a>
 800af94:	9207      	str	r2, [sp, #28]
 800af96:	e014      	b.n	800afc2 <_vfiprintf_r+0x13a>
 800af98:	eba0 0308 	sub.w	r3, r0, r8
 800af9c:	fa09 f303 	lsl.w	r3, r9, r3
 800afa0:	4313      	orrs	r3, r2
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	46a2      	mov	sl, r4
 800afa6:	e7d2      	b.n	800af4e <_vfiprintf_r+0xc6>
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	1d19      	adds	r1, r3, #4
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	9103      	str	r1, [sp, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	bfbb      	ittet	lt
 800afb4:	425b      	neglt	r3, r3
 800afb6:	f042 0202 	orrlt.w	r2, r2, #2
 800afba:	9307      	strge	r3, [sp, #28]
 800afbc:	9307      	strlt	r3, [sp, #28]
 800afbe:	bfb8      	it	lt
 800afc0:	9204      	strlt	r2, [sp, #16]
 800afc2:	7823      	ldrb	r3, [r4, #0]
 800afc4:	2b2e      	cmp	r3, #46	@ 0x2e
 800afc6:	d10a      	bne.n	800afde <_vfiprintf_r+0x156>
 800afc8:	7863      	ldrb	r3, [r4, #1]
 800afca:	2b2a      	cmp	r3, #42	@ 0x2a
 800afcc:	d132      	bne.n	800b034 <_vfiprintf_r+0x1ac>
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	1d1a      	adds	r2, r3, #4
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	9203      	str	r2, [sp, #12]
 800afd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afda:	3402      	adds	r4, #2
 800afdc:	9305      	str	r3, [sp, #20]
 800afde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b0b4 <_vfiprintf_r+0x22c>
 800afe2:	7821      	ldrb	r1, [r4, #0]
 800afe4:	2203      	movs	r2, #3
 800afe6:	4650      	mov	r0, sl
 800afe8:	f7f5 f91a 	bl	8000220 <memchr>
 800afec:	b138      	cbz	r0, 800affe <_vfiprintf_r+0x176>
 800afee:	9b04      	ldr	r3, [sp, #16]
 800aff0:	eba0 000a 	sub.w	r0, r0, sl
 800aff4:	2240      	movs	r2, #64	@ 0x40
 800aff6:	4082      	lsls	r2, r0
 800aff8:	4313      	orrs	r3, r2
 800affa:	3401      	adds	r4, #1
 800affc:	9304      	str	r3, [sp, #16]
 800affe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b002:	4829      	ldr	r0, [pc, #164]	@ (800b0a8 <_vfiprintf_r+0x220>)
 800b004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b008:	2206      	movs	r2, #6
 800b00a:	f7f5 f909 	bl	8000220 <memchr>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d03f      	beq.n	800b092 <_vfiprintf_r+0x20a>
 800b012:	4b26      	ldr	r3, [pc, #152]	@ (800b0ac <_vfiprintf_r+0x224>)
 800b014:	bb1b      	cbnz	r3, 800b05e <_vfiprintf_r+0x1d6>
 800b016:	9b03      	ldr	r3, [sp, #12]
 800b018:	3307      	adds	r3, #7
 800b01a:	f023 0307 	bic.w	r3, r3, #7
 800b01e:	3308      	adds	r3, #8
 800b020:	9303      	str	r3, [sp, #12]
 800b022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b024:	443b      	add	r3, r7
 800b026:	9309      	str	r3, [sp, #36]	@ 0x24
 800b028:	e76a      	b.n	800af00 <_vfiprintf_r+0x78>
 800b02a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b02e:	460c      	mov	r4, r1
 800b030:	2001      	movs	r0, #1
 800b032:	e7a8      	b.n	800af86 <_vfiprintf_r+0xfe>
 800b034:	2300      	movs	r3, #0
 800b036:	3401      	adds	r4, #1
 800b038:	9305      	str	r3, [sp, #20]
 800b03a:	4619      	mov	r1, r3
 800b03c:	f04f 0c0a 	mov.w	ip, #10
 800b040:	4620      	mov	r0, r4
 800b042:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b046:	3a30      	subs	r2, #48	@ 0x30
 800b048:	2a09      	cmp	r2, #9
 800b04a:	d903      	bls.n	800b054 <_vfiprintf_r+0x1cc>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d0c6      	beq.n	800afde <_vfiprintf_r+0x156>
 800b050:	9105      	str	r1, [sp, #20]
 800b052:	e7c4      	b.n	800afde <_vfiprintf_r+0x156>
 800b054:	fb0c 2101 	mla	r1, ip, r1, r2
 800b058:	4604      	mov	r4, r0
 800b05a:	2301      	movs	r3, #1
 800b05c:	e7f0      	b.n	800b040 <_vfiprintf_r+0x1b8>
 800b05e:	ab03      	add	r3, sp, #12
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	462a      	mov	r2, r5
 800b064:	4b12      	ldr	r3, [pc, #72]	@ (800b0b0 <_vfiprintf_r+0x228>)
 800b066:	a904      	add	r1, sp, #16
 800b068:	4630      	mov	r0, r6
 800b06a:	f7fd fbcf 	bl	800880c <_printf_float>
 800b06e:	4607      	mov	r7, r0
 800b070:	1c78      	adds	r0, r7, #1
 800b072:	d1d6      	bne.n	800b022 <_vfiprintf_r+0x19a>
 800b074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b076:	07d9      	lsls	r1, r3, #31
 800b078:	d405      	bmi.n	800b086 <_vfiprintf_r+0x1fe>
 800b07a:	89ab      	ldrh	r3, [r5, #12]
 800b07c:	059a      	lsls	r2, r3, #22
 800b07e:	d402      	bmi.n	800b086 <_vfiprintf_r+0x1fe>
 800b080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b082:	f7fe f92b 	bl	80092dc <__retarget_lock_release_recursive>
 800b086:	89ab      	ldrh	r3, [r5, #12]
 800b088:	065b      	lsls	r3, r3, #25
 800b08a:	f53f af1f 	bmi.w	800aecc <_vfiprintf_r+0x44>
 800b08e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b090:	e71e      	b.n	800aed0 <_vfiprintf_r+0x48>
 800b092:	ab03      	add	r3, sp, #12
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	462a      	mov	r2, r5
 800b098:	4b05      	ldr	r3, [pc, #20]	@ (800b0b0 <_vfiprintf_r+0x228>)
 800b09a:	a904      	add	r1, sp, #16
 800b09c:	4630      	mov	r0, r6
 800b09e:	f7fd fe4d 	bl	8008d3c <_printf_i>
 800b0a2:	e7e4      	b.n	800b06e <_vfiprintf_r+0x1e6>
 800b0a4:	0800b6d0 	.word	0x0800b6d0
 800b0a8:	0800b6da 	.word	0x0800b6da
 800b0ac:	0800880d 	.word	0x0800880d
 800b0b0:	0800ae65 	.word	0x0800ae65
 800b0b4:	0800b6d6 	.word	0x0800b6d6

0800b0b8 <__swbuf_r>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	460e      	mov	r6, r1
 800b0bc:	4614      	mov	r4, r2
 800b0be:	4605      	mov	r5, r0
 800b0c0:	b118      	cbz	r0, 800b0ca <__swbuf_r+0x12>
 800b0c2:	6a03      	ldr	r3, [r0, #32]
 800b0c4:	b90b      	cbnz	r3, 800b0ca <__swbuf_r+0x12>
 800b0c6:	f7fd ffe5 	bl	8009094 <__sinit>
 800b0ca:	69a3      	ldr	r3, [r4, #24]
 800b0cc:	60a3      	str	r3, [r4, #8]
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	071a      	lsls	r2, r3, #28
 800b0d2:	d501      	bpl.n	800b0d8 <__swbuf_r+0x20>
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	b943      	cbnz	r3, 800b0ea <__swbuf_r+0x32>
 800b0d8:	4621      	mov	r1, r4
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f000 f82a 	bl	800b134 <__swsetup_r>
 800b0e0:	b118      	cbz	r0, 800b0ea <__swbuf_r+0x32>
 800b0e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	6922      	ldr	r2, [r4, #16]
 800b0ee:	1a98      	subs	r0, r3, r2
 800b0f0:	6963      	ldr	r3, [r4, #20]
 800b0f2:	b2f6      	uxtb	r6, r6
 800b0f4:	4283      	cmp	r3, r0
 800b0f6:	4637      	mov	r7, r6
 800b0f8:	dc05      	bgt.n	800b106 <__swbuf_r+0x4e>
 800b0fa:	4621      	mov	r1, r4
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f7ff fd99 	bl	800ac34 <_fflush_r>
 800b102:	2800      	cmp	r0, #0
 800b104:	d1ed      	bne.n	800b0e2 <__swbuf_r+0x2a>
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	3b01      	subs	r3, #1
 800b10a:	60a3      	str	r3, [r4, #8]
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	1c5a      	adds	r2, r3, #1
 800b110:	6022      	str	r2, [r4, #0]
 800b112:	701e      	strb	r6, [r3, #0]
 800b114:	6962      	ldr	r2, [r4, #20]
 800b116:	1c43      	adds	r3, r0, #1
 800b118:	429a      	cmp	r2, r3
 800b11a:	d004      	beq.n	800b126 <__swbuf_r+0x6e>
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	07db      	lsls	r3, r3, #31
 800b120:	d5e1      	bpl.n	800b0e6 <__swbuf_r+0x2e>
 800b122:	2e0a      	cmp	r6, #10
 800b124:	d1df      	bne.n	800b0e6 <__swbuf_r+0x2e>
 800b126:	4621      	mov	r1, r4
 800b128:	4628      	mov	r0, r5
 800b12a:	f7ff fd83 	bl	800ac34 <_fflush_r>
 800b12e:	2800      	cmp	r0, #0
 800b130:	d0d9      	beq.n	800b0e6 <__swbuf_r+0x2e>
 800b132:	e7d6      	b.n	800b0e2 <__swbuf_r+0x2a>

0800b134 <__swsetup_r>:
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4b29      	ldr	r3, [pc, #164]	@ (800b1dc <__swsetup_r+0xa8>)
 800b138:	4605      	mov	r5, r0
 800b13a:	6818      	ldr	r0, [r3, #0]
 800b13c:	460c      	mov	r4, r1
 800b13e:	b118      	cbz	r0, 800b148 <__swsetup_r+0x14>
 800b140:	6a03      	ldr	r3, [r0, #32]
 800b142:	b90b      	cbnz	r3, 800b148 <__swsetup_r+0x14>
 800b144:	f7fd ffa6 	bl	8009094 <__sinit>
 800b148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b14c:	0719      	lsls	r1, r3, #28
 800b14e:	d422      	bmi.n	800b196 <__swsetup_r+0x62>
 800b150:	06da      	lsls	r2, r3, #27
 800b152:	d407      	bmi.n	800b164 <__swsetup_r+0x30>
 800b154:	2209      	movs	r2, #9
 800b156:	602a      	str	r2, [r5, #0]
 800b158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b162:	e033      	b.n	800b1cc <__swsetup_r+0x98>
 800b164:	0758      	lsls	r0, r3, #29
 800b166:	d512      	bpl.n	800b18e <__swsetup_r+0x5a>
 800b168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b16a:	b141      	cbz	r1, 800b17e <__swsetup_r+0x4a>
 800b16c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b170:	4299      	cmp	r1, r3
 800b172:	d002      	beq.n	800b17a <__swsetup_r+0x46>
 800b174:	4628      	mov	r0, r5
 800b176:	f7fe feff 	bl	8009f78 <_free_r>
 800b17a:	2300      	movs	r3, #0
 800b17c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b184:	81a3      	strh	r3, [r4, #12]
 800b186:	2300      	movs	r3, #0
 800b188:	6063      	str	r3, [r4, #4]
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f043 0308 	orr.w	r3, r3, #8
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	6923      	ldr	r3, [r4, #16]
 800b198:	b94b      	cbnz	r3, 800b1ae <__swsetup_r+0x7a>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1a4:	d003      	beq.n	800b1ae <__swsetup_r+0x7a>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	f000 f883 	bl	800b2b4 <__smakebuf_r>
 800b1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b2:	f013 0201 	ands.w	r2, r3, #1
 800b1b6:	d00a      	beq.n	800b1ce <__swsetup_r+0x9a>
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	60a2      	str	r2, [r4, #8]
 800b1bc:	6962      	ldr	r2, [r4, #20]
 800b1be:	4252      	negs	r2, r2
 800b1c0:	61a2      	str	r2, [r4, #24]
 800b1c2:	6922      	ldr	r2, [r4, #16]
 800b1c4:	b942      	cbnz	r2, 800b1d8 <__swsetup_r+0xa4>
 800b1c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b1ca:	d1c5      	bne.n	800b158 <__swsetup_r+0x24>
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
 800b1ce:	0799      	lsls	r1, r3, #30
 800b1d0:	bf58      	it	pl
 800b1d2:	6962      	ldrpl	r2, [r4, #20]
 800b1d4:	60a2      	str	r2, [r4, #8]
 800b1d6:	e7f4      	b.n	800b1c2 <__swsetup_r+0x8e>
 800b1d8:	2000      	movs	r0, #0
 800b1da:	e7f7      	b.n	800b1cc <__swsetup_r+0x98>
 800b1dc:	2000001c 	.word	0x2000001c

0800b1e0 <_raise_r>:
 800b1e0:	291f      	cmp	r1, #31
 800b1e2:	b538      	push	{r3, r4, r5, lr}
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	d904      	bls.n	800b1f4 <_raise_r+0x14>
 800b1ea:	2316      	movs	r3, #22
 800b1ec:	6003      	str	r3, [r0, #0]
 800b1ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1f2:	bd38      	pop	{r3, r4, r5, pc}
 800b1f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1f6:	b112      	cbz	r2, 800b1fe <_raise_r+0x1e>
 800b1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1fc:	b94b      	cbnz	r3, 800b212 <_raise_r+0x32>
 800b1fe:	4628      	mov	r0, r5
 800b200:	f000 f830 	bl	800b264 <_getpid_r>
 800b204:	4622      	mov	r2, r4
 800b206:	4601      	mov	r1, r0
 800b208:	4628      	mov	r0, r5
 800b20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b20e:	f000 b817 	b.w	800b240 <_kill_r>
 800b212:	2b01      	cmp	r3, #1
 800b214:	d00a      	beq.n	800b22c <_raise_r+0x4c>
 800b216:	1c59      	adds	r1, r3, #1
 800b218:	d103      	bne.n	800b222 <_raise_r+0x42>
 800b21a:	2316      	movs	r3, #22
 800b21c:	6003      	str	r3, [r0, #0]
 800b21e:	2001      	movs	r0, #1
 800b220:	e7e7      	b.n	800b1f2 <_raise_r+0x12>
 800b222:	2100      	movs	r1, #0
 800b224:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b228:	4620      	mov	r0, r4
 800b22a:	4798      	blx	r3
 800b22c:	2000      	movs	r0, #0
 800b22e:	e7e0      	b.n	800b1f2 <_raise_r+0x12>

0800b230 <raise>:
 800b230:	4b02      	ldr	r3, [pc, #8]	@ (800b23c <raise+0xc>)
 800b232:	4601      	mov	r1, r0
 800b234:	6818      	ldr	r0, [r3, #0]
 800b236:	f7ff bfd3 	b.w	800b1e0 <_raise_r>
 800b23a:	bf00      	nop
 800b23c:	2000001c 	.word	0x2000001c

0800b240 <_kill_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4d07      	ldr	r5, [pc, #28]	@ (800b260 <_kill_r+0x20>)
 800b244:	2300      	movs	r3, #0
 800b246:	4604      	mov	r4, r0
 800b248:	4608      	mov	r0, r1
 800b24a:	4611      	mov	r1, r2
 800b24c:	602b      	str	r3, [r5, #0]
 800b24e:	f7f6 fe91 	bl	8001f74 <_kill>
 800b252:	1c43      	adds	r3, r0, #1
 800b254:	d102      	bne.n	800b25c <_kill_r+0x1c>
 800b256:	682b      	ldr	r3, [r5, #0]
 800b258:	b103      	cbz	r3, 800b25c <_kill_r+0x1c>
 800b25a:	6023      	str	r3, [r4, #0]
 800b25c:	bd38      	pop	{r3, r4, r5, pc}
 800b25e:	bf00      	nop
 800b260:	20004764 	.word	0x20004764

0800b264 <_getpid_r>:
 800b264:	f7f6 be7e 	b.w	8001f64 <_getpid>

0800b268 <__swhatbuf_r>:
 800b268:	b570      	push	{r4, r5, r6, lr}
 800b26a:	460c      	mov	r4, r1
 800b26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b270:	2900      	cmp	r1, #0
 800b272:	b096      	sub	sp, #88	@ 0x58
 800b274:	4615      	mov	r5, r2
 800b276:	461e      	mov	r6, r3
 800b278:	da0d      	bge.n	800b296 <__swhatbuf_r+0x2e>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b280:	f04f 0100 	mov.w	r1, #0
 800b284:	bf14      	ite	ne
 800b286:	2340      	movne	r3, #64	@ 0x40
 800b288:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b28c:	2000      	movs	r0, #0
 800b28e:	6031      	str	r1, [r6, #0]
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	b016      	add	sp, #88	@ 0x58
 800b294:	bd70      	pop	{r4, r5, r6, pc}
 800b296:	466a      	mov	r2, sp
 800b298:	f000 f848 	bl	800b32c <_fstat_r>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	dbec      	blt.n	800b27a <__swhatbuf_r+0x12>
 800b2a0:	9901      	ldr	r1, [sp, #4]
 800b2a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2aa:	4259      	negs	r1, r3
 800b2ac:	4159      	adcs	r1, r3
 800b2ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2b2:	e7eb      	b.n	800b28c <__swhatbuf_r+0x24>

0800b2b4 <__smakebuf_r>:
 800b2b4:	898b      	ldrh	r3, [r1, #12]
 800b2b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2b8:	079d      	lsls	r5, r3, #30
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	460c      	mov	r4, r1
 800b2be:	d507      	bpl.n	800b2d0 <__smakebuf_r+0x1c>
 800b2c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	6123      	str	r3, [r4, #16]
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	6163      	str	r3, [r4, #20]
 800b2cc:	b003      	add	sp, #12
 800b2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2d0:	ab01      	add	r3, sp, #4
 800b2d2:	466a      	mov	r2, sp
 800b2d4:	f7ff ffc8 	bl	800b268 <__swhatbuf_r>
 800b2d8:	9f00      	ldr	r7, [sp, #0]
 800b2da:	4605      	mov	r5, r0
 800b2dc:	4639      	mov	r1, r7
 800b2de:	4630      	mov	r0, r6
 800b2e0:	f7fe febe 	bl	800a060 <_malloc_r>
 800b2e4:	b948      	cbnz	r0, 800b2fa <__smakebuf_r+0x46>
 800b2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ea:	059a      	lsls	r2, r3, #22
 800b2ec:	d4ee      	bmi.n	800b2cc <__smakebuf_r+0x18>
 800b2ee:	f023 0303 	bic.w	r3, r3, #3
 800b2f2:	f043 0302 	orr.w	r3, r3, #2
 800b2f6:	81a3      	strh	r3, [r4, #12]
 800b2f8:	e7e2      	b.n	800b2c0 <__smakebuf_r+0xc>
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	6020      	str	r0, [r4, #0]
 800b2fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b302:	81a3      	strh	r3, [r4, #12]
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b30a:	b15b      	cbz	r3, 800b324 <__smakebuf_r+0x70>
 800b30c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b310:	4630      	mov	r0, r6
 800b312:	f000 f81d 	bl	800b350 <_isatty_r>
 800b316:	b128      	cbz	r0, 800b324 <__smakebuf_r+0x70>
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	f023 0303 	bic.w	r3, r3, #3
 800b31e:	f043 0301 	orr.w	r3, r3, #1
 800b322:	81a3      	strh	r3, [r4, #12]
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	431d      	orrs	r5, r3
 800b328:	81a5      	strh	r5, [r4, #12]
 800b32a:	e7cf      	b.n	800b2cc <__smakebuf_r+0x18>

0800b32c <_fstat_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d07      	ldr	r5, [pc, #28]	@ (800b34c <_fstat_r+0x20>)
 800b330:	2300      	movs	r3, #0
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	4611      	mov	r1, r2
 800b338:	602b      	str	r3, [r5, #0]
 800b33a:	f7f6 fe7b 	bl	8002034 <_fstat>
 800b33e:	1c43      	adds	r3, r0, #1
 800b340:	d102      	bne.n	800b348 <_fstat_r+0x1c>
 800b342:	682b      	ldr	r3, [r5, #0]
 800b344:	b103      	cbz	r3, 800b348 <_fstat_r+0x1c>
 800b346:	6023      	str	r3, [r4, #0]
 800b348:	bd38      	pop	{r3, r4, r5, pc}
 800b34a:	bf00      	nop
 800b34c:	20004764 	.word	0x20004764

0800b350 <_isatty_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d06      	ldr	r5, [pc, #24]	@ (800b36c <_isatty_r+0x1c>)
 800b354:	2300      	movs	r3, #0
 800b356:	4604      	mov	r4, r0
 800b358:	4608      	mov	r0, r1
 800b35a:	602b      	str	r3, [r5, #0]
 800b35c:	f7f6 fe7a 	bl	8002054 <_isatty>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d102      	bne.n	800b36a <_isatty_r+0x1a>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	b103      	cbz	r3, 800b36a <_isatty_r+0x1a>
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	20004764 	.word	0x20004764

0800b370 <_init>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	bf00      	nop
 800b374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b376:	bc08      	pop	{r3}
 800b378:	469e      	mov	lr, r3
 800b37a:	4770      	bx	lr

0800b37c <_fini>:
 800b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37e:	bf00      	nop
 800b380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b382:	bc08      	pop	{r3}
 800b384:	469e      	mov	lr, r3
 800b386:	4770      	bx	lr
